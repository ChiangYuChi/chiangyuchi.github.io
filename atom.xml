<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-28T06:39:02.238Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git 基本指令</title>
    <link href="http://yoursite.com/2019/06/25/2019-06-25/"/>
    <id>http://yoursite.com/2019/06/25/2019-06-25/</id>
    <published>2019-06-24T16:00:00.000Z</published>
    <updated>2019-06-28T06:39:02.238Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用終端機指令"><a href="#常用終端機指令" class="headerlink" title="常用終端機指令"></a>常用終端機指令</h3><p>$ pwd (print working directory 印出現在所在位置)<br>$ mkdir hello (make dir 建立目錄 hello)<br>$ cd hello/（change dir 移動到目錄 hello）<br>$ cd .. (回到上一層目錄)<br>$ touch index.html (建立檔案 index.html)<br>$ ls (列出目錄裡所有檔案)<br>$ ls -al (列出目錄裡所有檔案的細節)<br>$ rm index.html(徹底刪除檔案)<br>$ rm -r hello/ (徹底刪除hello資料夾)<br>$ cp hello.html world.html （複製 hello.html 為 world.html）<br>$ mv world.html images/ (把 world.html 搬到 images 資料夾 )<br>$ mv world.html 123.html (把 world.html 改名 123.html)</p><p><img src="https://i.imgur.com/6TPZXrC.png" alt></p><h3 id="使用-git"><a href="#使用-git" class="headerlink" title="使用 git"></a>使用 git</h3><h4 id="檢視目前設定"><a href="#檢視目前設定" class="headerlink" title="檢視目前設定"></a>檢視目前設定</h4><p>$ git config –list</p><h4 id="設定帳密"><a href="#設定帳密" class="headerlink" title="設定帳密"></a>設定帳密</h4><p>$ git config –global user.name ‘cxxxxxxx’<br>$ git config –global user.email ‘cxxxxxxx@gmail.com’</p><h4 id="查詢設定"><a href="#查詢設定" class="headerlink" title="查詢設定"></a>查詢設定</h4><p>$ git config –list</p><h3 id="Git-初始化"><a href="#Git-初始化" class="headerlink" title="Git 初始化"></a>Git 初始化</h3><p>讓 Git 知道這個資料夾要進行版控</p><ul><li>建立目錄<br>$ mkdir git-practice<br>$ cd git-practice</li><li>git 初始化<br>$ git init (自動建立一個.git目錄)</li></ul><h3 id="Git-重要區塊"><a href="#Git-重要區塊" class="headerlink" title="Git 重要區塊"></a>Git 重要區塊</h3><ul><li>工作目錄 (working)</li><li>暫存區域 (staging)</li><li>儲存庫 (repository)</li></ul><blockquote><p>它們並不是被放到某個「目錄」，比較像是狀態的「改變」</p></blockquote><h4 id="新增檔案"><a href="#新增檔案" class="headerlink" title="新增檔案"></a>新增檔案</h4><ul><li>現在 git 狀態<br>$ git status<br>$ git add index.html (新增一個檔案的時候，status 還是 untracked file，之後從工作目錄改到暫存區域變成 new file )<br>$ git commit -m “add index” (推到儲存庫，status 顯示 working tree clean)</li></ul><p><img src="https://i.imgur.com/hJEeFVT.png" alt></p><blockquote><p>add+commit 這樣的循環是一次存檔<br>commit 的訊息很重要，重點是這次存了什麼</p></blockquote><ul><li>檢視記錄<br>$ git log<br>$ git log –oneline</li></ul><h3 id="Git-使用情境-1"><a href="#Git-使用情境-1" class="headerlink" title="Git 使用情境 1"></a>Git 使用情境 1</h3><ul><li><p>檔案不小心刪掉怎麼辦？<br>$ rm index.html<br>$ git checkout –index.html<br>$ git checkout . (把這個目錄恢復成最近一次 commit 狀態)</p></li><li><p>查詢檔案作者<br>$ git blame index.html</p></li><li><p>git 裡新增目錄並進行版控<br>由於 git 不會把空資料夾運算進版控，所以可以放一個隱藏檔<br>$ touch hello-world/.keep</p></li></ul><h3 id="使用分支"><a href="#使用分支" class="headerlink" title="使用分支"></a>使用分支</h3><p>為什麼要使用分支？</p><blockquote><p>一般來說，我們分支只是貼在某個 commit 上的貼紙，例如下圖的 master :</p></blockquote><p><img src="https://i.imgur.com/Vly0sFs.png" alt></p><ul><li>查詢分支<br>$ git branch </li><li>開新分支<br>$ git branch xxxx (git branch 後面加上要開的分支名稱)</li></ul><p><img src="https://i.imgur.com/keIwyUn.png" alt></p><blockquote><p>如果 HEAD 現在指向 master，意思就是「現在正在 master 分之上」</p></blockquote><ul><li>切換分支<br>$ git checkout cat (switched to master ‘cat’ )</li><li>合併分支<br>$ git merge cat </li></ul><p>合併前：<br><img src="https://i.imgur.com/9VLiKmo.png" alt><br>合併後：<br><img src="https://i.imgur.com/xyO3GU3.png" alt></p><blockquote><p>合併分支可看成只是在移動貼紙，但是這邊的合併還算單純，所以算是一種「<strong>快轉合併</strong>」</p><ul><li>刪除分支<br>$ git branch -d cat<br>只是把 cat 貼紙撕掉<br>commit 或是檔案不會因此受到影響<br>Git 的本體是 commit </li></ul></blockquote><h3 id="複雜一點的分支"><a href="#複雜一點的分支" class="headerlink" title="複雜一點的分支"></a>複雜一點的分支</h3><p>如果是各自新增的 branch 就沒辦法快轉合併了，要怎麼處理？例如現在分別有一個 dog 跟 cat branch，假設現在 HEAD 指向 dog branch：<br><img src="https://i.imgur.com/cM5Ho0b.png" alt></p><ul><li>合併 dog 跟 cat branch<br>$ git merge cat</li></ul><p><img src="https://i.imgur.com/nR08OV6.png" alt></p><h3 id="另一種合併分支的方式-（rebase"><a href="#另一種合併分支的方式-（rebase" class="headerlink" title="另一種合併分支的方式 （rebase)"></a>另一種合併分支的方式 （rebase)</h3><p><img src="https://i.imgur.com/ymEIFIf.png" alt><br><img src="https://i.imgur.com/ZHgFviZ.png" alt></p><pre><code>以 rebase 合併的好處：合併的歷史比較簡潔乾淨，但相對 merge，就比較難看清楚整個檔案的分支記錄過程。</code></pre><h3 id="如何回到上一步-返回之前狀態"><a href="#如何回到上一步-返回之前狀態" class="headerlink" title="如何回到上一步 (返回之前狀態)"></a>如何回到上一步 (返回之前狀態)</h3><blockquote><p> 對 Git 常見的誤解是以為 reset 是刪除 commit 的意思。但是 Git 的世界事實上沒有刪除 Commit 的指令。一般我們把 reset 理解成「重新設定」，其實可以理解成 become，一種「我想要變成XXX」的狀態。</p><blockquote></blockquote></blockquote><p>原始檔案狀態：<br><img src="https://i.imgur.com/JHdTMi7.png" alt><br>reset 狀態：<br><img src="https://i.imgur.com/8g5Njgz.png" alt></p><p>參數狀態決定檔案去留，常見參數有</p><ul><li>mixed</li><li>soft</li><li>hard</li></ul><p><img src="https://i.imgur.com/L8ghm4Q.png" alt></p><p>在使用 –hard 的時候，如果要再次恢復專案到上一步，要怎樣做？</p><h3 id="reflog-reference-log"><a href="#reflog-reference-log" class="headerlink" title="reflog (reference log )"></a>reflog (reference log )</h3><p>Git 會把移動軌跡都記錄在 reference log，如果使用 –hard 之後想要復原，可先查詢 reflog </p><h4 id="絕對定位法"><a href="#絕對定位法" class="headerlink" title="絕對定位法"></a>絕對定位法</h4><p>$ git reflog (查詢 commit 編號)<br>$ git reset xxxxx(commit 編號) –hard </p><h4 id="相對定位"><a href="#相對定位" class="headerlink" title="相對定位"></a>相對定位</h4><ul><li><code>^</code> Caret</li><li><code>~</code> Tilde </li></ul><p><img src="https://i.imgur.com/lMofhTE.png" alt></p><p>但是如果每次都要輸入 commit 編號有點麻煩，可以把編號改成代號，例如回到現在狀態的前 2 步</p><p><img src="https://i.imgur.com/DruAI8w.png" alt></p><p>例如回到上一個步驟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^ --mixed</span><br></pre></td></tr></table></figure><h4 id="reset-跟-checkout-差別是什麼？"><a href="#reset-跟-checkout-差別是什麼？" class="headerlink" title="reset 跟 checkout 差別是什麼？"></a>reset 跟 checkout 差別是什麼？</h4><p><img src="https://i.imgur.com/fSAJhWD.png" alt></p><h3 id="Git-使用情境-2"><a href="#Git-使用情境-2" class="headerlink" title="Git 使用情境 2"></a>Git 使用情境 2</h3><ul><li><p>回到上一個步驟的兩種作法<br>$ git reset xxxxx(commit 編號) –mixed<br>$ git reset HEAD^ –mixed</p></li><li><p>合併發生衝突怎麼辦？</p></li></ul><p>如果合併時遇到像是同一行 HTML 檔案的衝突，該怎麼辦呢？這時在 HTML 檔案中會出現像這樣：<br><img src="https://i.imgur.com/Xb5B1tm.png" alt></p><p>我們先把那些標記都清除<br><img src="https://i.imgur.com/SMAevkt.png" alt></p><p>並且回到終端機，這時 git status 如下，表示我們要再做一次存檔動作<br><img src="https://i.imgur.com/p2jJTPr.jpg" alt><br>$ git add index.html<br>$ git commit -m “merge payment and member”</p><ul><li><p>不小心把還沒合併的分支砍掉了，救得回來嗎？<br>$git branch -D new_dog (不小心砍掉一個分支)<br>$git branch newnew_dog 053fb21 (在reflog重新貼上newnew_dog)</p></li><li><p>某個分支的某個 commit 做得不錯想收進來，但又不想合併整個分支<br>使用 cherry pick 指令</p></li></ul><h3 id="使用標籤"><a href="#使用標籤" class="headerlink" title="使用標籤"></a>使用標籤</h3><p>什麼時候會使用標籤？在 Git，「標籤（tag）」是一個指向某一個 Commit 的指標。通常在開發軟體有完成特定的里程碑，例如軟體版號 1.0.0 或是 beta-release 之類的，這時候就很適合使用標籤做標記。<br>假設目前的 Commit 紀錄如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">db3bbec (HEAD -&gt; master) add fish</span><br><span class="line">930feb3 add pig</span><br><span class="line">51d54ff add lion and tiger</span><br><span class="line">27f6ed6 add dog 2</span><br><span class="line">2bab3e7 add dog 1</span><br><span class="line">ca40fc9 add 2 cats</span><br><span class="line">1de2076 add cat 2</span><br><span class="line">cd82f29 add cat 1</span><br><span class="line">382a2a5 add database settings</span><br><span class="line">bb0c9c2 init commit</span><br></pre></td></tr></table></figure><p>想在 add lion and tiger 這個 Commit（51d54ff）打上一個 big_cats 的標籤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag big_cats 51d54ff</span><br></pre></td></tr></table></figure><h3 id="修改歷史紀錄"><a href="#修改歷史紀錄" class="headerlink" title="修改歷史紀錄"></a>修改歷史紀錄</h3><h4 id="修改-Commit-訊息-（圖型介面）"><a href="#修改-Commit-訊息-（圖型介面）" class="headerlink" title="修改 Commit 訊息 （圖型介面）"></a>修改 Commit 訊息 （圖型介面）</h4><p>這裡使用的指令一樣是 rebase 但多了互動式操作，在圖型介面的位置如下。操作後可以修改<br><img src="https://i.imgur.com/PCL7fcc.png" alt><br>點擊之後可選擇要修改的地方<img src="https://i.imgur.com/VJk83ZQ.png" alt><br>修改訊息之後，被修正的地方，還有在它後面的訊息的 Changeset 都會被改變<br><img src="https://i.imgur.com/Fn0AcVn.png" alt><br>修改結果<br><img src="https://i.imgur.com/XADDULQ.png" alt></p><h4 id="修改-Commit-訊息-（終端機）"><a href="#修改-Commit-訊息-（終端機）" class="headerlink" title="修改 Commit 訊息 （終端機）"></a>修改 Commit 訊息 （終端機）</h4><p>$ git rebase -i f66ba66 (意思是要修改後退到這個commit編號為止的歷史)</p><blockquote><p>每一次的 rebase ，就算只改一個字，也會改變隨後全部的歷史紀錄</p></blockquote><h3 id="刪除或調整-commit-順序"><a href="#刪除或調整-commit-順序" class="headerlink" title="刪除或調整 commit 順序"></a>刪除或調整 commit 順序</h3><p><img src="https://i.imgur.com/qdr9Cvj.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用終端機指令&quot;&gt;&lt;a href=&quot;#常用終端機指令&quot; class=&quot;headerlink&quot; title=&quot;常用終端機指令&quot;&gt;&lt;/a&gt;常用終端機指令&lt;/h3&gt;&lt;p&gt;$ pwd (print working directory 印出現在所在位置)&lt;br&gt;$ mkdi
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>如何條列化思考</title>
    <link href="http://yoursite.com/2019/06/24/2019-06-24/"/>
    <id>http://yoursite.com/2019/06/24/2019-06-24/</id>
    <published>2019-06-23T16:00:00.000Z</published>
    <updated>2019-06-28T06:30:49.794Z</updated>
    
    <content type="html"><![CDATA[<p>這篇是 Hulo的線上免費課程初心者的計概與 coding 火球術，提供給我這種入門新手的程式思維思考心法。第二堂課的主題是「解決問題」，關注的方向式關於如何在日常思維與電腦化思維之間切換。在第一堂課之後，開始要練習一個可以深入學習的工程師思維，這需要不斷地問自己「為什麼？」另外，到底為什麼要寫程式呢？因為我們要用電腦話讓電腦照著我的意思做。要讓電腦聽話，那就要使用程式碼。最後，程式碼的目標，就是為了解決問題。</p><p>如何條列化思考？如何解決問題？<br>=</p><p>首先要學習的是解決問題的思維，而非令人頭痛的程式語法。</p><p>假設以下問題</p><blockquote><p> computerscience 裡有包含 c 嗎？有幾個 c ?</p></blockquote><h3 id="逐步拆解"><a href="#逐步拆解" class="headerlink" title="逐步拆解"></a>逐步拆解</h3><p>我們的人腦要拆解所有文字，自然最終的結果是看所有文字，但細分來說，其實是一個一個字地看（看第一個、看第二個）。</p><p>所以上面問題的解法，其實是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 從第一個看到最後一個，看有沒有 c 這個字</span><br><span class="line">- 如果有，就把位置記下來，並且繼續往下找</span><br></pre></td></tr></table></figure><h3 id="條列式轉換"><a href="#條列式轉換" class="headerlink" title="條列式轉換"></a>條列式轉換</h3><p>寫程式就是對電腦下指令，而且電腦一次只能做一個指令，所以如果把解法寫成條列式，就是練習對電腦下指令。這一堂利用「給你一串文字，問你裡面有沒有 p」當作範例 一步步教你怎麼用「程式化思考」 把自己的解法轉變成更「標準化」的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.找第一個字，看第一個字是不是 c，是的話就把位置記下來，不是的話就繼續往下找</span><br><span class="line">2.找第二個字，看第一個字是不是 c，是的話就把位置記下來，不是的話就繼續往下找</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>但是這樣太麻煩了，我們可以把無限的步驟簡化為有限的條列</p><blockquote><ul><li>假設 n 是 1， length 是字串長度，A 設成 -1 ，代表找到的位置，p 是要找到的字</li><li>看第 n 個字是不是 p，是的話讓 A =n</li><li>把 n+1，如果 n+1 大於 length 的話，就跳到第 5 步</li><li>跳回第 2 步</li><li>如果 A&lt;0，代表沒出現過；否則 A 就是答案</li></ul></blockquote><p>這邊的重點在加入第四步驟，讓第二、三步驟不斷巡迴。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">length: 15</span><br><span class="line">p:c</span><br><span class="line">n  A</span><br><span class="line">1  1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">10 10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15 15</span><br><span class="line">16</span><br></pre></td></tr></table></figure><h3 id="自主練習"><a href="#自主練習" class="headerlink" title="自主練習"></a>自主練習</h3><ul><li>試著把自己的一些生活流程用條列式列出來，每一條只能有一個動作</li></ul><ol><li>如果上班日，十點上床睡覺</li><li>如果假日，十二點上床睡覺</li><li>在廚房煮飯</li><li>搭捷運</li><li>如果晴天，去跑步</li><li>如果雨天，宅在家裡</li></ol><ul><li>給你一個亂數的數列，例如說：1, 8, 9, 2, 5 ,4，你能想出什麼步驟把這些數字由小到大排好嗎？</li></ul><ol><li>假設要讓亂數群根據數字大小排列，我們不知道這些數字裡面最大是多少所以n &lt;=n</li><li>用 1 比對所有數字，如果有符合的話，排在第一個位置</li><li>用 2 比對所有數字，如果有符合的話，排在第二個位置</li><li>用 9 比對所有數字，如果有符合的話，排在第二個位置</li><li>如果排列到10了，大於9的話，停止排列</li></ol><p>如何代號化？</p><blockquote><p>假設我們要比對的最大數字是 n(小於y的那個數字），y&gt;n=&gt;1<br>比對數字群看 n 有沒有出現，是的話讓A=n，代表找到的位置<br>把 n+1，如果 n+1=&gt;y，就跳到第 5 步<br>跳回第 2 步<br>排列完成</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這篇是 Hulo的線上免費課程初心者的計概與 coding 火球術，提供給我這種入門新手的程式思維思考心法。第二堂課的主題是「解決問題」，關注的方向式關於如何在日常思維與電腦化思維之間切換。在第一堂課之後，開始要練習一個可以深入學習的工程師思維，這需要不斷地問自己「為什麼？
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="計算機概論" scheme="http://yoursite.com/tags/%E8%A8%88%E7%AE%97%E6%A9%9F%E6%A6%82%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>Get API 實作</title>
    <link href="http://yoursite.com/2019/06/23/2019-06-23/"/>
    <id>http://yoursite.com/2019/06/23/2019-06-23/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2019-06-28T06:30:41.899Z</updated>
    
    <content type="html"><![CDATA[<p>這一篇主要是整理一個 Get API 小作品的思路。因為是參考別人的解法，加上自己的思考慣性是習慣從頭到尾把細節了解一次才認為完整掌握，所以使用這種看起來笨笨的步驟，一句一句拆解。</p><h3 id="設定-DOM"><a href="#設定-DOM" class="headerlink" title="設定 DOM"></a>設定 DOM</h3><ul><li>select  區域選單</li><li>degreetable </li><li>placeTitle 區域名稱</li><li>time 更新時間</li><li>detail 細節</li><li>detailTitle</li><li>infoList 清單</li></ul><h3 id="取得資料"><a href="#取得資料" class="headerlink" title="取得資料"></a>取得資料</h3><ul><li>fetch open data </li><li>怎麼解決CROS問題 (cros-anywhere)</li><li>fetch 之後要怎麼存？存在哪裡？這些數據要幹嘛？<pre><code>-連結get data 函式，儲存data-更新所有頁面，先放入NTP。( datail, infoList) -待資料渲染至頁面後，關閉 loading page&gt;loading.style.display=&apos;none&apos;;</code></pre></li></ul><h3 id="綁定事件"><a href="#綁定事件" class="headerlink" title="綁定事件"></a>綁定事件</h3><ul><li>表單切換 change 事件<br>切換之後把點擊對象的值（e.target.value)，渲染到整個頁面 (updateAll)</li><li>項目 click 事件，如果點擊的標的是連結(e.target.value==A)，把連結標的的值，更新到細節欄位</li></ul><h3 id="儲存色彩資訊"><a href="#儲存色彩資訊" class="headerlink" title="儲存色彩資訊"></a>儲存色彩資訊</h3><ul><li>把顏色整理成陣列</li><li>顏色加入等級表，用for迴圈</li></ul><h3 id="取得資料後的儲存"><a href="#取得資料後的儲存" class="headerlink" title="取得資料後的儲存"></a>取得資料後的儲存</h3><ul><li><p>getData函式，儲存data為陣列<br>把data裡面待會要存到選單項裡面的，用迴圈以add方法，把需要的內容（需要哪些？），向new Set()結構加入新成員。</p></li><li><p>儲存的資料以location的名稱運用在加入選單所需的參數</p><h3 id="加入選單"><a href="#加入選單" class="headerlink" title="加入選單"></a>加入選單</h3></li><li><p>加入選單的函式（有一個參數location)</p></li><li><p>用forEach方法，巡訪參數的每個元素</p></li><li><p>以名為option的變數，創建元素</p></li><li><p>設置指定元素上element的属性值。如果属性已经存在，则更新该值；否则，使  用指定的名称和值添加一个新的属性。</p></li><li><p>把創建的元素加入option</p></li><li><p>把新增的option加進select</p><h3 id="完成的選單被變更了，觸發-change-事件"><a href="#完成的選單被變更了，觸發-change-事件" class="headerlink" title="完成的選單被變更了，觸發 change 事件"></a>完成的選單被變更了，觸發 change 事件</h3></li><li><p>updateAll（location) 傳入的參數是被點擊的地點</p></li><li><p>被點擊的地點，已經用location儲存，現在取用這個location</p></li><li><p>要在畫面更新的地區抬頭，就是點擊地點</p></li><li><p>要在畫面更新的時間，就取用第一筆陣列資料的發佈時間＋’更新’</p></li><li><p>要更新畫面，先把整個infoList清空</p></li><li><p>宣告一個非全域變數 data，它的值的取得，是在datalist裡一個一個過濾所有項目，如果過濾的項目裡面，有任何一個等於我所在區域的項目，回傳項目。</p></li><li><p>剛剛過濾出的項目儲存在變數data裡面，宣告一個新變數sortedData=data，並且用AQI大小排序</p></li><li><p>排序過的資料，用forEach，以字串形式置入畫面</p></li><li><p>在arrow function 裡，每個被檢查到的data，都當做el參數傳入</p></li><li><p>宣告一個新的變數叫做 newList，以此創建一個新的元素li</p></li><li><p>如果傳入的參數的AQI是空值或hypen，他們的AQI就等於N/A</p></li><li><p>宣告一個新的變數叫colorList，它的值是在colors陣列裡面比對，find 方法會對每個元素執行一次 callback 函式，直到找到一個讓 callback 函式回傳 true 的元素。當元素被找到的時候，find 會立刻回傳該元素，否則 find 會回傳 undefined。這個陣列裡面比對的狀態，當成col參數在這個方法裡運作，比對傳入元素的狀態，如果符合，就回傳色彩。</p></li><li><p>如果資料內沒有status(設備維修),if(colorList==undefined)，套用顏色是 ＃EEEEEE</p></li><li><p>組字串，並且更新：字串包含</p><p>  最外層的inforBox<br>  新增一個連結它的顯示文字是傳入的參數的siteName<br>  新增傳入元素的AQI，它的顏色是在colorList陣列裡面用status比對 的色彩</p></li><li><p>把字串加入newList裡</p></li><li><p>把newList加入父階層infoList</p></li><li><p>同步更新detail, updateDetail(傳入參數排序第一個的站名)</p></li></ul><h3 id="更新detail"><a href="#更新detail" class="headerlink" title="更新detail"></a>更新detail</h3><ul><li>函數傳入的參數就是我點擊的那一個</li><li>那一個要更新在畫面上的項目，是在資料陣列裡面用find()方法尋找的，並且叫它place</li><li>如果點擊的那一個，符合資料陣列裡面的siteName，就把data傳入一個新的空陣列裡面</li><li>空陣列包含 item.O3, item.PM10, item[‘PM2.5’], item.CO, item.SO2, item.NO2</li><li>細節標題的第一項，更新成上面的place</li><li>細節標題的第二項，就是項目的AQI屬性</li><li>著色的方式同上，宣告一個新的變數叫colorList，它的值是在colors陣列裡面比對，find 方法會對每個元素執行一次 callback 函式，直到找到一個讓 callback 函式回傳 true 的元素。當元素被找到的時候，find 會立刻回傳該元素，否則 find 會回傳 undefined。這個陣列裡面比對的狀態，當成col參數在這個方法裡運作，比對傳入元素的狀態，如果符合，就回傳色彩。所以要判斷這個colorlist的status是否等於傳入的項目的status，如果是，就回傳。</li><li>回傳顏色的運用方式，是將細節的第一個的背景顏色，比對colorList。</li><li>把data內的資料更新至 detail上 （用迴圈的方式，去檢查數據的長度，並且依照索引值一個一個放到細節項目的相同索引值位置，並回傳）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一篇主要是整理一個 Get API 小作品的思路。因為是參考別人的解法，加上自己的思考慣性是習慣從頭到尾把細節了解一次才認為完整掌握，所以使用這種看起來笨笨的步驟，一句一句拆解。&lt;/p&gt;
&lt;h3 id=&quot;設定-DOM&quot;&gt;&lt;a href=&quot;#設定-DOM&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>calc()</title>
    <link href="http://yoursite.com/2019/06/06/2019-06-06-2/"/>
    <id>http://yoursite.com/2019/06/06/2019-06-06-2/</id>
    <published>2019-06-05T16:00:00.000Z</published>
    <updated>2019-06-28T06:29:57.739Z</updated>
    
    <content type="html"><![CDATA[<p>calc() 這個 function 需要傳入 1 個加減乘除的運算式，在設定 width、height 這種 <length> 相關的屬性時， 在不同單位間也可以進行運算，如剛剛上面的範例：width: calc(100% - 50px);。calc() 的運算式一樣是按照先乘除後加減進行計算，如果需要進行複雜的運算，在 calc() 裡面也可以再加入括號 ()，就可以設為括號先決裡面的先算。</length></p><ul><li>+：加</li><li>-：減</li><li>*：乘。其中一個運算參數必須是數字 (number)</li><li>/：除。除數必須是數字，除數不可為零，會造成 HTML 解析錯誤。</li></ul><p>必須注意在使用 + 和 - 的時候，在前後一定要加上空白，不然會被誤為是給了個負值。* 和 / 可以不用加，但為了格式統一方便和閱讀建議還是加一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width: calc(50% + 8px)</span><br><span class="line">/* 意思是 50% 的寬度 + 上 8px */</span><br><span class="line">width: calc(50% + -8px)</span><br><span class="line">/* 意思是 50% 的寬度 + 上 -8px，也等於 &apos;50% - 8px&apos; */</span><br></pre></td></tr></table></figure><h3 id="Example-應用範例"><a href="#Example-應用範例" class="headerlink" title="Example 應用範例"></a>Example 應用範例</h3><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>calc() 可以用來定位，如下面所設定的 CSS，就能作出一個滿版的藍色 banner 區塊有固定 40px 的邊距，也是一種將區塊置中的寫法。</p><p><img src="https://i.imgur.com/2XfqtR9.png" alt></p><h4 id="根據父層容器尺寸自動調整尺寸"><a href="#根據父層容器尺寸自動調整尺寸" class="headerlink" title="根據父層容器尺寸自動調整尺寸"></a>根據父層容器尺寸自動調整尺寸</h4><p>設定 width 或 height 屬性使用 calc() 計算的數字是 100% 的時候，會自動去抓父層容器的尺寸。例如：做 autocomplete 的時候，希望在輸入框下，出現和輸入框等寬的列表：</p><p>由於 CSS 在加上 border、padding 的時候都是從原本設定得尺寸再往外加，所以長出來的東西看起來的尺寸會比原本設定的 width 還要大，因此要做到 ul 和 input 等寬的結果，在 input 加上的 padding 和 border 在算 ul 的 width 的時候也要幫他算進去，所以 ul { width: calc(100% + 1rem + 1rem + 2px + 2px); } 指的是：符合父容器的 100% 寬度，加上 input 的 padding-left: 1rem 和 padding-right: 1rem，再加上 border-left: 2px 和 border-right: 2px。</p><p>用 calc() 計算尺寸非常方便，即使不同單位也沒有問題。</p><p><img src="https://i.imgur.com/8kRhxLf.png" alt></p><h4 id="將-calc-巢狀包入-CSS-變數中"><a href="#將-calc-巢狀包入-CSS-變數中" class="headerlink" title="將 calc() 巢狀包入 CSS 變數中"></a>將 calc() 巢狀包入 CSS 變數中</h4><p>只要用括號 () 包好包滿，就可以無限次使用 calc() 方法，會一層一層從括號裡面計算出來。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.foo &#123;</span><br><span class="line">  --widthA: 100px;</span><br><span class="line">  --widthB: calc(var(--widthA) / 2);</span><br><span class="line">  --widthC: calc(var(--widthB) / 2);</span><br><span class="line">  width: var(--widthC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面這段程式碼裡面展開所有變數之後 widthC 就等於：</p><p>–widthC: calc( calc( 100px / 2) / 2)</p><p>所以 .foo 的 width 最後算出來的值就是 25px。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;calc() 這個 function 需要傳入 1 個加減乘除的運算式，在設定 width、height 這種 &lt;length&gt; 相關的屬性時， 在不同單位間也可以進行運算，如剛剛上面的範例：width: calc(100% - 50px);。calc() 的運算式一樣是按
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>let 與 const 的差異</title>
    <link href="http://yoursite.com/2019/06/06/2019-06-06-1/"/>
    <id>http://yoursite.com/2019/06/06/2019-06-06-1/</id>
    <published>2019-06-05T16:00:00.000Z</published>
    <updated>2019-06-28T06:29:50.956Z</updated>
    
    <content type="html"><![CDATA[<p>let 與 const 用來宣告區塊裡的變數。區塊＝{}。</p><p>const 是用來宣告不能修改的唯讀變數，不能被變更的變數，例如 url 網址。 但是如果const宣告的變數是一個陣列或物件，則裡面的內容就能夠被修改。為了避免這種狀況，可以利用以下組合式語法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const obj =&#123;</span><br><span class="line">url:&apos;http://xx.com&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.freeze(obj);</span><br></pre></td></tr></table></figure><p>要注意以下用法：</p><p>一、向上提昇</p><p>var 有向上提昇的特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);</span><br><span class="line">var a = 3;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/JyQieMi.png" alt></p><p>但是const 與 let 不具備這種特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);</span><br><span class="line">let a = 3;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/E2O0ewE.png" alt></p><p>二、同個區塊上不能重複命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var a = 3;</span><br><span class="line">var a=4;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/AcOtZb7.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let a = 3;</span><br><span class="line">let a=4;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/VtV0tHG.png" alt></p><p>三、無法繼承到全域變數</p><p>let與const在ES6就是為了避免var會干擾全域變數的特性，因此不能使用在全域變數。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let a = 3;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/8hZizyC.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var b = 3;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/MXAMKvG.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;let 與 const 用來宣告區塊裡的變數。區塊＝{}。&lt;/p&gt;
&lt;p&gt;const 是用來宣告不能修改的唯讀變數，不能被變更的變數，例如 url 網址。 但是如果const宣告的變數是一個陣列或物件，則裡面的內容就能夠被修改。為了避免這種狀況，可以利用以下組合式語法：&lt;/
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://yoursite.com/2019/06/05/2019-06-05/"/>
    <id>http://yoursite.com/2019/06/05/2019-06-05/</id>
    <published>2019-06-04T16:00:00.000Z</published>
    <updated>2019-06-28T06:29:35.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>AJAX並非是一個技術（Technology），而是一種網站設計的架構（Architecture），雖然主要以JavaScript與XML為主，但還包括其它成員，也就是CSS、DOM（Document Object Model）與HTML等，特別是XMLHttpRequest元件，使AJAX能達到非同步資料交換的目的。</p><p>在Jesse Garrett的文章中，對AJAX的定義如下：</p><p>● 使用XHTML與CSS作為展現標準<br>● 使用DOM作為動態顯示與互動<br>● 使用XML與XSLT作為資料交換與運用<br>● 使用XMLHttpRequest作為非同步的資料回饋<br>● 使用JavaScript結合以上所有結果</p><p>採用AJAX，用戶端瀏覽或使用網頁時，如同在個人電腦中的應用程式一樣，不會感覺到網頁與後端伺服器交談過程，以及資料刷新的細節，頁面也不需要換頁，資料的交換等動態動作隱藏在背景執行。簡單地說，AJAX網頁有兩種主要特性：向伺服器發出請求，以及回傳結果時，瀏覽器不需要重新載入所有頁面；藉由XML解析傳遞與交換的資料。例如註冊帳戶時提示帳號已被使用，或者是在搜尋欄跳出相關字詞、購物欄顯示庫存量，這些都是透過 ajax 的方式，不需要重新載入頁面就能完成。</p><h4 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h4><p>首先要產生 XMLHttpRequest()，才能物件跨瀏覽器撈資料，執行 request 之後，就會出現相對的資料。<br><img src="https://i.imgur.com/0cHCAgB.png" alt></p><p>readystate 代表目前狀態</p><pre><code>0-你已經產生一個XMLHttpRequest，但是還沒有連結你要撈的資料1-用了open()，但還沒有把資料傳送過去。2-偵側到用了send。3 - (processing request)資訊處理中。4 - (request finished and response is ready)撈到資料，數據完全接收到了。</code></pre><p>以 xhr.open(,,true)來初始設定，需要代入3個參數。第一個參數是發出request 的方式，格式有 get (讀取)、post (發送資料到伺服器)；第二個參數是要讀取的網址；第三個參數是同步與非同步</p><pre><code>var xhr = new XMLHttpRequest();// 格式,要讀取的網址,同步與非同步// 格式: get(讀取), post(傳送資料到伺服器)xhr.open(&quot;get&quot;, &quot;這裡放網址&quot;, true);// 空值，單純get，沒有要傳資料，括號中用nullxhr.send(null);</code></pre><p>如果資料傳輸完畢且成功，在 XMLHttpRequest 中的 readyState 會等於 4，responseText 則是內容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;AJAX&lt;/h3&gt;&lt;p&gt;AJAX並非是一個技術（Technology），而是一種網站設計的架構（Architecture），雖然主要以JavaScr
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>map() 和 forEach() 的差別在哪？</title>
    <link href="http://yoursite.com/2019/06/02/2019-06-02-1/"/>
    <id>http://yoursite.com/2019/06/02/2019-06-02-1/</id>
    <published>2019-06-01T16:00:00.000Z</published>
    <updated>2019-06-28T06:28:51.306Z</updated>
    
    <content type="html"><![CDATA[<p>兩種方法都會遍歷陣列的元素。map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。但是forEach不會建立新陣列，只會將原先陣列內的每個元素，皆傳入並執行給定的函式一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var array1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class="line"></span><br><span class="line">array1.forEach(function(element) &#123;</span><br><span class="line">  console.log(element);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// expected output: &quot;a&quot;</span><br><span class="line">// expected output: &quot;b&quot;</span><br><span class="line">// expected output: &quot;c&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var array1 = [1, 4, 9, 16];</span><br><span class="line"></span><br><span class="line">// pass a function to map</span><br><span class="line">const map1 = array1.map(x =&gt; x * 2);</span><br><span class="line"></span><br><span class="line">console.log(map1);</span><br><span class="line">// expected output: Array [2, 8, 18, 32]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;兩種方法都會遍歷陣列的元素。map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。但是forEach不會建立新陣列，只會將原先陣列內的每個元素，皆傳入並執行給定的函式一次。&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>console.log 得出什麼值？ Hoisting 觀念</title>
    <link href="http://yoursite.com/2019/05/31/2019-05-31-1/"/>
    <id>http://yoursite.com/2019/05/31/2019-05-31-1/</id>
    <published>2019-05-30T16:00:00.000Z</published>
    <updated>2019-06-28T06:28:26.529Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var foo = 1</span><br><span class="line">var foobar = function() &#123;</span><br><span class="line">  console.log(foo)</span><br><span class="line">  var foo = 2</span><br><span class="line">&#125;</span><br><span class="line">foobar()</span><br></pre></td></tr></table></figure><p>由於提昇的作用，儘管區域變數 foo 的宣告會先於呼叫console.log方法，也就是 區域變數的值將會作為參數傳入成為 console.log得出的值，而不是在函數外部聲明的全域變數。</p><p>但是，由於變數宣告不會提升該值，因此輸出將是undefined，而不是2。</p><p>在創造階段，函數跟其函數內容(定義)會先存至記憶體，雖然變數也在記憶體中建立空間，可是它的內容並沒有在創造階段時被放入。所以呼叫變數foo才會印出undefined。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>用 Vue 做一個 Todolist</title>
    <link href="http://yoursite.com/2019/05/27/2019-05-27/"/>
    <id>http://yoursite.com/2019/05/27/2019-05-27/</id>
    <published>2019-05-26T16:00:00.000Z</published>
    <updated>2019-06-28T06:28:05.087Z</updated>
    
    <content type="html"><![CDATA[<p>首先我們要設定一個 Todo List 的基礎結構，包括新增項目的輸入框、點擊把資料加入vue原始碼的按鈕、以陣列儲存資料內容的區段，因此我們以v-for動態產生資料於畫面上。todos 用來儲存所有待辦事項內容</p><p><strong>STEP 1 建立待辦事項的列表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line">&lt;li class=&quot;todoItem&quot; v-for=&quot;item in todos&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;label class=&quot;form-check-label&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; &gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;li class=&quot;list-group-item&quot; v-model=&quot;item.completed&quot;    ：for=&quot;item.id&quot; &gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>*:id是v-bind的縮寫，用來綁定Vue資料與HTML屬性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">//儲存新增的待辦事項</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">//一個陣列，儲存目前待辦事項的內容</span><br><span class="line">todos:[&#123;</span><br><span class="line">//對應checkbox與待辦事項</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line">//新增一個待辦事項的方法</span><br><span class="line">addTodo:function()&#123;</span><br><span class="line">  var value = this.newTodo;</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>STEP2 刪除陣列上的特定資料</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> //刪除時必須傳入是哪一筆資料的參數,key是陣列索引位置</span><br><span class="line">&lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key)in todos&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line">&lt;label class=&quot;form-check-label&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"></span><br><span class="line">//傳入陣列索引位置</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; ＠click=&quot;removeTodo(key)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line">//去除多餘的空白</span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line">//如果沒有輸入值就無法新增</span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line">//刪除的方法包括了一個陣列索引的參數</span><br><span class="line">removeTodo:function(key)&#123;</span><br><span class="line">this.todos.splice(key,1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>STEP3 製作頁籤分類功能</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//過濾是否完成</span><br><span class="line">&lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key)in filteredTodos&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line"></span><br><span class="line">//動態切換class</span><br><span class="line">&lt;label class=&quot;form-check-label&quot; :class=&quot;&#123;&apos;completed&apos;:item.completed&#125;&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; ＠click=&quot;removeTodo(key)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">//動態切換頁籤狀態</span><br><span class="line">&lt;div class=&quot;control&quot;&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;btn&quot; :class=&quot;&#123;&apos;active&apos;:visibility == &apos;all&apos;&#125;&quot; @click=&quot;visibility=&apos;all&apos;&quot;&gt;全部&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;btn&quot; :class=&quot;&#123;&apos;active&apos;:visibility == &apos;active&apos;&#125;&quot; @click=&quot;visibility=&apos;active&apos;&quot;&gt;進行中&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;btn&quot; :class=&quot;&#123;&apos;active&apos;:visibility == &apos;completed&apos;&#125;&quot;</span><br><span class="line">  @click=&quot;visibility=&apos;completed&apos;&quot;&gt;已完成&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;btn&quot; href=&quot;#&quot;&gt;清除所有任務&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;],</span><br><span class="line">//新增變數</span><br><span class="line">visibility:&apos;all&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line"></span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line"></span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">removeTodo:function(key)&#123;</span><br><span class="line">this.todos.splice(key,1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//過濾</span><br><span class="line">computed: &#123;</span><br><span class="line">filteredTodos: function () &#123;</span><br><span class="line">if (this.visibility == &apos;all&apos;) &#123;</span><br><span class="line">return this.todos;</span><br><span class="line">&#125; else if (this.visibility == &apos;active&apos;) &#123;</span><br><span class="line">var newTodos = [];</span><br><span class="line">this.todos.forEach(function (item) &#123;</span><br><span class="line">if (!item.completed) &#123;</span><br><span class="line">newTodos.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">return newTodos;</span><br><span class="line">&#125; else if (this.visibility == &apos;completed&apos;) &#123;</span><br><span class="line">var newTodos = [];</span><br><span class="line"> this.todos.forEach(function (item) &#123;</span><br><span class="line">if (item.completed) &#123;</span><br><span class="line">newTodos.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">return newTodos;</span><br><span class="line">&#125;</span><br><span class="line"> return [];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>STEP4 雙擊修改資料內容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//雙擊修改</span><br><span class="line"> &lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key) in filteredTodos&quot; @dblclick=&quot;editTodo(item)&quot;&gt;</span><br><span class="line">//判斷是否顯示編輯框</span><br><span class="line">&lt;div class=&quot;d-flex&quot; v-if=&quot;item.id !==cacheTodo.id&quot;&gt;</span><br><span class="line"> &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line">  &lt;label class=&quot;form-check-label&quot; :class=&quot;&#123;&apos;completed&apos;:item.completed&#125;&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; @click=&quot;removeTodo(key)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">//cache所存id與item id如果相同就隱藏內容顯示輸入框</span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-if=&quot;item.id ===cacheTodo.id&quot; v-model=&quot;cacheTitle&quot;</span><br><span class="line">@keyup.esc=&quot;cancelEdit()&quot; @keyup.enter=&quot;doneEdit(item)&quot;&gt;</span><br><span class="line"> &lt;/li&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;],</span><br><span class="line">//暫存編輯事項</span><br><span class="line">cacheTodo: &#123;&#125;,</span><br><span class="line">cacheTitle: &apos;&apos;,</span><br><span class="line"></span><br><span class="line">visibility:&apos;all&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line"></span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line"></span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">removeTodo:function(key)&#123;</span><br><span class="line">this.todos.splice(key,1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">//編輯待辦事項的方法</span><br><span class="line">editTodo: function (item) &#123;</span><br><span class="line">this.cacheTodo = item;</span><br><span class="line">this.cacheTitle = item.title;</span><br><span class="line">console.log(item)</span><br><span class="line"> &#125;,</span><br><span class="line"> //取消編輯</span><br><span class="line"> cancelEdit: function () &#123;</span><br><span class="line"> this.cacheTodo = &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //儲存完成的編輯</span><br><span class="line">   doneEdit: function (item) &#123;</span><br><span class="line">                    item.title = this.cacheTitle;</span><br><span class="line">                    this.cacheTitle = &apos;&apos;;</span><br><span class="line">                    this.cacheTodo = &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>STEP5 修改刪除項目的索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//雙擊修改</span><br><span class="line"> &lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key) in filteredTodos&quot; @dblclick=&quot;editTodo(item)&quot;&gt;</span><br><span class="line">//判斷是否顯示編輯框</span><br><span class="line">&lt;div class=&quot;d-flex&quot; v-if=&quot;item.id !==cacheTodo.id&quot;&gt;</span><br><span class="line"> &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line">  &lt;label class=&quot;form-check-label&quot; :class=&quot;&#123;&apos;completed&apos;:item.completed&#125;&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; </span><br><span class="line"> //參數是item，就是目前點選的物件</span><br><span class="line"> @click=&quot;removeTodo(item)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-if=&quot;item.id ===cacheTodo.id&quot; v-model=&quot;cacheTitle&quot;</span><br><span class="line">@keyup.esc=&quot;cancelEdit()&quot; @keyup.enter=&quot;doneEdit(item)&quot;&gt;</span><br><span class="line"> &lt;/li&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;],</span><br><span class="line">//暫存編輯事項</span><br><span class="line">cacheTodo: &#123;&#125;,</span><br><span class="line">cacheTitle: &apos;&apos;,</span><br><span class="line"></span><br><span class="line">visibility:&apos;all&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line"></span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line"></span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//讓所有待辦事項的索引值保持一致，函數參數要改成todo本身</span><br><span class="line"> removeTodo: function (todo) &#123;</span><br><span class="line"> var newIndex = &quot;&quot;;</span><br><span class="line"> var vm = this;</span><br><span class="line">vm.todos.forEach(function (item, key) &#123;</span><br><span class="line">if (todo.id === item.id) &#123;</span><br><span class="line">newIndex = key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">this.todos.splice(newIndex, 1)</span><br><span class="line">&#125;,,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>STEP6 刪除全部及還有幾筆任務未完成</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;control&quot;&gt;</span><br><span class="line">&lt;a class=&quot;btn&quot; href=&quot;#&quot; @click=&quot;clearAll&quot;&gt;清除所有任務&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">&lt;span&gt;還有 &#123;&#123;undoneRecords &#125;&#125; 筆任務未完成&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line"> clearAll: function () &#123; this.todos = [];</span><br><span class="line">&#125;&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> computed: &#123;</span><br><span class="line"> undoneRecords:function()&#123;</span><br><span class="line">var undoneRecords=[];</span><br><span class="line"> this.todos.forEach(function(item)&#123;</span><br><span class="line"> if(!item.completed)&#123;</span><br><span class="line"> undoneRecords.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> return.undoneRecords.length;</span><br><span class="line"> &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先我們要設定一個 Todo List 的基礎結構，包括新增項目的輸入框、點擊把資料加入vue原始碼的按鈕、以陣列儲存資料內容的區段，因此我們以v-for動態產生資料於畫面上。todos 用來儲存所有待辦事項內容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 1 建立待辦事項的列
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 地下城 - Clock</title>
    <link href="http://yoursite.com/2019/04/27/2019-04-27/"/>
    <id>http://yoursite.com/2019/04/27/2019-04-27/</id>
    <published>2019-04-26T16:00:00.000Z</published>
    <updated>2019-06-28T06:27:27.865Z</updated>
    
    <content type="html"><![CDATA[<p>完整程式碼</p><p><a href="https://" target="_blank" rel="noopener">https://github.com/ChiangYuChi/clock</a></p><p>完成範例<br><a href="https://" target="_blank" rel="noopener">https://chiangyuchi.github.io/clock/</a></p><p>一開始不太知道要怎麼動手，所以就先做出背景。HTML的結構如下：</p><p><img src="https://i.imgur.com/lsLYV0E.png" alt></p><p>首先我們先把時鐘的底放好</p><p><img src="https://i.imgur.com/O0yu7Y5.png" alt></p><p>接著要開始做鐘面，這裡分為兩個部分進行，這兩層的作法是類似的：</p><ol><li>12小時及橘色的區間</li><li>60分鐘及白色小點</li></ol><p>先設定數字及中間橘色的分隔線先以中上的24-12為基準點<br><img src="https://i.imgur.com/AgRm0ol.png" alt><br>並且用for迴圈得出畫面所有的標示並寫入畫面上，但會發現全部的圖示都是疊在一起的。<br><img src="https://i.imgur.com/MJUvwcw.png" alt></p><p>疊在一起永遠不分離（誤 XD）</p><p><img src="https://i.imgur.com/6gVCKQn.png" alt></p><p>這裡的作法是用 nth-child(n) 選取器改變重疊圖示的傾斜角度，也是分成2個部分，第一個是小時區間＋分鐘區間，總共有2層，但這2層都分成12等分，一個圓 360度，每一個小時要增加30度。</p><p><img src="https://i.imgur.com/b8Wllka.png" alt></p><p>接下來是鐘面的最後一個步驟，也就是做出設計稿上每小時中間的白色點點。因為每一個小時是30度，因此每一個點都要多加5度。</p><p><img src="https://i.imgur.com/lU2Z5iK.png" alt></p><p>現在鐘面已經完成了</p><p><img src="https://i.imgur.com/MK7cIJp.png" alt></p><p>最後的步驟就是把指針放上，並取得時間。我們先把指針以頂端的24-12為基準點對準中心，　<code>transform-origin: center bottom</code></p><p>它的轉動的方式，依照 css 的 transform 來修改。方式是每秒獲取一次時間，並依據取得時間的結果，去修改時針，分針，秒針的轉動角度</p><p><img src="https://i.imgur.com/CQtoI4r.png" alt></p><p>接下來要讓指針取得時間，這裡的取得時間的作法是參考JS 30 Days 的寫法，以new Date()取得時針、分針、秒針的時間，並且最後setInterval()方式讓指針持續轉動。</p><p><img src="https://i.imgur.com/MLs7GtL.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;完整程式碼&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ChiangYuChi/clock&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完成範例&lt;br&gt;&lt;a href=&quot;https://&quot;
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/01/hello-world/"/>
    <id>http://yoursite.com/2018/04/01/hello-world/</id>
    <published>2018-03-31T16:00:00.000Z</published>
    <updated>2019-06-27T14:07:06.048Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>!  [連結]（<a href="https://www.google.com)！" target="_blank" rel="noopener">https://www.google.com)！</a> This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;!  [連結]（&lt;a href=&quot;https://www.google.com)！&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端文" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%96%87/"/>
    
  </entry>
  
</feed>
