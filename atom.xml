<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CYC&#39;S BLOG</title>
  
  <subtitle>CYC&#39;S NOTEBOOK</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-23T04:27:30.046Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 [Day36] - 立即呼叫的函數表示式 (IIFEs)</title>
    <link href="http://yoursite.com/2019/08/09/2019-08-23-2/"/>
    <id>http://yoursite.com/2019/08/09/2019-08-23-2/</id>
    <published>2019-08-08T16:00:00.000Z</published>
    <updated>2019-08-23T04:27:30.046Z</updated>
    
    <content type="html"><![CDATA[<p>立即呼叫的函數表示式（immediately invoked function expression, IIFEs) 是一個常用的簡潔觀念。</p><p>先前我們已經知道函數陳述句和函數表達式的差異</p><h1 id="函數陳述句"><a href="#函數陳述句" class="headerlink" title="函數陳述句"></a>函數陳述句</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function greet(name)&#123;</span><br><span class="line">console.log(&apos;Hello&apos; + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br></pre></td></tr></table></figure><p>JavaScript 即便把函數放到記憶體中還是不會執行任何東西，除非呼叫它</p><h1 id="函數表達式"><a href="#函數表達式" class="headerlink" title="函數表達式"></a>函數表達式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var greetFunc = function (name)&#123;</span><br><span class="line">console.log(&apos;Hello&apos; + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript 一開始不會把函數表示式部分被放進記憶體裡面，而是在執行該行程式碼的時候，<strong>立即地創造這個函數物件</strong>，然後可以使用指向該函式記憶體位置的變數呼叫它。</p><h1 id="立即呼叫的函數表達式-IIFE"><a href="#立即呼叫的函數表達式-IIFE" class="headerlink" title="立即呼叫的函數表達式 IIFE"></a>立即呼叫的函數表達式 IIFE</h1><p>既然我們是使用 <code>()</code> 呼叫函數，現在我們已經創造函數了，如果我們在<br>函數物件的尾巴加上一個括號 <code>()</code>，結果會如何呢？像這樣：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var greeting = function(name)&#123;</span><br><span class="line">console.log(&apos;Hello&apos; + name);</span><br><span class="line">&#125;(); // Hello undefined</span><br></pre></td></tr></table></figure><p>仿照之前帶入參數的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var greeting = function(name) &#123;</span><br><span class="line">  console.log(&apos;Hello &apos; + name);</span><br><span class="line">&#125;(&apos;John&apos;);　// Hello John</span><br></pre></td></tr></table></figure><p>立即呼叫函數表達式(IIFE)的原理並不複雜，就是在創造函數的時候，立刻呼叫它。</p><h2 id="修改程式碼的其他觀察"><a href="#修改程式碼的其他觀察" class="headerlink" title="修改程式碼的其他觀察"></a>修改程式碼的其他觀察</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var greeting = function(name)&#123;</span><br><span class="line">return &apos;Hello&apos; + name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(greeting);//函數的程式碼內容</span><br></pre></td></tr></table></figure><p>會回傳 greeting 函數的內容<br><img src="https://i.imgur.com/c2qO1hy.png" alt><br>然後呼叫它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(greeting(&apos;John&apos;));</span><br></pre></td></tr></table></figure><p>得出預期的值</p><p><img src="https://i.imgur.com/KMYfTLA.png" alt></p><p>可是如果加入立即呼叫呢？會怎樣？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var greeting = function(name)&#123;</span><br><span class="line">return &apos;Hello&apos; + name;</span><br><span class="line">&#125;(&apos;John&apos;);</span><br><span class="line"></span><br><span class="line">console.log(greeting);</span><br></pre></td></tr></table></figure><p>函數表達式創造函數物件，接著立即呼叫，值會回傳給 <code>greeting</code>，所以輸出 Hello John。</p><p>要注意的是 <code>greeting</code> 現在是一個字串不是函數了，所以如果試著呼叫它會報錯。這是因為函數物件創造後立刻執行回傳字串給<code>greeting</code></p><p><img src="https://i.imgur.com/IZlVmi3.png" alt></p><p>那為什麼剛剛的例子可以多次呼叫，可是不會變成字串呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var greetFunc = function(name) &#123;</span><br><span class="line">  return &apos;Hello &apos; + name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(greetFunc(&apos;John&apos;));</span><br><span class="line">console.log(greetFunc(&apos;John&apos;));</span><br></pre></td></tr></table></figure><p>在這個例子因為，先前提到，一開始 JavaScript 並不會將函式的部分放入記憶體，而是在執行到該行程式碼時，立即地創造這個函式物件。</p><p>所以當執行到這一行時，</p><p>var greetFunc = function(name) {</p><p>因為只是創造匿名函式物件並沒有執行，所以此時的 greetFunc 變數的值指向匿名函式的記憶體位址。</p><h1 id="JavaScript-的表達式"><a href="#JavaScript-的表達式" class="headerlink" title="JavaScript 的表達式"></a>JavaScript 的表達式</h1><p>在 JavaScript 當中，以下都是有效的表達式，但沒有任何作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3;</span><br><span class="line">&apos;I am a string&apos;;</span><br><span class="line">&#123;</span><br><span class="line">name:&apos;John&apos;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>數字、字串、物件都能像這樣直接使用表達式，那函式呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function(name) &#123;</span><br><span class="line">     return &apos;Hello &apos; + name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/IOSH4Pv.png" alt></p><p>這是因為語法解析器看到 function 這個字，它預期應該是要使用函數陳述句，但卻缺少它所需要的名稱，函數陳述句不可以是匿名的，所以這個語法有問題。</p><p>但事實上我們所要的就只是不用其他變數，<strong>單獨讓函數表達式在這裡</strong>，那就確保語法解析器不要在程式碼的第一個字就碰到 function ？ 像這樣做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function (name) &#123;</span><br><span class="line">    return &apos;Hello &apos; + name;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>現在就不會報錯了，現在語法解析器知道這個包在括號內的函式不是陳述句了，而是表示式。因為括號在 JavaScript 是一個運算子，括號通常都是用在一些表示式上，像是 <code>(3+4)*2</code> 或是把一些東西群組起來。像是 if 這樣的陳述句就不會用到括號。JavaScript 引擎知道在括號裡的東西是表示式，他假設你寫的函數是函數表示式，你正在創造函數物件。</p><h2 id="進一步觀察"><a href="#進一步觀察" class="headerlink" title="進一步觀察"></a>進一步觀察</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(function(name) &#123;</span><br><span class="line">var greeting = &quot;Hello&quot;;</span><br><span class="line">  console.log(&apos;Hello &apos; + name);</span><br><span class="line">&#125;)(&apos;Tony&apos;); //Hello Tony</span><br><span class="line"></span><br><span class="line">現在我們加入一點前面提到的觀念，直接呼叫它，這也是一個 IIFE。</span><br><span class="line">另外這也是 IIFE 最常見的一種樣子。</span><br><span class="line"></span><br><span class="line">(function(name) &#123;</span><br><span class="line">  console.log(&apos;Hello &apos; + name);</span><br><span class="line">&#125;(&apos;Tony&apos;)); //Hello Tony</span><br></pre></td></tr></table></figure><h1 id="IFFE-的用處"><a href="#IFFE-的用處" class="headerlink" title="IFFE 的用處"></a>IFFE 的用處</h1><p>我們知道 JavaScript 有全域執行環境、函式執行環境，直到 ES6 才出現塊級作用域(例如 let )，在 ES6 出來前，為了避免設定太多的全域變數，開發者往往會將變數設定在函式中，使其成為區域變數，尤其是設定在 IIFE 中，確保不會汙染到全域環境的變數。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var firstName = &apos;Emma&apos;;</span><br><span class="line">(function(name) &#123;</span><br><span class="line">  var firstName = &apos;Doe&apos;;</span><br><span class="line">  console.log(&apos;Hello &apos; + name + &apos; &apos; + firstName);</span><br><span class="line">&#125;)(&apos;John&apos;); // Hello John Doe</span><br><span class="line"></span><br><span class="line">console.log(firstName); // Emma</span><br></pre></td></tr></table></figure><p>即使使用同樣的變數 firstName ，但 Doe 只存在於 IIFE 內，不會影響到外部環境的變數值 Emma</p><p>那如果反過來呢? IIFE 內想取用同樣名稱的變數值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var firstName = &apos;Emma&apos;;</span><br><span class="line">(function(global) &#123;</span><br><span class="line">  var firstName = &apos;Doe&apos;;</span><br><span class="line">  console.log(&apos;Hello &apos; + firstName); // Hello Doe</span><br><span class="line">  console.log(&apos;Hello &apos; + global.firstName); // Hello Emma</span><br><span class="line">&#125;)(window);</span><br></pre></td></tr></table></figure><p>也只需要把全域物件 window 傳入即可。</p><h1 id="經典實例"><a href="#經典實例" class="headerlink" title="經典實例"></a>經典實例</h1><p>這是一個蠻常看到的經典例子，主要是一些觀念的綜合題。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 0; i &lt; 10 ; i++)&#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">  setTimeout(function () &#123;</span><br><span class="line">    console.log(&apos;執行第&apos; + i + &apos;次&apos;);</span><br><span class="line">  &#125;,10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/KS5ljWE.png" alt></p><p>該如何修改才能正確地使執行第 i 次正確的輸出所有的 i 呢?</p><p>觀念是這樣的，因為寫在 for 迴圈內的 i 變數是使用 var 宣告的，而又沒有使用函式包覆，因此這個 i 是屬於全域執行環境下的全域變數。</p><p><img src="https://i.imgur.com/vAH9FM1.png" alt></p><p>然而寫在 setTimeout 內的匿名函式，因為沒有 i 變數，所以會轉而向外部環境尋找。</p><p><strong>setTimeout</strong><br>setTimeout 的作用就是把函式設定執行時間後，丟到事件佇列擱著。<br>for 迴圈是這樣處理 setTimeout 的：按照設定的方式，一次跑完，至於 setTimeout 的內容是什麼不管，以本例來說就是幾乎同時設定了 10 次 setTimeout。<br>所以才會在輸出幾乎同時看到「執行第 10 次」</p><h2 id="解法一：使用-let"><a href="#解法一：使用-let" class="headerlink" title="解法一：使用 let"></a>解法一：使用 let</h2><p>可以使用 ES6 新增的 let 輕鬆處理掉這個問題。因為 let 屬於區塊範圍 (Block Scope) ，變數僅存活於 {} 中，所以每次執行迴圈時取得的 i 在記憶體位址上都不同的，因此在 setTimeout 內的匿名函式參考到的 i 也都是不同的記憶體位址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(let i = 0; i &lt; 10 ; i++)&#123;</span><br><span class="line">  setTimeout(function () &#123;</span><br><span class="line">    console.log(&apos;執行第&apos; + i + &apos;次&apos;);</span><br><span class="line">  &#125;,10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/GdpG9ed.png" alt></p><h2 id="解法二：使用-IIFE"><a href="#解法二：使用-IIFE" class="headerlink" title="解法二：使用 IIFE"></a>解法二：使用 IIFE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 0; i &lt; 10 ; i++)&#123;</span><br><span class="line">  (function(i) &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">      console.log(&apos;執行第&apos; + i + &apos;次&apos;);</span><br><span class="line">    &#125;,10);</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line">console.log(window.i); // 10</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/S9wVybU.png" alt></p><p>透過 IIFE 建立個別的執行環境，讓傳入的 i 值每個都可以被保存，讓 setTimeout 內的匿名函式向外尋找變數 i 時會先找到 IIFE 內的，因此就不會被外部環境的 i 影響了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;立即呼叫的函數表示式（immediately invoked function expression, IIFEs) 是一個常用的簡潔觀念。&lt;/p&gt;
&lt;p&gt;先前我們已經知道函數陳述句和函數表達式的差異&lt;/p&gt;
&lt;h1 id=&quot;函數陳述句&quot;&gt;&lt;a href=&quot;#函數陳述句&quot; 
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="克服Javascript奇怪部份" scheme="http://yoursite.com/tags/%E5%85%8B%E6%9C%8DJavascript%E5%A5%87%E6%80%AA%E9%83%A8%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>認識 Webpack</title>
    <link href="http://yoursite.com/2019/08/06/2019-08-23-3/"/>
    <id>http://yoursite.com/2019/08/06/2019-08-23-3/</id>
    <published>2019-08-05T16:00:00.000Z</published>
    <updated>2019-08-23T04:36:48.612Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack 是一個開源的前端打包工具。Webpack 提供了前端開發缺乏的模組化開發方式，將各種靜態資源視為模組，並從它生成最佳化過的程式碼。</p><h1 id="安裝並開一個新的-webpack"><a href="#安裝並開一個新的-webpack" class="headerlink" title="安裝並開一個新的 webpack"></a>安裝並開一個新的 webpack</h1><p><img src="https://i.imgur.com/mSgaiRx.png" alt></p><h1 id="安裝套件在-webpack-裡"><a href="#安裝套件在-webpack-裡" class="headerlink" title="安裝套件在 webpack 裡"></a>安裝套件在 webpack 裡</h1><ol><li>透過 sass 載入 bootstrap 4</li><li>vue-axios ，一個 ajax 工具</li></ol><p>因為 sass 在 vue cli 沒有安裝完整的 loader 所以這裡要再安裝 node-sass 、sass-loader</p><ul><li>安裝</li></ul><p>建議將 node-sass 與 sass-loader 添加到開發環境中，因為這兩個套件只有在開發時需要使用到，</p><p>可使用以下指令：</p><p>sudo npm install node-sass sass-loader –save-dev</p><p>加上 -dev 能夠將套件限制在開發環境下才能使用，</p><p>boostrap 因為打包後也要使用因此可以不用加上 -dev ，</p><p>可使用以下指令安裝：</p><p>sudo npm install bootstrap –save</p><ul><li>載入 bootstrap</li></ul><p>這一段的路徑是連接到 node_modules 裡的 bootstrap</p><p><img src="https://i.imgur.com/p4z47lM.png" alt></p><p>Vue 的 style 還有一個特色，可以用 scope 限制樣式運用範圍<br>例如下面的紅色就限制在元件的 h1 裡面</p><p><img src="https://i.imgur.com/wQgnTBA.png" alt></p><h1 id="使用-vue-axios"><a href="#使用-vue-axios" class="headerlink" title="使用 vue-axios"></a>使用 vue-axios</h1><p>一個 ajax 套件，安裝方式<br>sudo npm install –save axios vue-axios</p><p>載入並且啟動它<br><img src="https://i.imgur.com/oozyr8I.png" alt></p><p>使用 randomuser 的 API 取用隨機個人資料，利用 Ajax 取得 data</p><p><img src="https://i.imgur.com/2VMlhgc.png" alt></p><h1 id="webpack-腳本介紹及自定義環境變數"><a href="#webpack-腳本介紹及自定義環境變數" class="headerlink" title="webpack 腳本介紹及自定義環境變數"></a>webpack 腳本介紹及自定義環境變數</h1><p>webpack 會有一個 main.js 的主要檔案，它會載入其他相依的內容。webpack 會監控 main.js 及它載入的相關檔案，一更動的時候就會進行編譯。這些編譯的內容就會輸出成 .jpg、.js 等檔案</p><p><img src="https://i.imgur.com/3WZXwqP.png" alt></p><p>webpack.base 是最主要的腳本檔案，另外兩個會 required 它，透過 webpack merge 合併這兩個腳本。<br><img src="https://i.imgur.com/JWKwhve.jpg" alt></p><p>dev 腳本的 serve 提供開發中預覽畫面用，包含 hot reload 及一些 host 與 port 供給預覽使用</p><p><img src="https://i.imgur.com/fPxCNQd.png" alt></p><p>在 production 版本就沒有 dev serve 功能，比較重視輸出結果，下方有一個套件將檔案內容輸出，它使用的是 index.html 這個 templete<br>。inject 是要不要把編譯完的內容注入進去。下方還包含壓縮：是否移除多餘空白字元、移除多餘的 html 屬性以及引號<br><img src="https://i.imgur.com/UhhlPtb.png" alt></p><p>核心腳本是 webpack.base</p><p>監控 main.js 的檔案叫做 entry。它指向的是 src/main.js</p><p><img src="https://i.imgur.com/r0sxF3J.png" alt></p><p>這個檔案是整個 Vue Cli 的進入點它會 import 許多檔案並在此編譯。<br><img src="https://i.imgur.com/3RKpzt6.png" alt></p><p>並在 output 輸出，底下有對應一些路徑，像是 path:config<br><img src="https://i.imgur.com/uyOt5tQ.png" alt></p><p>resolove 是省略附檔名用，像 extension 是 main.js import 的檔案可以省略的附檔名,alias 是路徑的縮寫，像是＠就是 src</p><p><img src="https://i.imgur.com/8WE6dKf.png" alt></p><p>但 main.js 是一個 js 檔，它沒辦法閱讀.png 等等的檔案，webpack 有一個叫 loader 的工具，會依據不同的類別不同的設定檔，決定該怎樣呈現在 js 裡面，最後再執行輸出（output） 。這些 loader 都在 module 裡，有一些規則例如處理圖片的 loader ，如果圖片在 10 kb 以下就會轉成 base64，否則它會轉成圖檔並加上一些 hash 字串<br><img src="https://i.imgur.com/auiQ1eT.png" alt></p><p>一些沒有寫在 webpack.base 的重要 loader 像是 css loader、sass loader 都在 utils.js 裡面</p><p><img src="https://i.imgur.com/yLVbVMn.png" alt></p><p>剛剛上面提到的 webpack.base 裡面的 config 怎樣調整呢？config 裡的 index.js 是針對整個編譯環境使用，像是可以設定 host 、port。而 dev.js、prod.js 則是寫 Vue 的時候可以用到的環境變數。這些變數是可以輸出到 Vue 檔裡面的。</p><p>例如這兩處可以使用不同的變數，經常使用到 Ajax 裡面，Ajax 在開發及正式版的時候會使用不同路徑，這時就可以把兩個路徑明顯切分</p><p><img src="https://i.imgur.com/CKjsXi7.png" alt></p><p>現在切換到 helloworld.vue 裡面，這裡指向的是呈現在畫面上的訊息，config 底下的 env 指的是環境變數。用 npm run build 指令的話會執行的是 prod.env.js 這個檔案。<br><img src="https://i.imgur.com/Jo9Vwri.png" alt></p><p>現再再加入另一個變數，這是 Ajax 使用的路徑，記得要用 2 種引號否則會跳錯。另外加入環境變數之後，要記得重啟 vue 的環境 (npm run dev)，以下已經替換成正確路徑</p><p><img src="https://i.imgur.com/CWfHo2p.png" alt></p><p>別忘了正式版本也要加上我們新增的環境變數<br><img src="https://i.imgur.com/dA1PSCJ.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Webpack 是一個開源的前端打包工具。Webpack 提供了前端開發缺乏的模組化開發方式，將各種靜態資源視為模組，並從它生成最佳化過的程式碼。&lt;/p&gt;
&lt;h1 id=&quot;安裝並開一個新的-webpack&quot;&gt;&lt;a href=&quot;#安裝並開一個新的-webpack&quot; class
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 [Day33] - 觀念小叮嚀 語法解析器</title>
    <link href="http://yoursite.com/2019/08/02/2019-08-23-1/"/>
    <id>http://yoursite.com/2019/08/02/2019-08-23-1/</id>
    <published>2019-08-01T16:00:00.000Z</published>
    <updated>2019-08-23T04:23:50.034Z</updated>
    
    <content type="html"><![CDATA[<p>我們要再一次熟悉語法解析器，因為這對後面認識底層知識十分重要。</p><p>已經知道我們寫的程式碼不會直接被電腦執行，而是有一個在程式碼和電腦中間中介的程式，轉換你的程式為電腦懂的東西。這就是瀏覽器裡的 JavaScript 引擎做的事情，其中之一就是語法解析器。</p><p>語法解析器會閱讀程式碼，判斷這是否有效。如果它一個一個字看程式碼，看到 ‘r’，它假設你可能要輸入的是 ‘return’，所以它會預期再看到一個 ‘e’，它會一個一個字進行。如果它看到一些非預期的東西，它會認為是錯誤。但如果它看到的是預期的有效語法，它會繼續下去，它知道你意圖要做什麼。它會在遇到分號的時候結束<img src="https://i.imgur.com/BaIWUr2.png" alt></p><p>所以語法解析器會做假設、遵守某些規則，甚至可以在執行前改變你的程式碼，這就是發生在 JavaScript 的狀況。</p><p>認識 JavaScript 引擎如何閱讀程式碼很重要：逐字地、採用一些規則、判斷語法有效性、決定你要做什麼.這些就是在程式碼執行前發生的事情。所以它可能採取某些改變。</p><p>儘管語法解析器是幫助我們的工具，但是在使用 JavaScript 的時候，一定要避免一個和語法解析器有關的危險狀況：自動插入分號 (Automatic semocolon insertion)。</p><p>分號在 JavaScript 核心不是必要的，這是因為 JavaScript 引擎自動完成某些事情。它一次看一個字母，一個特定程式句，它會知道程式語言應該呈現什麼樣子，例如輸入一個 <code>return</code> 但沒有輸入 <code>;</code> 就按 enter 鍵，這時按下的 enter 就會是一個 <code>carriage return</code>，這是一個雖然看不見但存在的字元<img src="https://i.imgur.com/i9kjnQD.png" alt><br>語法解析器認識它，所以會拒絕在解析器沒有分號的時候就跳倒下一行，解析器不允許使用這個特別的陳述句，所以解析器會自動插入分號。語法解析器會在預期你有分號的地方，自動幫你補上分號</p><p><img src="https://i.imgur.com/bRLeRF7.png" alt></p><p>雖然這是很棒的事情，但永遠要記得要自己打出分號，因為我們會想要 JavaScript 引擎幫我們下決定，這才能確定程式碼是我們要的樣子。尤其在回傳的時候，自動插入分號會導致很大的問題</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getPerson()&#123;</span><br><span class="line">return</span><br><span class="line">&#123;firstname: &apos;Tony&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getPerson());</span><br></pre></td></tr></table></figure><p>如果語法解析器在 <code>return</code>後面發現 <code>carrige return (按下enter)</code><br>，它會自動插入分號，所以出現 <code>undefined</code>。所以它離開這個函數了<br><img src="https://i.imgur.com/7X4zuKe.png" alt><br>要解決這個問題，就要告訴語法解析器我們正在做什麼，要預防自動插入分號<br>，就用空格加一個大括號，解析器才知道我們開始用物件實體語法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getPerson()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">firstname: &apos;Tony&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log</span><br></pre></td></tr></table></figure><p>雖然不是每次必要把大括號放在跟函數、for 迴圈、if 陳述句同一行。但這樣做可以避免自動插入分號，避免這個難以追蹤的危險。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我們要再一次熟悉語法解析器，因為這對後面認識底層知識十分重要。&lt;/p&gt;
&lt;p&gt;已經知道我們寫的程式碼不會直接被電腦執行，而是有一個在程式碼和電腦中間中介的程式，轉換你的程式為電腦懂的東西。這就是瀏覽器裡的 JavaScript 引擎做的事情，其中之一就是語法解析器。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="克服Javascript奇怪部份" scheme="http://yoursite.com/tags/%E5%85%8B%E6%9C%8DJavascript%E5%A5%87%E6%80%AA%E9%83%A8%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念 [8] - Vue Router</title>
    <link href="http://yoursite.com/2019/07/16/2019-08-23-4/"/>
    <id>http://yoursite.com/2019/07/16/2019-08-23-4/</id>
    <published>2019-07-15T16:00:00.000Z</published>
    <updated>2019-08-23T04:41:49.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Vue-Router-及配置路由文件"><a href="#使用-Vue-Router-及配置路由文件" class="headerlink" title="使用 Vue Router 及配置路由文件"></a>使用 Vue Router 及配置路由文件</h1><p>//進入點<br>main.js<br>//Router 配置檔案 (前端路由，決定哪個網址讀取哪個元件。假如在新建 Vue cli 的時候選擇需要包含 router 配置，就會直接建立在這個目錄下面)<br>router/index.js<br>//分頁內容<br>Vue components (**.vue)</p><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><pre><code>npm install vue-router --save</code></pre><h1 id="概念描述"><a href="#概念描述" class="headerlink" title="概念描述"></a>概念描述</h1><p>Vue-router 是 Vue.js 的官方路由插件，它適合運用在建立單面應用。Vue 的單面應用。Vue 的單面應用基礎是路由和元件，路由用在設定訪問路徑，並將路徑和組件對應起來。</p><p>傳統的頁面應用是利用抄連結來實現頁面的切換和跳轉。在 Vue-router 的單面應用，則是路徑之間的切換，也就是組件的切換。</p><h1 id="基本設置"><a href="#基本設置" class="headerlink" title="基本設置"></a>基本設置</h1><h2 id="Router-設定"><a href="#Router-設定" class="headerlink" title="Router 設定"></a>Router 設定</h2><p><code>src/router/index.js</code><br><img src="https://i.imgur.com/0rCN8ZF.png" alt></p><h2 id="載入配置檔"><a href="#載入配置檔" class="headerlink" title="載入配置檔"></a>載入配置檔</h2><p>把配置檔載入 entry<br><img src="https://i.imgur.com/NQwZYnu.png" alt></p><h2 id="定義路徑"><a href="#定義路徑" class="headerlink" title="定義路徑"></a>定義路徑</h2><p>假設目前的網站規劃有一個登入 login 頁面、登入後的 home 及購物車三個頁面，而登入後的 home 又包含三個子路由頁面 A,B,C 元件：這就像一個樹狀結構是有父子關係存在的，而父路由組件中會包含 <code>router-view</code> 作為子路由元件的渲染出口（如示意圖中藍色及黃色虛線區塊），而這些路由規則（例如：路由符合/login 時會載入 login.vue 組件到父層 App.vue) 的 router-view 中），都會明確定義在 <code>router</code>設定中<br><img src="https://i.imgur.com/d9LVmUR.png" alt><br>實際 Router 設定如下，會與上圖的動線設計有對應階層關係。<br><img src="https://i.imgur.com/JLhM6E8.png" alt></p><h2 id="視圖-router-view"><a href="#視圖-router-view" class="headerlink" title="視圖 router-view"></a>視圖 router-view</h2><p><code>src/App.vue</code><br>視圖的作用就是在符合路由規則的情境下，以元件從指定路由取代父層元件中的視圖。整個應用元件的第一個視圖是在 App.vue 檔案裡面，這表示在 vue-router 設定的第一層路由元件在匹配的狀況下，會直接取代 App.vue 裡的 router-view 元素<br><img src="https://i.imgur.com/Gk2enGQ.png" alt><br><img src="https://i.imgur.com/o9dbp03.png" alt></p><p><a href="http://www.網址/＃/home" target="_blank" rel="noopener">http://www.網址/＃/home</a></p><h1 id="新增路由路徑及連結達成分頁切換"><a href="#新增路由路徑及連結達成分頁切換" class="headerlink" title="新增路由路徑及連結達成分頁切換"></a>新增路由路徑及連結達成分頁切換</h1><p>先載入 Bootstrap<br><img src="https://i.imgur.com/8GgDLBp.png" alt><br>新增一個資料夾管理分頁<br><img src="https://i.imgur.com/5ykWqt9.png" alt><br>新增一個分頁<br><img src="https://i.imgur.com/6zFijCH.png" alt><br>並使用 bootstrap 的 navbar，首先把平常使用的 <code>&lt;a&gt;</code> 標籤替換成 <code>&lt;router-link&gt;</code>，把<code>href</code>替換成 router-view 切換分頁的方法 <code>to</code>。，在這個範例裡面有 2 種切換分頁的方法</p><ul><li>path 搭配 to<br><code>to=&quot;/page&quot;</code></li><li>動態切換<br><code>:to=&quot;{name:&#39;首頁&#39;}&quot;</code></li></ul><p><img src="https://i.imgur.com/PTgIvei.png" alt></p><h1 id="製作巢狀路由頁面"><a href="#製作巢狀路由頁面" class="headerlink" title="製作巢狀路由頁面"></a>製作巢狀路由頁面</h1><p>現在要做一個巢狀路由頁面，讓 <code>child</code> 切換的時候，可以維持 card 的外觀，但是內容更換。首先先定義 children 路徑，他們都是在 page 底下的子路由頁面元件<br><img src="https://i.imgur.com/jYJzi69.png" alt><br>新增三個元件，點擊的時候切換 children 內容到視圖層<br><img src="https://i.imgur.com/X3G9coI.png" alt></p><h1 id="使用動態路由切換頁面-Ajax-的使用情景"><a href="#使用動態路由切換頁面-Ajax-的使用情景" class="headerlink" title="使用動態路由切換頁面 Ajax 的使用情景"></a>使用動態路由切換頁面 Ajax 的使用情景</h1><p>我們經常需要把所有路由，都使用同一個組件來渲染。例如相同的版型，卻要動態載入不同內容。好比說在寫商品詳情頁面的時候，也面結構都一樣，只是商品 id 不同，這時候就可以用動態路由。以下用 children 這一層的路由做動態路由範例</p><ul><li>引入元件並填寫路由參數<br><img src="https://i.imgur.com/P4fsv9t.png" alt></li><li>到元件中獲取路由參數<br><code>$route.params.id</code> 就是獲取當前路由的參數。<br><img src="https://i.imgur.com/kjcbhyG.png" alt><br>現在隨意輸入一個參數就可以看到結果如下：<br><img src="https://i.imgur.com/kHU8vOQ.png" alt></li></ul><p>動態路由的其它模式<br><a href="https://zhuanlan.zhihu.com/p/39275718" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/39275718</a></p><h1 id="命名路由，同一個路徑載入-2-個頁面元件"><a href="#命名路由，同一個路徑載入-2-個頁面元件" class="headerlink" title="命名路由，同一個路徑載入 2 個頁面元件"></a>命名路由，同一個路徑載入 2 個頁面元件</h1><p>原本的路徑只能以 component 屬性載入單一的元件 Page，現在我們利用 components 就可以使用 default 屬性不僅載入原先的 Page，另外還可以再載入其它元件，只是這些元件都必須再新增 router-view 而且要加上各自的 name 屬性。</p><p>在新增的 router-view 標籤上加上 name 屬性，主要是要與對應的組件匹配以顯示組件內容，</p><p>在 components 屬性裡透過定義預設路由對應組件(Page)，所以 name: ‘分頁’，省略時不會影響 router-view 的顯示，</p><p><img src="https://i.imgur.com/EEhy7VI.png" alt></p><h1 id="Vue-Router-參數設定"><a href="#Vue-Router-參數設定" class="headerlink" title="Vue Router 參數設定"></a>Vue Router 參數設定</h1><p>Vue-router 的構造配置裡的 mode ，可以調整路徑配置方法<br>可选值: “hash” | “history” | “abstract”</p><h2 id="配置路由模式"><a href="#配置路由模式" class="headerlink" title="配置路由模式"></a>配置路由模式</h2><p>可選值: “hash” | “history” | “abstract”</p><ul><li>hash: 使用 URL hash 值來作路由。支持所有瀏覽器，包括不支持 HTML5 History Api 的瀏覽器。</li><li>history: 依賴 HTML5 History API 和服務器配置。查看 HTML5 History 模式。</li><li>abstract: 支持所有 JavaScript 運行環境，如 Node.js 服務器端。如果發現沒有瀏覽器的 API，路由會自動強制進入這個模式。</li></ul><p>不使用 hash 模式而使用 history 模式的時候，</p><p><img src="https://i.imgur.com/x7qoMb8.png" alt></p><p>使用的是後端伺服器的路由，所以前後端要搭配對應的模式使用預設的模式即可</p><h2 id="linkActiveClass"><a href="#linkActiveClass" class="headerlink" title="linkActiveClass"></a>linkActiveClass</h2><p>觸發特定路徑的時候，會在標籤上加上的 class 名稱，可自定義名稱<br><img src="https://i.imgur.com/X0XkQcS.png" alt></p><h1 id="自定義切換路由方法"><a href="#自定義切換路由方法" class="headerlink" title="自定義切換路由方法"></a>自定義切換路由方法</h1><p>切換頁面不能全靠 router-link 切換，例如有些行為必須在 Ajax 結束後再切換畫面，此時就不一定適用 router-link。</p><h2 id="動態切換"><a href="#動態切換" class="headerlink" title="動態切換"></a>動態切換</h2><p>$router.push<br><img src="https://i.imgur.com/QyORw22.png" alt><br>$ router.back<br><img src="https://i.imgur.com/ZKbf3s2.png" alt><br>$router.go(n)<br><img src="https://i.imgur.com/qfC30f8.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用-Vue-Router-及配置路由文件&quot;&gt;&lt;a href=&quot;#使用-Vue-Router-及配置路由文件&quot; class=&quot;headerlink&quot; title=&quot;使用 Vue Router 及配置路由文件&quot;&gt;&lt;/a&gt;使用 Vue Router 及配置路由文件&lt;/
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念 [7] - 用 Vue 做一個 Todolist</title>
    <link href="http://yoursite.com/2019/07/15/2019-07-15-1/"/>
    <id>http://yoursite.com/2019/07/15/2019-07-15-1/</id>
    <published>2019-07-14T16:00:00.000Z</published>
    <updated>2019-07-15T09:46:17.259Z</updated>
    
    <content type="html"><![CDATA[<p>完成品 <a href="https://chiangyuchi.github.io/vue-simple-todolist/" target="_blank" rel="noopener">https://chiangyuchi.github.io/vue-simple-todolist/</a><br>原始碼 <a href="(https://chiangyuchi.github.io/vue-simple-todolist/)">https://github.com/ChiangYuChi/vue-simple-todolist</a></p><h3 id="原始-HTML-結構"><a href="#原始-HTML-結構" class="headerlink" title="原始 HTML 結構"></a>原始 HTML 結構</h3><p>有一個 input 欄位，現在要在輸入後把文字加入代辦事項列表，首先設定一個代辦事項列表的基礎結構，包括：</p><ul><li>新增項目的輸入框、</li><li>點擊後把資料加入vue原始碼的按鈕</li><li>以陣列儲存資料內容的區段</li></ul><p>我們以 <code>v-for</code> 動態產生資料於畫面上。todos 陣列用來儲存所有待辦事項內容（*:id是v-bind的縮寫，用來綁定Vue資料與HTML屬性）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;input-group mb-3&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;input-group-prepend&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;input-group-text&quot; id=&quot;basic-addon1&quot;&gt;待辦事項&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;input-group-append&quot;&gt;</span><br><span class="line">              &lt;button class=&quot;btn btn-primary&quot; type=&quot;button&quot;&gt;新增&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;ul class=&quot;list-group list-group-flush text-left&quot;&gt;</span><br><span class="line">              &lt;li class=&quot;list-group-item&quot; &gt;</span><br><span class="line">                &lt;div class=&quot;d-flex&quot;&gt;</span><br><span class="line">                  </span><br><span class="line">                  &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">                    &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; &gt;</span><br><span class="line">                    &lt;label class=&quot;form-check-label&quot; &gt;</span><br><span class="line">                    &lt;/label&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                  &lt;!-- 刪除按鈕 --&gt;</span><br><span class="line">                  &lt;button type=&quot;button&quot; class=&quot;close ml-auto&quot; aria-label=&quot;Close&quot; &gt;</span><br><span class="line">                    &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;</span><br><span class="line">                  &lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="STEP-1-建立待辦事項的列表"><a href="#STEP-1-建立待辦事項的列表" class="headerlink" title="STEP 1 建立待辦事項的列表"></a>STEP 1 建立待辦事項的列表</h3><h4 id="HTML-部份"><a href="#HTML-部份" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><ul><li>以 <code>v-model</code> 實現雙向綁定輸入資料</li><li>以 <code>@click</code> 在 button 新增方法 </li><li>以 <code>@keyup.enter</code> 在 input 欄位新增方法</li><li>以 <code>v-for</code>  將資料內容儲存在陣列裡，名稱定義為 <code>item in todos</code>，是代辦事項內容取出呈現的位置。   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line">&lt;li class=&quot;todoItem&quot; v-for=&quot;item in todos&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;label class=&quot;form-check-label&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; &gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">&lt;li class=&quot;list-group-item&quot; v-model=&quot;item.completed&quot;    ：for=&quot;item.id&quot; &gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="JavaScript-部份"><a href="#JavaScript-部份" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">//儲存新增的待辦事項</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">//一個陣列，儲存目前待辦事項的內容</span><br><span class="line">todos:[&#123;</span><br><span class="line">//對應checkbox與待辦事項</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line">//新增一個待辦事項的方法</span><br><span class="line">addTodo:function()&#123;</span><br><span class="line">  var value = this.newTodo;</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>###STEP2 刪除陣列上的特定資料</p><h4 id="HTML-部份-1"><a href="#HTML-部份-1" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><ul><li>新增 <code>＠click=&quot;removeTodo(key)</code> 方法</li><li>為了讓電腦知道點擊的是哪一個，所以必須傳入相關參數，在 <code>item in todos</code> 加入索引值：<code>item,key)in todos</code></li><li>同時把索引值傳給 <code>＠click=&quot;removeTodo</code>方法:<code>＠click=&quot;removeTodo(key)</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> //刪除時必須傳入是哪一筆資料的參數,key是陣列索引位置</span><br><span class="line">&lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key)in todos&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line">&lt;label class=&quot;form-check-label&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"></span><br><span class="line">//傳入陣列索引位置</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; ＠click=&quot;removeTodo(key)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">&lt;/li</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ul><h4 id="JavaScript-部份-1"><a href="#JavaScript-部份-1" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><ul><li>在 methods 裡新增一個判斷式，如果輸入值是空的就不能新增；並以 <code>trim()</code>刪除多餘空白鍵</li><li>removeTodo 方法包含一個 key </li><li>用 splice() 方法刪除所存在位置（key) 的資料</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line">//去除多餘的空白</span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line">//如果沒有輸入值就無法新增</span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line">//刪除的方法包括了一個陣列索引的參數</span><br><span class="line">removeTodo:function(key)&#123;</span><br><span class="line">this.todos.splice(key,1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>###STEP3 製作頁籤分類功能</p><h4 id="HTML-部份-2"><a href="#HTML-部份-2" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><ul><li>利用動態切換 className 功能製造刪節線效果：<code>:class=&quot;{&#39;completed&#39;:item.completed}&quot;</code></li><li>利用動態切換 className 功能動態切換頁籤，如果className 是 all 的時候，visibility就切換為 all。切換條件是「按下頁籤」<code>:class=&quot;{&#39;active&#39;:visibility == &#39;all&#39;}&quot; @click=&quot;visibility=&#39;all&#39;&quot;</code></li><li>列表裡原始的 <code>todos</code> 現在是過濾後的 <code>filteredTodos</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//過濾是否完成</span><br><span class="line">&lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key)in filteredTodos&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line"></span><br><span class="line">//動態切換class</span><br><span class="line">&lt;label class=&quot;form-check-label&quot; :class=&quot;&#123;&apos;completed&apos;:item.completed&#125;&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; ＠click=&quot;removeTodo(key)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">//動態切換頁籤狀態</span><br><span class="line">&lt;div class=&quot;control&quot;&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;btn&quot; :class=&quot;&#123;&apos;active&apos;:visibility == &apos;all&apos;&#125;&quot; @click=&quot;visibility=&apos;all&apos;&quot;&gt;全部&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;btn&quot; :class=&quot;&#123;&apos;active&apos;:visibility == &apos;active&apos;&#125;&quot; @click=&quot;visibility=&apos;active&apos;&quot;&gt;進行中&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;btn&quot; :class=&quot;&#123;&apos;active&apos;:visibility == &apos;completed&apos;&#125;&quot;</span><br><span class="line">  @click=&quot;visibility=&apos;completed&apos;&quot;&gt;已完成&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;btn&quot; href=&quot;#&quot;&gt;清除所有任務&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="JavaScript-部份-2"><a href="#JavaScript-部份-2" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><ul><li>在 data 結構裡，新增一個變數 visibility，用來決定呈現哪一個頁籤 </li><li>過濾要呈現在不同頁籤的內容，使用 computed 功能，並在裡面宣告一個 <code>filteredTodos</code> 方法，在裡面新增判斷式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;],</span><br><span class="line">//新增變數</span><br><span class="line">visibility:&apos;all&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line"></span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line"></span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">removeTodo:function(key)&#123;</span><br><span class="line">this.todos.splice(key,1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//過濾</span><br><span class="line">computed: &#123;</span><br><span class="line">filteredTodos: function () &#123;</span><br><span class="line">if (this.visibility == &apos;all&apos;) &#123;</span><br><span class="line">return this.todos;</span><br><span class="line">&#125; else if (this.visibility == &apos;active&apos;) &#123;</span><br><span class="line">var newTodos = [];</span><br><span class="line">this.todos.forEach(function (item) &#123;</span><br><span class="line">if (!item.completed) &#123;</span><br><span class="line">newTodos.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">return newTodos;</span><br><span class="line">&#125; else if (this.visibility == &apos;completed&apos;) &#123;</span><br><span class="line">var newTodos = [];</span><br><span class="line"> this.todos.forEach(function (item) &#123;</span><br><span class="line">if (item.completed) &#123;</span><br><span class="line">newTodos.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">return newTodos;</span><br><span class="line">&#125;</span><br><span class="line"> return [];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="CSS-部份"><a href="#CSS-部份" class="headerlink" title="CSS 部份"></a>CSS 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">          .completed &#123;</span><br><span class="line">            text-decoration: line-through</span><br><span class="line">          &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="STEP4-雙擊修改資料內容"><a href="#STEP4-雙擊修改資料內容" class="headerlink" title="STEP4 雙擊修改資料內容"></a>STEP4 雙擊修改資料內容</h3><h4 id="HTML-部份-3"><a href="#HTML-部份-3" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><ul><li><p>雙擊觸發 <code>@dblclick=&quot;editTodo(item)&quot;</code>方法</p></li><li><p>新增 <code>v-if</code> 判斷式：假如原本畫面上的資料的 id 不等於暫存編輯中的 id，就顯示出來</p></li><li><p>編輯中的資料內容：<code>v-model=&quot;cacheTitle&quot;</code></p></li><li><p>取消編輯：<code>@keyup.esc=&quot;cancelEdit()</code></p></li><li><p>儲存編輯內容：<code>@keyup.enter=&quot;doneEdit(item)&quot;</code></p></li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//雙擊修改</span><br><span class="line"> &lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key) in filteredTodos&quot; @dblclick=&quot;editTodo(item)&quot;&gt;</span><br><span class="line">//判斷是否顯示編輯框</span><br><span class="line">&lt;div class=&quot;d-flex&quot; v-if=&quot;item.id !==cacheTodo.id&quot;&gt;</span><br><span class="line"> &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line">  &lt;label class=&quot;form-check-label&quot; :class=&quot;&#123;&apos;completed&apos;:item.completed&#125;&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; @click=&quot;removeTodo(key)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">//cache所存id與item id如果相同就隱藏內容顯示輸入框</span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-if=&quot;item.id ===cacheTodo.id&quot; v-model=&quot;cacheTitle&quot;</span><br><span class="line">@keyup.esc=&quot;cancelEdit()&quot; @keyup.enter=&quot;doneEdit(item)&quot;&gt;</span><br><span class="line"> &lt;/li&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-3"><a href="#JavaScript-部份-3" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><ul><li>新增 <code>cacheTodo:{}</code>，暫存編輯資料，新增 <code>cacheTitle</code>，暫存編輯標題</li><li>取消編輯：cacheTodo 等於一個空物件 <code>this.cacheTodo = {}</code></li><li>完成編輯：把 item 的標題指向剛剛預存的標題 <code>item.title = this.cacheTitle;</code> 然後把預存標題清空，將 cacheTodo 替換回來</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;],</span><br><span class="line">//暫存編輯事項</span><br><span class="line">cacheTodo: &#123;&#125;,</span><br><span class="line">cacheTitle: &apos;&apos;,</span><br><span class="line"></span><br><span class="line">visibility:&apos;all&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line"></span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line"></span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">removeTodo:function(key)&#123;</span><br><span class="line">this.todos.splice(key,1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">//編輯待辦事項的方法</span><br><span class="line">editTodo: function (item) &#123;</span><br><span class="line">this.cacheTodo = item;</span><br><span class="line">this.cacheTitle = item.title;</span><br><span class="line">console.log(item)</span><br><span class="line"> &#125;,</span><br><span class="line"> //取消編輯</span><br><span class="line"> cancelEdit: function () &#123;</span><br><span class="line"> this.cacheTodo = &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //儲存完成的編輯</span><br><span class="line">   doneEdit: function (item) &#123;</span><br><span class="line">                    item.title = this.cacheTitle;</span><br><span class="line">                    this.cacheTitle = &apos;&apos;;</span><br><span class="line">                    this.cacheTodo = &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><h3 id="STEP5-修改刪除項目的索引"><a href="#STEP5-修改刪除項目的索引" class="headerlink" title="STEP5 修改刪除項目的索引"></a>STEP5 修改刪除項目的索引</h3><p>修正刪除項目的索引位置</p><h4 id="HTML-部份-4"><a href="#HTML-部份-4" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><ul><li>刪除鍵本來傳入的是 key，改成傳入 item </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//雙擊修改</span><br><span class="line"> &lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key) in filteredTodos&quot; @dblclick=&quot;editTodo(item)&quot;&gt;</span><br><span class="line">//判斷是否顯示編輯框</span><br><span class="line">&lt;div class=&quot;d-flex&quot; v-if=&quot;item.id !==cacheTodo.id&quot;&gt;</span><br><span class="line"> &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line">  &lt;label class=&quot;form-check-label&quot; :class=&quot;&#123;&apos;completed&apos;:item.completed&#125;&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; </span><br><span class="line"> //參數是item，就是目前點選的物件</span><br><span class="line"> @click=&quot;removeTodo(item)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-if=&quot;item.id ===cacheTodo.id&quot; v-model=&quot;cacheTitle&quot;</span><br><span class="line">@keyup.esc=&quot;cancelEdit()&quot; @keyup.enter=&quot;doneEdit(item)&quot;&gt;</span><br><span class="line"> &lt;/li&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-4"><a href="#JavaScript-部份-4" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><ul><li>在 removeTodo 裡，原本傳入的是索引值，現修正為 todo list 本身</li><li>在裡面宣告 newIndex 等於一空值</li><li>用迴圈比對刪除的物件跟所有物件的 id 要符合，如果符合就取出他的索引值，並放到要刪除的位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;],</span><br><span class="line">//暫存編輯事項</span><br><span class="line">cacheTodo: &#123;&#125;,</span><br><span class="line">cacheTitle: &apos;&apos;,</span><br><span class="line"></span><br><span class="line">visibility:&apos;all&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line"></span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line"></span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//讓所有待辦事項的索引值保持一致，函數參數要改成todo本身</span><br><span class="line"> removeTodo: function (todo) &#123;</span><br><span class="line"> var newIndex = &quot;&quot;;</span><br><span class="line"> var vm = this;</span><br><span class="line">vm.todos.forEach(function (item, key) &#123;</span><br><span class="line">if (todo.id === item.id) &#123;</span><br><span class="line">newIndex = key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">this.todos.splice(newIndex, 1)</span><br><span class="line">&#125;,,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="STEP6-刪除全部及還有幾筆任務未完成"><a href="#STEP6-刪除全部及還有幾筆任務未完成" class="headerlink" title="STEP6 刪除全部及還有幾筆任務未完成"></a>STEP6 刪除全部及還有幾筆任務未完成</h3><h4 id="HTML-部份-5"><a href="#HTML-部份-5" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;control&quot;&gt;</span><br><span class="line">&lt;a class=&quot;btn&quot; href=&quot;#&quot; @click=&quot;clearAll&quot;&gt;清除所有任務&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">&lt;span&gt;還有 &#123;&#123;undoneRecords &#125;&#125; 筆任務未完成&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-5"><a href="#JavaScript-部份-5" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line"> clearAll: function () &#123; this.todos = [];</span><br><span class="line">&#125;&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> computed: &#123;</span><br><span class="line"> undoneRecords:function()&#123;</span><br><span class="line">var undoneRecords=[];</span><br><span class="line"> this.todos.forEach(function(item)&#123;</span><br><span class="line"> if(!item.completed)&#123;</span><br><span class="line"> undoneRecords.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> return.undoneRecords.length;</span><br><span class="line"> &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;完成品 &lt;a href=&quot;https://chiangyuchi.github.io/vue-simple-todolist/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://chiangyuchi.github.io/vue-simple-
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 [Day32] - 框架小叮嚀：重載函數</title>
    <link href="http://yoursite.com/2019/07/14/2019-07-14-1/"/>
    <id>http://yoursite.com/2019/07/14/2019-07-14-1/</id>
    <published>2019-07-13T16:00:00.000Z</published>
    <updated>2019-07-14T06:15:59.350Z</updated>
    
    <content type="html"><![CDATA[<p>這一節是關於框架或資源庫的應用。首先要了解的是為什麼 JavaScript 去掉一些其他程式語言的特性，這些特性又為何不重要。</p><h3 id="重載函數-Function-overloading"><a href="#重載函數-Function-overloading" class="headerlink" title="重載函數 (Function overloading)"></a>重載函數 (Function overloading)</h3><p>像是 Java、C++ 等程式語言都有重載函數的概念，這表示我讓同一個函數可以擁有不同數量的參數。但是這在 JavaScript 行不通，因為函數就是物件。儘管 JavaScript 不具備這個功能，但是我們也可以用 JavaScript 的一級函式概念處理</p><p>好比說「我不想要每次一直傳入 <code>language</code> 參數」。我們已經看過可以使用預設參數或 <code>||</code> 運算子，然後使用這個函數裡的邏輯條件運算來決定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line">      language = language || &apos;en&apos;;</span><br><span class="line">      if (language === &apos;en&apos;) &#123;</span><br><span class="line">        console.log(&apos;Hello &apos; + firstname + &apos; &apos; + lastname);   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (language === &apos;es&apos;) &#123;</span><br><span class="line">        console.log(&apos;Hola &apos; + firstname + &apos; &apos; + lastname);   </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;,&apos;en&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;,&apos;es&apos;);</span><br></pre></td></tr></table></figure><p>第二種方式是再包覆一層函式的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function greetEnglish(firstname, lastname) &#123;</span><br><span class="line">    greet(firstname, lastname, &apos;en&apos;);   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function greetSpanish(firstname, lastname) &#123;</span><br><span class="line">    greet(firstname, lastname, &apos;es&apos;);   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greetEnglish(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greetSpanish(&apos;John&apos;, &apos;Doe&apos;);</span><br></pre></td></tr></table></figure><p>儘管 JavaScript 沒有重載函式的概念，但是仍然有處理這一類問題的方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一節是關於框架或資源庫的應用。首先要了解的是為什麼 JavaScript 去掉一些其他程式語言的特性，這些特性又為何不重要。&lt;/p&gt;
&lt;h3 id=&quot;重載函數-Function-overloading&quot;&gt;&lt;a href=&quot;#重載函數-Function-overloadin
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="克服Javascript奇怪部份" scheme="http://yoursite.com/tags/%E5%85%8B%E6%9C%8DJavascript%E5%A5%87%E6%80%AA%E9%83%A8%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念 [6] - 表格排序練習</title>
    <link href="http://yoursite.com/2019/07/14/2019-07-14-2/"/>
    <id>http://yoursite.com/2019/07/14/2019-07-14-2/</id>
    <published>2019-07-13T16:00:00.000Z</published>
    <updated>2019-07-15T09:33:38.279Z</updated>
    
    <content type="html"><![CDATA[<p>表格排序練習</p><ul><li>v-on</li><li>v-if</li><li>v-class</li><li>computed</li></ul><p>完成品 <a href="https://codepen.io/Shengzhi/pen/RmbMLw" target="_blank" rel="noopener">https://codepen.io/Shengzhi/pen/RmbMLw</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;表格排序練習&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v-on&lt;/li&gt;
&lt;li&gt;v-if&lt;/li&gt;
&lt;li&gt;v-class&lt;/li&gt;
&lt;li&gt;computed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成品 &lt;a href=&quot;https://codepen.io/Shengzhi/pen/RmbM
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 [Day31]-argument 與 spread</title>
    <link href="http://yoursite.com/2019/07/13/2019-07-13-1/"/>
    <id>http://yoursite.com/2019/07/13/2019-07-13-1/</id>
    <published>2019-07-12T16:00:00.000Z</published>
    <updated>2019-07-14T04:44:21.250Z</updated>
    
    <content type="html"><![CDATA[<p>這一節是是關於另一個 JavaScript 的關鍵字「參數 (arguments)」，這是在執行一個函式的時候引擎會自動幫我們設定好的關鍵字。雖然在下一版本的 JavaScript 就不會這麼常提到這個關鍵字，而是用 <code>spread</code> 處理 <code>arguments</code> 的工作。但是如果現在去看任何程式碼，尤其是框架和資源庫，還是會在原始碼看到 <code>arguments</code> 變數。所以我們應該要認識及知道它的用處。</p><p>已知執行函數的時候，一個執行環境被創造，然後 JavaScript 引擎會幫你設定一些東西，像是變數環境 來包住變數，給範圍鏈的外部環境參考，以及特殊關鍵字 <code>this</code> (它會依據函數的位置和不同被呼叫的方式，指向不同的東西)。最後它還設定一個特殊關鍵字 <code>arguments</code>。<code>arguments</code> 包含所有的值，所有傳入所呼叫的函數的參數 （the parameters you pass into a function) 。其實 <code>arguments</code> 只是另一個傳入函數的參數的名稱而已，但是 JavaScript 用 <code>arguments</code> 統稱所有「傳入函數的參數」。</p><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>要了解 <code>arguments</code> 到底用處是什麼，可以看以下例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line"> </span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br></pre></td></tr></table></figure><p>JavaScript  和其它程式語言的差別在於，我可以呼叫 <code>greet</code>  然後不傳入任何參數，而不會報錯。在瀏覽器執行，得到 undefined。在函數執行的時候，發生提昇 (hoisting) 的狀況，它設定好這些東西的初始值，即便我還沒提供確切的特定值。執行函數的地一件事情是設定好 <code>firstname</code>、<code>lastname</code> 的記憶體空間，然後設定它們為 undefined。</p><p><img src="https://i.imgur.com/EZ0O7vt.png" alt></p><p>如果傳入參數，它會由左到右處理，如果我只傳入一個 ‘John’，它會假定這是 <code>firstname</code> 然後我沒有傳入其它東西到 <code>lastname</code> 和 <code>language</code>，出現 undefined 的原因就是因為 hoisting。這表示可以省略傳入參數，或者可以只傳入一部份的參數</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><p>![](<a href="https://i.imgur.com/INhLkRQ" target="_blank" rel="noopener">https://i.imgur.com/INhLkRQ</a>.</p><p>雖然這看起來有點奇怪，但其實這是一個強大的概念。例如，在下一版本的 JavaScript ，如果沒有傳入參數值到函數裡面，可以設定預定參數</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language＝&apos;en&apos;) &#123;</span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><p>然而，這並非所有瀏覽器都支援，所以可以這樣使用預定參數的概念。亦即如果沒有傳入參數給函式，如果是 undefined 就會使用 <code>||</code> 運算子，強制型轉成 false，因為 undefine 會強制型轉成 false，最終會得到 en 的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line"></span><br><span class="line">    language = language || &apos;en&apos;;</span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><p>![](<a href="https://i.imgur.com/iUGjoEh" target="_blank" rel="noopener">https://i.imgur.com/iUGjoEh</a>.</p><p>現在繼續關注 JavaScript 設定的關鍵字 <code>arguments</code> ，沒有在任何地方宣告，但自動就可以取用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line"></span><br><span class="line">    language = language || &apos;en&apos;;</span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(arguments);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><p><code>argument</code> 包含所有傳入參數的值，但因為這是一個特殊的關鍵字，所以那些微微傾斜的中括號，意味它其實是 「像陣列的」（array-like)。這表示它的動作和陣列相似，看起來也很像。但它不是陣列。它只有一部份陣列的功能。</p><p><img src="https://i.imgur.com/Dw34UBP.png" alt></p><p>所以如果我不想要我的函式做任何動作，也沒有傳入任何的參數，我可以檢查 <code>argument.length</code>，長度為 0 表示這個陣列是空的，一個回傳陳述句會將我踢出函式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line"> </span><br><span class="line">    language = language || &apos;en&apos;;</span><br><span class="line">    </span><br><span class="line">    if (arguments.length === 0) &#123;</span><br><span class="line">        console.log(&apos;Missing parameters!&apos;);</span><br><span class="line">        console.log(&apos;-------------&apos;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(arguments);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/p4Z3tzy.png" alt></p><p>所以雖然 <code>argument</code> 沒有參數名稱，只有值，我依然可以像陣列一樣使用它，可以用中括號運算子，像是我們可以利用 arguments 來判斷函式有沒有傳入參數，或者取出特定索引的值等等運用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line"> </span><br><span class="line">    language = language || &apos;en&apos;;</span><br><span class="line">    </span><br><span class="line">    if (arguments.length === 0) &#123;</span><br><span class="line">        console.log(&apos;Missing parameters!&apos;);</span><br><span class="line">        console.log(&apos;-------------&apos;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(arguments);</span><br><span class="line">    console.log(&apos;arg 0: &apos; + arguments[0]);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><h3 id="spread-parameter-其餘參數"><a href="#spread-parameter-其餘參數" class="headerlink" title="spread parameter 其餘參數"></a>spread parameter 其餘參數</h3><p>隨著 JavaScript 的發展，在 ES6 中，我們可以使用其餘參數<code>...</code>來取代 arguments ，但不代表 arguments 不存在了，它仍然可以使用，只是有更好的選擇。</p><p>簡單來說如果我們有傳入函式的參數，可以使用「…」來省略，但要特別注意的是，只能在沒有其他參數下，或者「…」必須是最後一個參數才可以使用。</p><p>其餘參數比起 arguments 好用的地方在於，其餘參數是一個真正的陣列，支援所有可以用於陣列上的方法， arguments 是類陣列，處理上較為麻煩。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language,...other) &#123;</span><br><span class="line"> </span><br><span class="line">    language = language || &apos;en&apos;;</span><br><span class="line">    </span><br><span class="line">    if (arguments.length === 0) &#123;</span><br><span class="line">        console.log(&apos;Missing parameters!&apos;);</span><br><span class="line">        console.log(&apos;-------------&apos;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(arguments);</span><br><span class="line">    console.log(&apos;arg 0: &apos; + arguments[0]);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;,&apos;other1&apos;,&apos;other2&apos;);</span><br></pre></td></tr></table></figure><h3 id="計算加總-—-其餘參數"><a href="#計算加總-—-其餘參數" class="headerlink" title="計算加總 — 其餘參數"></a>計算加總 — 其餘參數</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function sum(...input) &#123;  </span><br><span class="line">  var result = 0;  </span><br><span class="line">  input.forEach(function(input) &#123;  </span><br><span class="line">    result += input;  </span><br><span class="line">  &#125;);  </span><br><span class="line">  return result;  </span><br><span class="line">&#125;  </span><br><span class="line">console.log(sum(1)); // 1  </span><br><span class="line">console.log(sum(1, 2, 3, 4, 5)); // 15</span><br></pre></td></tr></table></figure><h3 id="計算加總-—-arguments"><a href="#計算加總-—-arguments" class="headerlink" title="計算加總 — arguments"></a>計算加總 — arguments</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function sum() &#123;  </span><br><span class="line">  var result = 0;  </span><br><span class="line">  for (var i = 0;i&lt;arguments.length;i++)&#123;  </span><br><span class="line">    result += arguments[i]  </span><br><span class="line">  &#125;  </span><br><span class="line">  return result;  </span><br><span class="line">&#125;  </span><br><span class="line">console.log(sum(1)); // 1  </span><br><span class="line">console.log(sum(1, 2, 3, 4, 5)); // 15</span><br></pre></td></tr></table></figure><p>雖然 arguments 也能做到一樣的事情，但是因為不是真正的陣列，沒辦法使用 ES6 新增的一些好用的陣列方法，所以只能使用 for 迴圈一個個加總，或者使用其他方式將類陣列轉換成真正的陣列。</p><p>也因為 arguments 不能自訂一個名稱，所以也很難讓人明白到底這段程式是在做些什麼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一節是是關於另一個 JavaScript 的關鍵字「參數 (arguments)」，這是在執行一個函式的時候引擎會自動幫我們設定好的關鍵字。雖然在下一版本的 JavaScript 就不會這麼常提到這個關鍵字，而是用 &lt;code&gt;spread&lt;/code&gt; 處理 &lt;code
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="克服Javascript奇怪部份" scheme="http://yoursite.com/tags/%E5%85%8B%E6%9C%8DJavascript%E5%A5%87%E6%80%AA%E9%83%A8%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念 [5] - 動態切換 ClassName 及 Style 多種方法</title>
    <link href="http://yoursite.com/2019/07/12/2019-07-12-3/"/>
    <id>http://yoursite.com/2019/07/12/2019-07-12-3/</id>
    <published>2019-07-11T16:00:00.000Z</published>
    <updated>2019-07-14T05:11:22.570Z</updated>
    
    <content type="html"><![CDATA[<p>假設我們要在原始 HTML 結構上動態為 .box 動態加上 className “rotate”</p><h3 id="物件寫法"><a href="#物件寫法" class="headerlink" title="物件寫法"></a>物件寫法</h3><ul><li>v-bind 綁定一個 class，附加一個物件，但因為是物件的關係，所以可以插入一個以上的值<h4 id="HTML-部份"><a href="#HTML-部份" class="headerlink" title="HTML 部份"></a>HTML 部份</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot; :class=&quot;&#123;&apos;rotate&apos;:isTransform,&apos;bg-danger&apos;:  boxColor &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">          &lt;p&gt;請為此元素加上動態 className&lt;/p&gt;</span><br><span class="line">          &lt;hr&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;isTransform = !isTransform&quot;&gt;選轉物件&lt;/button&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;classToggle1&quot; v-model=&quot;boxColor&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;classToggle1&quot;&gt;切換色彩&lt;/label&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份"><a href="#JavaScript-部份" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             isTransform: false,</span><br><span class="line">             boxColor: false</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure><h4 id="CSS-部份"><a href="#CSS-部份" class="headerlink" title="CSS 部份"></a>CSS 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">          transition: transform .5s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box.rotate &#123;</span><br><span class="line">          transform: rotate(45deg)</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="物件寫法2"><a href="#物件寫法2" class="headerlink" title="物件寫法2"></a>物件寫法2</h3><p>直接在 Vue 的 data 結構裡宣告物件，並在 HTML 裡直接使用，再以點擊事件觸發旋轉，以v-model更改色彩</p><h4 id="HTML-部份-1"><a href="#HTML-部份-1" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot; :class=&quot;objectClass&quot;&gt;&lt;/div&gt;</span><br><span class="line">          &lt;p&gt;請將此範例改為 &quot;物件&quot; 寫法&lt;/p&gt;</span><br><span class="line">          &lt;hr&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;objectClass.rotate = !objectClass.rotate&quot;&gt;選轉物件&lt;/button&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;classToggle2&quot; v-model=&quot;objectClass[&apos;bg-danger&apos;]&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;classToggle2&quot;&gt;切換色彩&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-1"><a href="#JavaScript-部份-1" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             isTransform: false,</span><br><span class="line">             boxColor: false,</span><br><span class="line">             objectClass: &#123;</span><br><span class="line">               &apos;rotate&apos;: false,</span><br><span class="line">               &apos;bg-danger&apos;: false,</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure><h4 id="CSS-部份-1"><a href="#CSS-部份-1" class="headerlink" title="CSS 部份"></a>CSS 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">          transition: transform .5s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box.rotate &#123;</span><br><span class="line">          transform: rotate(45deg)</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="陣列方式"><a href="#陣列方式" class="headerlink" title="陣列方式"></a>陣列方式</h3><p>適用於 className 長度不確定者，動態地將 className 存在陣列裡面。</p><h4 id="HTML-部份-2"><a href="#HTML-部份-2" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class=&quot;btn  &quot; :class=&quot;arrayClass&quot;&gt;請操作本元件&lt;/button&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-2"><a href="#JavaScript-部份-2" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             isTransform: false,</span><br><span class="line">             boxColor: false,</span><br><span class="line">             objectClass: &#123;</span><br><span class="line">               &apos;rotate&apos;: false,</span><br><span class="line">               &apos;bg-danger&apos;: false,</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure><h4 id="CSS-部份-2"><a href="#CSS-部份-2" class="headerlink" title="CSS 部份"></a>CSS 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">          transition: transform .5s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box.rotate &#123;</span><br><span class="line">          transform: rotate(45deg)</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="綁定行內樣式的方法"><a href="#綁定行內樣式的方法" class="headerlink" title="綁定行內樣式的方法"></a>綁定行內樣式的方法</h3><p>以 <code>:style：&quot;{&#39;樣式屬性&#39;：&#39;樣式的值&#39;}&quot;</code> 插入行內樣式</p><h4 id="HTML-部份-3"><a href="#HTML-部份-3" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot; :style=&quot;&#123;backgroundColor:&apos;red&apos;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot; :style=&quot;styleObject&quot;&gt;&lt;/div&gt;// 以變數方式插入</span><br><span class="line"> &lt;div class=&quot;box&quot; :style=&quot;[&#123;backgroundColor:&apos;red&apos;&#125;,&#123;borderWidth:&apos;5px&apos;&#125;]&quot;&gt;&lt;/div&gt; //以陣列方式插入</span><br><span class="line"> &lt;div class=&quot;box&quot; :style=&quot;[&#123;styleObject,styleObject2]&quot;&gt;&lt;/div&gt; //插入多個物件</span><br><span class="line"></span><br><span class="line">&lt;h5&gt;自動加上 Prefix (每個版本結果不同)&lt;/h5&gt;</span><br><span class="line"> &lt;div class=&quot;box&quot; :style=&quot;styleObject3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-3"><a href="#JavaScript-部份-3" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><pre><code>&lt;script&gt;  var app = new Vue({    el: &apos;#app&apos;,    data: {      isTransform: false,      boxColor: false,      objectClass: {        &apos;rotate&apos;: false,        &apos;bg-danger&apos;: false,      },      //行內樣式      //使用駝峰式命名      styleObject: {        backgroundColor: &apos;red&apos;,        borderWidth: &apos;5px&apos;      },      styleObject2: {        backgroundColor: &apos;red&apos;,        boxShadow: &apos;3px 3px 5px rgba(0,0,0,0.16)&apos;      },      styleObject3: {        userSelect: &apos;none&apos;      },    }  })&lt;/script&gt;</code></pre><h4 id="CSS-部份-3"><a href="#CSS-部份-3" class="headerlink" title="CSS 部份"></a>CSS 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">          transition: transform .5s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box.rotate &#123;</span><br><span class="line">          transform: rotate(45deg)</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假設我們要在原始 HTML 結構上動態為 .box 動態加上 className “rotate”&lt;/p&gt;
&lt;h3 id=&quot;物件寫法&quot;&gt;&lt;a href=&quot;#物件寫法&quot; class=&quot;headerlink&quot; title=&quot;物件寫法&quot;&gt;&lt;/a&gt;物件寫法&lt;/h3&gt;&lt;ul&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 [Day30]-觀念小叮嚀：陣列--任何東西的集合</title>
    <link href="http://yoursite.com/2019/07/12/2019-07-12-2/"/>
    <id>http://yoursite.com/2019/07/12/2019-07-12-2/</id>
    <published>2019-07-11T16:00:00.000Z</published>
    <updated>2019-07-14T04:50:52.600Z</updated>
    
    <content type="html"><![CDATA[<p>陣列是包含許多東西的集合，陣列可以被宣告，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array();</span><br></pre></td></tr></table></figure><p>或者使用陣列實體語法，和物件實體語法類似，除了它是用中括號而不是大括號。放進我要的值，並且在陣列裡面用逗號分隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">arr[2];</span><br></pre></td></tr></table></figure><p>陣列索引值從 0 開始，所以我可以用中括號決定我要抓出哪一個值。2 是第三個值，以此類推。這對以其他程式語言處理陣列的人來說，似乎沒什麼需要解釋的地方。但因為 JavaScript 是動態型別，所以它的陣列有一點不一樣。</p><p>在大部分程式語言，陣列可以包含一連串相同型別的東西，像是一個數字陣列、一個字串陣列、一個物件陣列。但因為 JavaScript 是動態型別，所以我可以在陣列裡混合不同的型別。我可以有一個數字、一個布林值、一個物件實體（裡面有名稱屬性、地址屬性等等）、放進一個函數（因為函數就是物件，所以這裡用的是函數表示式）、再放進一個字串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var arr =[</span><br><span class="line">1,</span><br><span class="line">false,</span><br><span class="line">&#123;</span><br><span class="line">    name:&apos;Tony&apos;,</span><br><span class="line">    address:&apos;111 Main St.&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">function(name)&#123;</span><br><span class="line">    var greeting =&apos;Hello&apos;;</span><br><span class="line">    console.log(greeting + name)&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><p>上驗的例子在輸出的時候會報錯嗎？ 顯然沒有。所以 JavaScript 的陣列可以是任何型別的集合</p><p><img src="https://i.imgur.com/PAOhUzj.png" alt></p><p>基於這個原因，所以我們可以參照並且執行上面陣列裡的函數，用小括號呼叫，我要怎樣取用函數裡的名稱？作法是到上面陣列裡的函數，找第三個元件，接著用點運算子傳入名稱屬性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var arr =[</span><br><span class="line">1,</span><br><span class="line">false,</span><br><span class="line">&#123;</span><br><span class="line">    name:&apos;Tony&apos;,</span><br><span class="line">    address:&apos;111 Main St.&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">function(name)&#123;</span><br><span class="line">    var greeting =&apos;Hello&apos;;</span><br><span class="line">    console.log(greeting + name)&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line">arr[3](arr[2].name);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/df7eDry.png" alt></p><p>所以陣列可以包含不同型別的東西，我可以參照到它，它也可以包括函數，所以我可以呼叫它。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;陣列是包含許多東西的集合，陣列可以被宣告，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="克服Javascript奇怪部份" scheme="http://yoursite.com/tags/%E5%85%8B%E6%9C%8DJavascript%E5%A5%87%E6%80%AA%E9%83%A8%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念 [4] - 元件基礎概念</title>
    <link href="http://yoursite.com/2019/07/11/2019-07-11-1/"/>
    <id>http://yoursite.com/2019/07/11/2019-07-11-1/</id>
    <published>2019-07-10T16:00:00.000Z</published>
    <updated>2019-07-18T07:40:33.669Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 的每一個元件都可以獨立儲存各自的狀態，以下是一個元件的範例，此範例以反引號來定義元件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">          // 請在此撰寫 JavaScript</span><br><span class="line">          Vue.component(&apos;counter-component&apos;, &#123;</span><br><span class="line">            data: function () &#123;</span><br><span class="line">              return &#123;</span><br><span class="line">                counter: 0</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            template: `&lt;div&gt;</span><br><span class="line">              &lt;button class=&quot;btn btn-outline-secondary btn-sm&quot; @click=&quot;counter += 1&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;`</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              counter: 0</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>元件可以重複使用，而且帶有一個名字，在這個例子中是 <code>counter-component</code>，我們可以在一個 new Vue 建立的 Vue 應用程式使用此組件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            你已經點擊 &lt;counter-component&gt;&lt;/counter-component&gt; 下。</span><br><span class="line">            你已經點擊 &lt;button class=&quot;btn btn-outline-secondary btn-sm&quot; @click=&quot;counter += 1&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt; 下。</span><br><span class="line"></span><br><span class="line">            &lt;counter-component&gt;&lt;/counter-component&gt;</span><br><span class="line">            &lt;counter-component&gt;&lt;/counter-component&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>元件是可以重複使用的，它們與 new Vue 接收相同的選項，例如 data、computed、watch、methods 以及生命周期。</p><h2 id="template-標籤與-v-if"><a href="#template-標籤與-v-if" class="headerlink" title="template 標籤與 v-if"></a>template 標籤與 v-if</h2><p>在希望使用 Vue 指令，但不希望輸出標籤的時候，就可以使用 template 標籤。範例使用 <code>template</code> 標籤搭配 <code>v-if</code> 指令切換多個 DOM 的呈現</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;table class=&quot;table&quot;&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">              &lt;th&gt;編號&lt;/th&gt;</span><br><span class="line">              &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;template v-if=&quot;showTemplate&quot;&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;安妮&lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">              &lt;tr v-if=&quot;showTemplate&quot;&gt;</span><br><span class="line">                &lt;td&gt;2&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;小明&lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              isSuccess: true,</span><br><span class="line">              showTemplate: true,</span><br><span class="line"></span><br><span class="line">              link: &apos;a&apos;,</span><br><span class="line"></span><br><span class="line">              loginType: &apos;username&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">              toggleLoginType: function () &#123;</span><br><span class="line">                return this.loginType = this.loginType === &apos;username&apos; ? &apos;email&apos; : &apos;username&apos;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="templete-與-v-for"><a href="#templete-與-v-for" class="headerlink" title="templete 與 v-for"></a>templete 與 v-for</h1><p>有兩個 tr 一組使用 v-for，這時就可以運用 templete </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;table class=&quot;table&quot;&gt;</span><br><span class="line">           &lt;template v-for=&quot;item in arrayData&quot;&gt;</span><br><span class="line">             &lt;tr&gt;</span><br><span class="line">               &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class="line">             &lt;/tr&gt;</span><br><span class="line">             &lt;tr&gt;</span><br><span class="line">               &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">             &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">           &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">         &lt;/table&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;list-item&apos;, &#123;</span><br><span class="line">           template: `</span><br><span class="line">   &lt;li&gt;</span><br><span class="line">     &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲</span><br><span class="line">   &lt;/li&gt;</span><br><span class="line"> `,</span><br><span class="line">           props: [&apos;item&apos;]</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             arrayData: [&#123;</span><br><span class="line">                 name: &apos;小明&apos;,</span><br><span class="line">                 age: 16</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                 name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                 age: 24</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                 name: &apos;杰倫&apos;,</span><br><span class="line">                 age: 20</span><br><span class="line">               &#125;</span><br><span class="line">             ],</span><br><span class="line">             objectData: &#123;</span><br><span class="line">               ming: &#123;</span><br><span class="line">                 name: &apos;小明&apos;,</span><br><span class="line">                 age: 16</span><br><span class="line">               &#125;,</span><br><span class="line">               auntie: &#123;</span><br><span class="line">                 name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                 age: 24</span><br><span class="line">               &#125;,</span><br><span class="line">               jay: &#123;</span><br><span class="line">                 name: &apos;杰倫&apos;,</span><br><span class="line">                 age: 20</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             filterArray: [],</span><br><span class="line">             filterText: &apos;&apos;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h1 id="元件基礎練習-把表格包裝成元件"><a href="#元件基礎練習-把表格包裝成元件" class="headerlink" title="元件基礎練習 (把表格包裝成元件)"></a>元件基礎練習 (把表格包裝成元件)</h1><h2 id="使用-x-templete-建立元件"><a href="#使用-x-templete-建立元件" class="headerlink" title="使用 x-templete 建立元件"></a>使用 x-templete 建立元件</h2><ul><li>以 <code>Vue.component</code> 建立元件</li><li>以 <code>x-templete</code> 定義元件，使用方式是在外面再建立一個 <code>script</code> ，它的 type 是<code>text/x-templete</code>，id 是指向 templete 的 id </li></ul><p>這裡要注意元件內資料與外層是不同的，所以必須將資料傳入元件內</p><ul><li>運用 <code>props</code> 傳遞資料<br>另外，<code>tbody</code> 裡面不能放非表格相關的標籤，否則會跑版，這樣寫不行<br><img src="https://i.imgur.com/m4gS9U6.png" alt></li><li>將元件註冊在應用程式下面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;table class=&quot;table&quot;&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">              &lt;!-- &lt;row-component v-for=&quot;(item, key) in data&quot; :person=&quot;item&quot; :key=&quot;key&quot;&gt;&lt;/row-component&gt; --&gt;</span><br><span class="line"></span><br><span class="line">              &lt;tr is=&quot;row-component&quot; v-for=&quot;(item, key) in data&quot; :person=&quot;item&quot; :key=&quot;key&quot;&gt;&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              &lt;!-- &lt;tr v-for=&quot;(item, key) in data&quot; :item=&quot;item&quot; :key=&quot;key&quot;&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; item.cash &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; item.icash &#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt; --&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">          &lt;/table&gt;</span><br><span class="line">        &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt; &lt;script type=&quot;text/x-template&quot; id=&quot;rowComponentTemplate&quot;&gt;</span><br><span class="line">          &lt;tr &gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123; person.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123; person.cash &#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123; person.icash &#125;&#125;&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">          // Vue.component(&apos;row-component&apos;, &#123;</span><br><span class="line">          //   props: [&apos;person&apos;],</span><br><span class="line">          //   template: &quot;#rowComponentTemplate&quot;</span><br><span class="line">          // &#125;)</span><br><span class="line"></span><br><span class="line">          var child = &#123;</span><br><span class="line">            props: [&apos;person&apos;],</span><br><span class="line">            template: &quot;#rowComponentTemplate&quot;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              data: [&#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  cash: 100,</span><br><span class="line">                  icash: 500,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;杰倫&apos;,</span><br><span class="line">                  cash: 10000,</span><br><span class="line">                  icash: 5000,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                  cash: 500,</span><br><span class="line">                  icash: 500,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;老媽&apos;,</span><br><span class="line">                  cash: 10000,</span><br><span class="line">                  icash: 100,</span><br><span class="line">                &#125;,</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            components: &#123;</span><br><span class="line">              &quot;row-component&quot;: child</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="元件必須使用-function-return"><a href="#元件必須使用-function-return" class="headerlink" title="元件必須使用 function return"></a>元件必須使用 function return</h1><p>新建一個 Vue 的應用程式，是不需要 return ，直接用 data 插入物件就可以。但是在元件內如果也用這種方式就會報錯。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;counter-component&gt;&lt;/counter-component&gt;</span><br><span class="line">  &lt;counter-component&gt;&lt;/counter-component&gt;</span><br><span class="line">  &lt;counter-component&gt;&lt;/counter-component&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/x-template&quot; id=&quot;counter-component&quot;&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  你已經點擊 &lt;button class=&quot;btn btn-outline-secondary btn-sm&quot; @click=&quot;counter += 1&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt; 下。</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&apos;counter-component&apos;, &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    counter: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &apos;#counter-component&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>這裡告訴我們需要用 function return </p><p><img src="https://i.imgur.com/rE3uDgx.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;counter-component&gt;&lt;/counter-component&gt;</span><br><span class="line">  &lt;counter-component&gt;&lt;/counter-component&gt;</span><br><span class="line">  &lt;counter-component&gt;&lt;/counter-component&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/x-template&quot; id=&quot;counter-component&quot;&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  你已經點擊 &lt;button class=&quot;btn btn-outline-secondary btn-sm&quot; @click=&quot;counter += 1&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt; 下。</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&apos;counter-component&apos;, &#123;</span><br><span class="line">  data:function() &#123;</span><br><span class="line">    return&#123;counter: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &apos;#counter-component&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="props-基本觀念-由外到內的資料傳遞"><a href="#props-基本觀念-由外到內的資料傳遞" class="headerlink" title="props 基本觀念 由外到內的資料傳遞"></a>props 基本觀念 由外到內的資料傳遞</h1><p>由於 Vue 的每一個元件資料狀態都是獨立的，因為使用元件的目的就是希望互相干擾的狀況能越小越好，因此資料都是獨立儲存的，除非必要否則不會互相傳遞溝通。如果真的有需要從父層傳遞資料給子層，使用  <code>props</code> 即可。</p><h2 id="props-down"><a href="#props-down" class="headerlink" title="props down"></a>props down</h2><p>在 HTML 模版中，使用屬性「user_name」傳遞名稱（name）「Peter」給元件<prompt-component>。由於屬性 user_name 的值是由 data 的 name 代入，需要與 Vue Instance 結合，未來在解析模版時做處理，因此加上 v-bind 屬性綁定，簡寫為:。而在元件中，必須使用props聲明它所獲得的資料。</prompt-component></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;prompt-component :user-name=&quot;name&quot;&gt;&lt;/prompt-component&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;prompt-component&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;button @click=&quot;sayHi(userName)&quot;&gt;Say Hi!&lt;/button&gt;&apos;,</span><br><span class="line">  delimiters: [&apos;$&#123;&apos;, &apos;&#125;&apos;],</span><br><span class="line">  props: [&apos;user-name&apos;], //使用`props`聲明它所獲得的資料</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sayHi: function(name) &#123;</span><br><span class="line">      alert(&apos;Hi &apos; + name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  delimiters: [&apos;$&#123;&apos;, &apos;&#125;&apos;],</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: &apos;Peter&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="camelCase-vs-kebab-case"><a href="#camelCase-vs-kebab-case" class="headerlink" title="camelCase vs kebab-case"></a>camelCase vs kebab-case</h2><p>HTML 的屬性名稱是大小寫不敏感的，而 JavaScript 是嚴格區分大小寫的。因此，若非使用以 JavaScript 產生模版的方式，意即「字串模版 (String Template)」，而是使用 HTML 模版時，屬性名稱必須使用以 dash （短橫線） 分隔的 kebab-case 命名。</p><p>例如，在 HTML 中撰寫屬性名稱「user name」如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(O) &lt;prompt-component :user-name=&quot;name&quot;&gt;&lt;/prompt-component&gt;</span><br><span class="line"></span><br><span class="line">(X) &lt;prompt-component :userName=&quot;name&quot;&gt;&lt;/prompt-component&gt;</span><br></pre></td></tr></table></figure><p>重申一次，如果使用字串模板，那就沒有這個限制。</p><h2 id="靜態傳遞與動態傳遞"><a href="#靜態傳遞與動態傳遞" class="headerlink" title="靜態傳遞與動態傳遞"></a>靜態傳遞與動態傳遞</h2><p>由於屬性 id 的值是由 data 的 id 代入，若只是經由屬性傳遞資料，模版不會做任何處理，得到的資料型態是「string」；但若使用 v-bind 屬性綁定（簡寫為:），將來會與 Vue Instance 結合，解析模版會當成 JavaScript 表達式做計算</p><ul><li>靜態傳遞：透過字串直接將資料傳入</li><li>動態傳遞：類似 v-bind 的方式在屬性前加冒號</li></ul><p>如下範例，元件<prompt-component>會代入 id，點擊按鈕後會觸發 checkID method，然後 console 目前 id 的資料型別。</prompt-component></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;prompt-component&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;button @click=&quot;checkID(id)&quot;&gt;Check ID&lt;/button&gt;&apos;,</span><br><span class="line">  delimiters: [&apos;$&#123;&apos;, &apos;&#125;&apos;],</span><br><span class="line">  props: [&apos;id&apos;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    checkID: function(id) &#123;</span><br><span class="line">      console.log(typeof id);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  delimiters: [&apos;$&#123;&apos;, &apos;&#125;&apos;],</span><br><span class="line">  data: &#123;</span><br><span class="line">    id: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>case 1 靜態<br>這裡的 id 的資料型態是「string」。點擊按鈕後 console 出來的結果是 string。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;prompt-component id=&quot;id&quot;&gt;&lt;/prompt-component&gt;</span><br></pre></td></tr></table></figure><ul><li>case 2 動態<br>這裡的 id 的資料型態是「number」。點擊按鈕後 console 出來的結果是 number。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;prompt-component :id=&quot;id&quot;&gt;&lt;/prompt-component&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="單向數據流"><a href="#單向數據流" class="headerlink" title="單向數據流"></a>單向數據流</h2><p>Prop 是單向的，只會從父層傳至子層，並且 Prop 的值會隨父層更動設定而改變。</p><p>以下的 url 是從外層所傳入的，如果我直接在顯示在畫面上的網址修改<br><img src="https://i.imgur.com/UKOeK48.png" alt></p><p>就會報錯，告訴我們不要直接修改 props 傳入的內容</p><p><img src="https://i.imgur.com/k8P1k8x.png" alt></p><p>解決方式是必須在元件內新增一個 <code>data</code> 接收外部傳入的 props ，並定義一個新的 url ，不要讓它與外層的 url 綁定。</p><p>因此在使用 props 的時候要維持單向數據流的觀念</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;photo :img-url=&quot;url&quot;&gt;&lt;/photo&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/x-template&quot; id=&quot;photo&quot;&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">  &lt;img :src=&quot;imgUrl&quot; class=&quot;img-fluid&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;newUrl&quot;&gt; //將元件由原先綁定 imgUrl 改成綁定 newUrl</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;photo&apos;, &#123;</span><br><span class="line">  props: [&apos;imgUrl&apos;],</span><br><span class="line">  template: &apos;#photo&apos;,</span><br><span class="line"></span><br><span class="line">  // 解答：</span><br><span class="line">  // data: function () &#123;</span><br><span class="line">  //   return &#123;</span><br><span class="line">  //     newUrl: this.imgUrl</span><br><span class="line">  //   &#125;</span><br><span class="line">  // &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    user: &#123;&#125;,</span><br><span class="line">    url: &apos;https://images.unsplash.com/photo-1522204538344-922f76ecc041?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=50e38600a12d623a878983fc5524423f&amp;auto=format&amp;fit=crop&amp;w=1351&amp;q=80&apos;,</span><br><span class="line">    isShow: true </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="尚未宣告的變數"><a href="#尚未宣告的變數" class="headerlink" title="尚未宣告的變數"></a>尚未宣告的變數</h2><p>現有一個 <code>card</code> 元件，它會接收外部傳進的 userData，並將卡片繪製出來。userData 的來源是 Vue 應用程式。應用程式裡會先宣告一個 user 物件，再透過 ajax 行為抓取遠端資料，最後才存進 user 裡面。所以 user 傳入就會產生時間差。因此會跳出這個錯誤，它找不到某些變數</p><p><img src="https://i.imgur.com/fZnC5Xh.png" alt></p><p>簡單來說：如果資料匯入有時間差，我們可以在元件上面使用 <code>v-if</code> 解決這個問題，設定某個特性如果沒有完全讀進來之前先不要執行這個卡片，讓它與資料完成的時候一起同步繪製</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;col-sm-4&quot;&gt;</span><br><span class="line">              &lt;card :user-data=&quot;user&quot; v-if=&quot;user.phone&quot;&gt;&lt;/card&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;card&apos;, &#123;</span><br><span class="line">           props: [&apos;userData&apos;],</span><br><span class="line">           template: &apos;#card&apos;,</span><br><span class="line">           data: function () &#123;</span><br><span class="line">             return &#123;</span><br><span class="line">               user: this.userData</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;keepCard&apos;, &#123;</span><br><span class="line">            template: &apos;#card&apos;,</span><br><span class="line">            data: function () &#123;</span><br><span class="line">              return &#123;</span><br><span class="line">                user: &#123;&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            created: function () &#123;</span><br><span class="line">              var vm = this;</span><br><span class="line">              $.ajax(&#123;</span><br><span class="line">                url: &apos;https://randomuser.me/api/&apos;,</span><br><span class="line">                dataType: &apos;json&apos;,</span><br><span class="line">                success: function (data) &#123;</span><br><span class="line">                  vm.user = data.results[0];</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><h2 id="維持狀態與生命週期"><a href="#維持狀態與生命週期" class="headerlink" title="維持狀態與生命週期"></a>維持狀態與生命週期</h2><p>這個元件每次銷燬再生成的時候，會執行一段 Ajax。如果符合預期的狀態，這樣執行並沒有錯誤。可是有時我們有時不希望元件重新生成的時候，就重頭執行一次 Ajax。</p><p>這時使用 <code>keep-alive</code> 維持元件的生命週期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 class=&quot;mt-3&quot;&gt;維持狀態與生命週期&lt;/h2&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;isShow&quot; v-model=&quot;isShow&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;isShow&quot;&gt;Check me out&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;col-sm-4&quot; v-if=&quot;isShow&quot;&gt;</span><br><span class="line">              &lt;keep-card&gt;</span><br><span class="line">              &lt;/keep-card&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>也要確保在資料載入完成之後才開始執行，所以使用兩個 <code>v-if</code> 的判斷</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;script type=&quot;text/x-template&quot; id=&quot;card&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;card&quot;&gt;</span><br><span class="line">  &lt;img class=&quot;card-img-top&quot; :src=&quot;user.picture.large&quot; v-if=&quot;user.picture&quot; alt=&quot;Card image cap&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">    &lt;h5 class=&quot;card-title&quot; v-if=&quot;user.name&quot;&gt;&#123;&#123; user.name.first &#125;&#125; &#123;&#123; user.name.last &#125;&#125;&lt;/h5&gt;</span><br><span class="line">    &lt;p class=&quot;card-text&quot;&gt;&#123;&#123; user.email &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;card-footer&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;email&quot; class=&quot;form-control&quot; v-model=&quot;user.email&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;keepCard&apos;, &#123;</span><br><span class="line">            template: &apos;#card&apos;,</span><br><span class="line">            data: function () &#123;</span><br><span class="line">              return &#123;</span><br><span class="line">                user: &#123;&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            created: function () &#123;</span><br><span class="line">              var vm = this;</span><br><span class="line">              $.ajax(&#123;</span><br><span class="line">                url: &apos;https://randomuser.me/api/&apos;,</span><br><span class="line">                dataType: &apos;json&apos;,</span><br><span class="line">                success: function (data) &#123;</span><br><span class="line">                  vm.user = data.results[0];</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              user: &#123;&#125;,</span><br><span class="line">              url: &apos;https://images.unsplash.com/photo-1522204538344-922f76ecc041?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=50e38600a12d623a878983fc5524423f&amp;auto=format&amp;fit=crop&amp;w=1351&amp;q=80&apos;,</span><br><span class="line">              isShow: true</span><br><span class="line">            &#125;,</span><br><span class="line">            created: function () &#123;</span><br><span class="line">              var vm = this;</span><br><span class="line">              $.ajax(&#123;</span><br><span class="line">                url: &apos;https://randomuser.me/api/&apos;,</span><br><span class="line">                dataType: &apos;json&apos;,</span><br><span class="line">                success: function (data) &#123;</span><br><span class="line">                  vm.user = data.results[0];</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><h2 id="props-型別及預設值"><a href="#props-型別及預設值" class="headerlink" title="props 型別及預設值"></a>props 型別及預設值</h2><p>在傳入 props 的時候就定義型別，避免傳入錯誤內容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"> &lt;h2&gt;Props 的型別&lt;/h2&gt;</span><br><span class="line"> &lt;prop-type :cash=&quot;cash&quot;&gt;&lt;/prop-type&gt;</span><br><span class="line"></span><br><span class="line"> &lt;h2 class=&quot;mt-3&quot;&gt;靜態與動態傳入數值差異&lt;/h2&gt;</span><br><span class="line"> &lt;!-- 有設定type的話，靜態傳入參數就會錯誤，要改為動態傳入參數 --&gt; </span><br><span class="line"> &lt;!-- :cash 有冒號，是動態傳入參數，沒有冒號是靜態傳入參數 --&gt; </span><br><span class="line"> &lt;prop-type :cash=&quot;300&quot;&gt;&lt;/prop-type&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/x-template&quot; id=&quot;propType&quot;&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">  &lt;input type=&quot;number&quot; class=&quot;form-control&quot; v-model=&quot;newCash&quot;&gt; &#123;&#123; typeof(cash)&#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&apos;prop-type&apos;, &#123;</span><br><span class="line">  //props: [&apos;cash&apos;],</span><br><span class="line">  //改為以下的寫法，props改設定為物件</span><br><span class="line">  //物件內可設定變數的屬性以及預設值</span><br><span class="line">  //有設定型態的好處就是傳入字串的時候就會出現錯誤</span><br><span class="line">  props: &#123;</span><br><span class="line">cash: &#123;</span><br><span class="line">type: Number,</span><br><span class="line">default: 100</span><br><span class="line">&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &apos;#propType&apos;,</span><br><span class="line">  data: function() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">newCash: this.cash</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,</span><br><span class="line">data: &#123;</span><br><span class="line">cash: 300</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="emit-基本觀念-由內向外傳遞資訊"><a href="#emit-基本觀念-由內向外傳遞資訊" class="headerlink" title="emit 基本觀念 由內向外傳遞資訊"></a>emit 基本觀念 由內向外傳遞資訊</h1><p>現在要透過裡面的元件改變外面 cash 金額</p><ul><li>要觸發 Vue 應用程式，所以要有一個按鈕點擊事件 <code>incrementTotal</code></li><li>再註冊另一個事件，名稱可以自定稱為<code>increment</code>，並啟用上面的 <code>incrementTotal</code></li><li>現在內部元件 click 事件有一個 <code>incrementCounter</code>，使用 <code>emit</code> 讓它可以觸發外層 <code>increment</code> 的實體事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;h2&gt;透過 emit 向外傳遞資訊&lt;/h2&gt;</span><br><span class="line">          我透過元件儲值了 &#123;&#123; cash &#125;&#125; 元</span><br><span class="line">          &lt;button class=&quot;btn btn-primary&quot; v-on:click=&quot;incrementTotal&quot;&gt;點我&lt;/button&gt;</span><br><span class="line">          &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt;</span><br><span class="line">        &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">         Vue.component(&apos;buttonCounter&apos;, &#123;</span><br><span class="line">           template: `&lt;div&gt;</span><br><span class="line">   &lt;button @click=&quot;incrementCounter&quot; class=&quot;btn btn-outline-primary&quot; &gt;增加 &#123;&#123; counter &#125;&#125; 元&lt;/button&gt;</span><br><span class="line">   &lt;input type=&quot;number&quot; class=&quot;form-control mt-2&quot; v-model=&quot;counter&quot;&gt;</span><br><span class="line"> &lt;/div&gt;`,</span><br><span class="line">           data: function () &#123;</span><br><span class="line">             return &#123;</span><br><span class="line">               counter: 1</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           methods: &#123;</span><br><span class="line">             incrementCounter: function () &#123;</span><br><span class="line">               this.$emit(&apos;increment&apos;, Number(this.counter));</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             cash: 300</span><br><span class="line">           &#125;,</span><br><span class="line">           methods: &#123;</span><br><span class="line">             incrementTotal: function (newNumber) &#123;</span><br><span class="line">               this.cash = this.cash + newNumber;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">       &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="Slot-插槽替換"><a href="#Slot-插槽替換" class="headerlink" title="Slot 插槽替換"></a>Slot 插槽替換</h1><p>有時候重複使用的元件需要替換部分內容，所以需要替換一些模版</p><ul><li>沒有插槽可以替換的狀態<br><img src="https://i.imgur.com/O9Ium4r.png" alt><br>插入的內容完全都會被模版替換，該內容不是模版的一部分所以無法顯示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;h2&gt;沒有插槽可替換的狀態&lt;/h2&gt;</span><br><span class="line">          &lt;no-slot-component&gt;</span><br><span class="line">            &lt;p&gt;這是一段插入的內容喔&lt;/p&gt;</span><br><span class="line">          &lt;/no-slot-component&gt;   </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>Slot 基礎範例<br>現在要把 <code>&lt;p&gt;使用這段取代原本的 Slot。&lt;/p&gt;</code> 放進元件內。所以我們在元件內新增一個 <code>slot</code> 標籤</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;single-slot-component&gt;</span><br><span class="line">            &lt;p&gt;使用這段取代原本的 Slot。&lt;/p&gt;</span><br><span class="line">&lt;/single-slot-component&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type=&quot;text/x-template&quot; id=&quot;singleSlotComponent&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;alert alert-warning&quot;&gt;</span><br><span class="line">  &lt;h6&gt;我是一個元件&lt;/h6&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    如果沒有內容，則會顯示此段落。</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">         Vue.component(&apos;no-slot-component&apos;, &#123;</span><br><span class="line">           template: &apos;#noSlotComponent&apos;,</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         Vue.component(&apos;single-slot-component&apos;, &#123;</span><br><span class="line">           template: &apos;#singleSlotComponent&apos;,</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         Vue.component(&apos;named-slot-component&apos;, &#123;</span><br><span class="line">           template: &apos;#namedSlotComponent&apos;,</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;&#125;</span><br><span class="line">         &#125;);</span><br><span class="line">       &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/yMzWEoa.png" alt></p><ul><li>具名插槽<br>有時有大量內容需要取代而且分布在元件不同地方。我們在 <code>templete</code> 的 <code>slot</code> 標籤加上自定義的名稱做對應。並在實體上加上相同的屬性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;named-slot-component&gt;</span><br><span class="line">           &lt;header slot=&quot;header&quot;&gt;替換的 Header&lt;/header&gt;</span><br><span class="line">           &lt;template&gt;替換的 Footer&lt;/template&gt;</span><br><span class="line">           &lt;template slot=&quot;btn&quot;&gt;按鈕內容&lt;/template&gt;</span><br><span class="line">           &lt;p&gt;其餘的內容&lt;/p&gt;</span><br><span class="line">         &lt;/named-slot-component&gt;</span><br></pre></td></tr></table></figure><p>附註：如果不希望標籤像這樣輸出的話，就使用 <code>templete</code><br><img src="https://i.imgur.com/CUAQpzG.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        &lt;script type=&quot;text/x-template&quot; id=&quot;namedSlotComponent&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;card my-3&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;card-header&quot;&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;這段是預設的文字&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">    &lt;slot&gt;</span><br><span class="line">      &lt;h5 class=&quot;card-title&quot;&gt;Special title treatment&lt;/h5&gt;</span><br><span class="line">      &lt;p class=&quot;card-text&quot;&gt;With supporting text below as a natural lead-in to additional content.&lt;/p&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;btn&quot;&gt;spanGo somewhere&lt;/slot&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;card-footer&quot;&gt;</span><br><span class="line">    &lt;div&gt;這是預設的 Footer&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">         Vue.component(&apos;no-slot-component&apos;, &#123;</span><br><span class="line">           template: &apos;#noSlotComponent&apos;,</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         Vue.component(&apos;single-slot-component&apos;, &#123;</span><br><span class="line">           template: &apos;#singleSlotComponent&apos;,</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         Vue.component(&apos;named-slot-component&apos;, &#123;</span><br><span class="line">           template: &apos;#namedSlotComponent&apos;,</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;&#125;</span><br><span class="line">         &#125;);</span><br><span class="line">       &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-is-動態切換組件"><a href="#使用-is-動態切換組件" class="headerlink" title="使用 is 動態切換組件"></a>使用 is 動態切換組件</h1><p>在 Vue 應用程式的 current 變數裡的 <code>primary-component</code>，切換成 <code>danger-component</code>，並透過  <code>:is</code> 動態切換元件內容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;mt-3&quot;&gt;</span><br><span class="line">            &lt;!-- &lt;primary-component :data=&quot;item&quot; v-if=&quot;current === &apos;primary-component&apos;&quot;&gt;&lt;/primary-component&gt;</span><br><span class="line">            &lt;danger-component :data=&quot;item&quot; v-if=&quot;current === &apos;danger-component&apos;&quot;&gt;&lt;/danger-component&gt; --&gt;</span><br><span class="line">            &lt;div :is=&quot;current&quot; :data=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">         Vue.component(&apos;primary-component&apos;, &#123;</span><br><span class="line">           props: [&apos;data&apos;],</span><br><span class="line">           template: &apos;#primaryComponent&apos;,</span><br><span class="line">         &#125;);</span><br><span class="line">         Vue.component(&apos;danger-component&apos;, &#123;</span><br><span class="line">           props: [&apos;data&apos;],</span><br><span class="line">           template: &apos;#dangerComponent&apos;,</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             item: &#123;</span><br><span class="line">               header: &apos;這裡是 header&apos;,</span><br><span class="line">               title: &apos;這裡是 title&apos;,</span><br><span class="line">               text: &apos;Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim perferendis illo reprehenderit ex natus earum explicabo modi voluptas cupiditate aperiam, quasi quisquam mollitia velit ut odio vitae atque incidunt minus?&apos;</span><br><span class="line">             &#125;,</span><br><span class="line">             current: &apos;primary-component&apos;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">       &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue 的每一個元件都可以獨立儲存各自的狀態，以下是一個元件的範例，此範例以反引號來定義元件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念 [3] - 常見表單與資料的綁定方式</title>
    <link href="http://yoursite.com/2019/07/10/2019-07-10-2/"/>
    <id>http://yoursite.com/2019/07/10/2019-07-10-2/</id>
    <published>2019-07-09T16:00:00.000Z</published>
    <updated>2019-07-15T07:20:17.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-v-model-綁定-input-輸入字串"><a href="#使用-v-model-綁定-input-輸入字串" class="headerlink" title="使用 v-model 綁定 input 輸入字串"></a>使用 v-model 綁定 input 輸入字串</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;h4&gt;字串&lt;/h4&gt;</span><br><span class="line">          &#123;&#123; text &#125;&#125;</span><br><span class="line">          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">          &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-v-model-綁定-textarea-輸入字串"><a href="#使用-v-model-綁定-textarea-輸入字串" class="headerlink" title="使用 v-model 綁定 textarea 輸入字串"></a>使用 v-model 綁定 textarea 輸入字串</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;pre&gt;&#123;&#123; textarea &#125;&#125;&lt;/pre&gt;</span><br><span class="line">          &lt;textarea cols=&quot;30&quot; rows=&quot;3&quot; class=&quot;form-control&quot; v-model=&quot;textarea&quot;&gt;</span><br><span class="line">          &lt;/textarea&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>運用 checkbox </li></ul><p>checkbox 的原始預設值是 true/false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check1&quot; v-model=&quot;checkbox1&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;check1&quot;&gt; 你要不要看電影 &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="v-model-與-v-for-的表單運用-以陣列方式運用-checkbox："><a href="#v-model-與-v-for-的表單運用-以陣列方式運用-checkbox：" class="headerlink" title="v-model 與 v-for 的表單運用:以陣列方式運用 checkbox："></a>v-model 與 v-for 的表單運用:以陣列方式運用 checkbox：</h1><p>先用 v-model 取出不同的值，再加入空陣列 checkboxArray裡，接下來用 v-for 取出值渲染在畫面上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check2&quot; value=&quot;雞&quot; v-model=&quot;checkboxArray&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;check2&quot;&gt;雞&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check3&quot; value=&quot;豬&quot; v-model=&quot;checkboxArray&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;check3&quot;&gt;豬&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check4&quot; value=&quot;牛&quot; v-model=&quot;checkboxArray&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;check4&quot;&gt;牛&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;p&gt;晚餐火鍋裡有 &lt;span v-for=&quot;item in checkboxArray&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="運用-radio"><a href="#運用-radio" class="headerlink" title="運用 radio"></a>運用 radio</h1><p>使用方式與上面雷同，先用 v-model 取出不同的值，再加入字串 singleRadio ，接下來用 v-for 取出值渲染在畫面上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; class=&quot;form-check-input&quot; id=&quot;radio2&quot; value=&quot;雞&quot; v-model=&quot;singleRadio&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;radio2&quot;&gt;雞&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;radio&quot; class=&quot;form-check-input&quot; id=&quot;radio3&quot; value=&quot;豬&quot; v-model=&quot;singleRadio&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;radio3&quot;&gt;豬&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;radio&quot; class=&quot;form-check-input&quot; id=&quot;radio4&quot; value=&quot;牛&quot; v-model=&quot;singleRadio&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;radio4&quot;&gt;牛&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;p&gt;晚餐火鍋裡有 &lt;span v-for=&quot;item in singleRadio&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="運用-select"><a href="#運用-select" class="headerlink" title="運用 select"></a>運用 select</h1><p> option 的保留為空的預設值，亦同樣以 v-model 取出不同的值，再加入字串 selected 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=&quot;&quot; id=&quot;&quot; class=&quot;form-control&quot; v-model=&quot;selected&quot;&gt;</span><br><span class="line">            &lt;option value=&quot;&quot; disabled&gt;--請選擇--&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;賤人&quot;&gt;--賤人--&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;美女&quot;&gt;--美女--&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="v-for-製作表單資料"><a href="#v-for-製作表單資料" class="headerlink" title="v-for 製作表單資料"></a>v-for 製作表單資料</h1><ul><li>直接在 option 裡面以 <code>v-for</code> 運用 <code>selectData</code> </li><li>value 直接用 <code>item</code>繪製 (value 是動態屬性因此要加 v-bind)</li><li>直接插入 item 在花括號裡面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=&quot;&quot; id=&quot;&quot; class=&quot;form-control&quot; v-model=&quot;selected2&quot;&gt;</span><br><span class="line">            &lt;option disabled value=&quot;&quot;&gt;請選擇&lt;/option&gt;</span><br><span class="line">            &lt;option :value=&quot;item&quot; v-for=&quot;item in selectData&quot;&gt;</span><br><span class="line">              &#123;&#123;item&#125;&#125;</span><br><span class="line">            &lt;/option&gt;</span><br><span class="line">          &lt;/select&gt;</span><br><span class="line">          &lt;p&gt;小明喜歡的女生是 &#123;&#123; selected2 &#125;&#125;。&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">         var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             singleRadio: &apos;&apos;,</span><br><span class="line">             selected: &apos;&apos;,</span><br><span class="line">             selectData: [&apos;小美&apos;, &apos;可愛小妞&apos;, &apos;漂亮阿姨&apos;],</span><br><span class="line">             selected2: &apos;&apos;,</span><br><span class="line">             multiSelected: [],</span><br><span class="line">             sex: &apos;男生&apos;,</span><br><span class="line"></span><br><span class="line">             // 修飾符</span><br><span class="line">             lazyMsg: &apos;&apos;,</span><br><span class="line">             age: &apos;&apos;,</span><br><span class="line">             trimMsg: &apos;&apos;</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;);</span><br><span class="line">       &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="v-for-製作多選"><a href="#v-for-製作多選" class="headerlink" title="v-for 製作多選"></a>v-for 製作多選</h1><p>在 <code>select</code> 元素上加上 <code>multiple</code>屬性，並透過 shift 與 cmc 選擇</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;select name=&quot;&quot; id=&quot;&quot; class=&quot;form-control&quot; multiple v-model=&quot;multiSelected&quot;&gt;</span><br><span class="line">          &lt;option value=&quot;小美&quot;&gt;小美&lt;/option&gt;</span><br><span class="line">          &lt;option value=&quot;可愛小妞&quot;&gt;可愛小妞&lt;/option&gt;</span><br><span class="line">          &lt;option value=&quot;漂亮阿姨&quot;&gt;漂亮阿姨&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">        &lt;p&gt;小明喜歡的女生是 &lt;span v-for=&quot;item in multiSelected&quot;&gt;&#123;&#123; item &#125;&#125; &lt;/span&gt;。&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">         var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             singleRadio: &apos;&apos;,</span><br><span class="line">             selected: &apos;&apos;,</span><br><span class="line">             selectData: [&apos;小美&apos;, &apos;可愛小妞&apos;, &apos;漂亮阿姨&apos;],</span><br><span class="line">             selected2: &apos;&apos;,</span><br><span class="line">             multiSelected: [],</span><br><span class="line">             sex: &apos;男生&apos;,</span><br><span class="line"></span><br><span class="line">             // 修飾符</span><br><span class="line">             lazyMsg: &apos;&apos;,</span><br><span class="line">             age: &apos;&apos;,</span><br><span class="line">             trimMsg: &apos;&apos;</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;);</span><br><span class="line">       &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="複選框"><a href="#複選框" class="headerlink" title="複選框"></a>複選框</h1><p>在 input 元素上加上布林屬性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">           &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;sex&quot; v-model=&quot;sex&quot; true-value=&quot;男生&quot; false-value=&quot;女生&quot;&gt;</span><br><span class="line">           &lt;label class=&quot;form-check-label&quot; for=&quot;sex&quot;&gt;&#123;&#123; sex &#125;&#125;&lt;/label&gt;</span><br><span class="line">         &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">         var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             singleRadio: &apos;&apos;,</span><br><span class="line">             selected: &apos;&apos;,</span><br><span class="line">             selectData: [&apos;小美&apos;, &apos;可愛小妞&apos;, &apos;漂亮阿姨&apos;],</span><br><span class="line">             selected2: &apos;&apos;,</span><br><span class="line">             multiSelected: [],</span><br><span class="line">             sex: &apos;男生&apos;,</span><br><span class="line"></span><br><span class="line">             // 修飾符</span><br><span class="line">             lazyMsg: &apos;&apos;,</span><br><span class="line">             age: &apos;&apos;,</span><br><span class="line">             trimMsg: &apos;&apos;</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;);</span><br><span class="line">       &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="表單與修飾符"><a href="#表單與修飾符" class="headerlink" title="表單與修飾符"></a>表單與修飾符</h1><ul><li>.lazmag </li></ul><p>必須實際 onChange 後才會將資料呈現在畫面上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; lazyMsg &#125;&#125;</span><br><span class="line">          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model.lazy=&quot;lazyMsg&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">              selectData: [&apos;小美&apos;, &apos;可愛小妞&apos;, &apos;漂亮阿姨&apos;],</span><br><span class="line">              selected2: &apos;&apos;,</span><br><span class="line">              multiSelected: [],</span><br><span class="line">              sex: &apos;男生&apos;,</span><br><span class="line"></span><br><span class="line">              // 修飾符</span><br><span class="line">              lazyMsg: &apos;&apos;,</span><br><span class="line">              age: &apos;&apos;,</span><br><span class="line">              trimMsg: &apos;&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>.number</li></ul><p>將 input 輸出轉為純數值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;&#123;&#123; age &#125;&#125;&lt;/pre&gt;</span><br><span class="line">   &lt;input type=&quot;number&quot; class=&quot;form-control&quot; v-model.number=&quot;age&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">              selectData: [&apos;小美&apos;, &apos;可愛小妞&apos;, &apos;漂亮阿姨&apos;],</span><br><span class="line">              selected2: &apos;&apos;,</span><br><span class="line">              multiSelected: [],</span><br><span class="line">              sex: &apos;男生&apos;,</span><br><span class="line"></span><br><span class="line">              // 修飾符</span><br><span class="line">              lazyMsg: &apos;&apos;,</span><br><span class="line">              age: &apos;&apos;,</span><br><span class="line">              trimMsg: &apos;&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>.trim</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; trimMsg &#125;&#125;緊黏的文字</span><br><span class="line">      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model.trim=&quot;trimMsg&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">              selectData: [&apos;小美&apos;, &apos;可愛小妞&apos;, &apos;漂亮阿姨&apos;],</span><br><span class="line">              selected2: &apos;&apos;,</span><br><span class="line">              multiSelected: [],</span><br><span class="line">              sex: &apos;男生&apos;,</span><br><span class="line"></span><br><span class="line">              // 修飾符</span><br><span class="line">              lazyMsg: &apos;&apos;,</span><br><span class="line">              age: &apos;&apos;,</span><br><span class="line">              trimMsg: &apos;&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用-v-model-綁定-input-輸入字串&quot;&gt;&lt;a href=&quot;#使用-v-model-綁定-input-輸入字串&quot; class=&quot;headerlink&quot; title=&quot;使用 v-model 綁定 input 輸入字串&quot;&gt;&lt;/a&gt;使用 v-model 綁定 
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念 [1] - 環境建立、指令與修飾符</title>
    <link href="http://yoursite.com/2019/07/09/2019-07-09/"/>
    <id>http://yoursite.com/2019/07/09/2019-07-09/</id>
    <published>2019-07-08T16:00:00.000Z</published>
    <updated>2019-07-15T07:47:55.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="環境建立"><a href="#環境建立" class="headerlink" title="環境建立"></a>環境建立</h1><p>Vue 的載入有 2 個版本，可以使用官網提供的CDN快速引入：</p><p>開發版本- 包含開發者工具、完整的警告、錯誤提示，適合開發時使用<br>生產版本- 刪除了警告，將上述開發工具都拔除，盡量縮小它的體積，適合正式發布時使用。</p><p>為了學習 Vue 的開發，因此我們選擇開發版本，並且在 script 標籤引入 vue.js 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//這樣這裡就可以準備撰寫vue的檔案啦!</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="建立-Vue-應用程式"><a href="#建立-Vue-應用程式" class="headerlink" title="建立 Vue 應用程式"></a>建立 Vue 應用程式</h1><p>建立 Vue 的應用程式，通常是以id來命名 (ex:app)，並且在javascript的地方以 new 初始化 vue，裡面放入一個物件，以el指定剛才命名的id app，這裡的 el 名稱，就是與後面 HTML 綁定的 id 名稱相同。</p><p>同時，在應用程式生成之後，必須綁定一個 HTML 元素。並在 data 建立一個物件放入資料，接著在html元素中以兩層花括號的方式指定要顯示的資料名稱，接著就會在畫面上呈顯出資料的部分。範例如下：</p><ul><li><p>HTML 部份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;app&apos;&gt;</span><br><span class="line">&#123;&#123;text&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>JavaScript 部份</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;some words&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><h1 id="不可建立巢狀應用程式"><a href="#不可建立巢狀應用程式" class="headerlink" title="不可建立巢狀應用程式"></a>不可建立巢狀應用程式</h1><p>要注意 Vue 雖然可以在同一個頁面建立多個應用程式，但是不能建立如下的巢狀結構，否則第二個應用程式會無效</p><ul><li><p>HTML 部份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;app&apos;&gt;</span><br><span class="line">&#123;&#123;text&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;div id=&apos;app2&apos;&gt;</span><br><span class="line">&#123;&#123;text2&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>JavaScript 部份</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;some words&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">var app2 = new Vue(&#123;</span><br><span class="line">            el: &quot;#app2&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text2: &apos;some words&apos;</span><br><span class="line">            &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h1 id="MVVM-與雙向自動綁定"><a href="#MVVM-與雙向自動綁定" class="headerlink" title="MVVM 與雙向自動綁定"></a>MVVM 與雙向自動綁定</h1><p>Vue 是受 MVVM 風格啟發的一套雙向數據綁定的 Javascript框架。MVVM 是一種軟體架構模式 </p><p><img src="https://i.imgur.com/MESxq2B.png" alt></p><p>它的核心只關心視圖層 (View)，它的核心是 MVVM 中的 VM，也就是 ViewModel。ViewModel負責連接 View 和 Model，保證視圖和數據的一致性。但我們在使用 Vue 的時候，只會利用 修改 Model 來影響視圖，是以資料狀態操作畫面，與例如 jQuery 以操作 DOM 方式改變畫面的方式不同。 </p><ul><li>模型<br>模型是指代表真實狀態內容的領域模型（物件導向），或指代表內容的資料存取層（以資料為中心）。</li><li>視圖<br>就像在MVC和MVP模式中一樣，視圖是用戶在螢幕上看到的結構、布局和外觀（UI）。</li><li>視圖模型<br>視圖模型是暴露公共屬性和命令的視圖的抽象。MVVM沒有MVC模式的控制器，也沒有MVP模式的presenter，有的是一個繫結器。在視圖模型中，繫結器在視圖和資料繫結器之間進行通訊。</li></ul><ol><li>使用雙花括號與資料串接</li><li>使用 v-model 綁定 HTML 屬性</li><li>使用 v-text 直接將資料寫入畫面</li><li>使用 v-html 除了將資料寫入畫面，還可修改 HTML 結構</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- HTML 部份</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &#123;&#123;message&#125;&#125;</span><br><span class="line">          &lt;div v-html=&quot;message&quot;&gt;&lt;/div&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- JavaScript 部份</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            // 在此建立資料內容</span><br><span class="line"></span><br><span class="line">            data: &#123;</span><br><span class="line">              message: &apos;&lt;span&gt;哈囉&lt;span&gt;&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="指令-Directives"><a href="#指令-Directives" class="headerlink" title="指令 (Directives)"></a>指令 (Directives)</h1><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><pre><code>透過指令 v-bind 的方式，將資料反應在HTML屬性上，更新 HTML 屬性。v-bind 是 Vue.js 裡面還蠻重要的功能，它可以用來綁定DOM元素中的屬性，並且將屬性的值交由Vue.js來控管，因此我們便可以動態的去綁定、控制屬性，進而使得該元素變成是可控制的元素。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;img v-bind:src=&quot;imgSrc&quot; v-bind:class=&quot;className&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              imgSrc: &apos;https://images.unsplash.com/photo-1479568933336-ea01829af8de?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=d9926ef56492b20aea8508ed32ec6030&amp;auto=format&amp;fit=crop&amp;w=2250&amp;q=80&apos;,</span><br><span class="line">              className: &apos;img-fluid&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>  使用 v-for 來呈現資料，動態產生多筆資料在畫面上。 這個方法就類似用 forEach 將陣列（list) 的值一一取出放到變數 (item) 裡，也可以再加上索引值 (index)。<br>  透過v-for的方式，我們可以將資料中的陣列遍歷出來，作法是在v-for後面的數值中，取一個任意的名稱(ex person)作為代表，取用方式如同一般我們要取出物件中的value一樣。<br>  另外也可以透過第二個參數的部分(ex index)來取得該筆資料的實際索引值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;pre&gt;&#123;&#123;list&#125;&#125;&lt;/pre&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;（item,index) in list&quot; &gt;</span><br><span class="line">              &#123;&#123;index+1&#125;&#125;-&#123;&#123;item.name&#125;&#125;年齡是&#123;&#123;item.age&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              list: [&#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  age: 16</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;媽媽&apos;,</span><br><span class="line">                  age: 38,</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-for-在陣列和物件的迴圈的運用"><a href="#v-for-在陣列和物件的迴圈的運用" class="headerlink" title="v-for 在陣列和物件的迴圈的運用"></a>v-for 在陣列和物件的迴圈的運用</h3><p>使用 objectData 的時候，索引是物件的屬性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">           &lt;li v-for=&quot;(item, key) in objectData&quot;&gt;</span><br><span class="line">             &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲</span><br><span class="line">           &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;ul&gt;</span><br><span class="line">           &lt;li v-for=&quot;(item, key) in arrayData&quot;&gt;</span><br><span class="line">             &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲</span><br><span class="line">           &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;list-item&apos;, &#123;</span><br><span class="line">           template: `</span><br><span class="line">   &lt;li&gt;</span><br><span class="line">     &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲</span><br><span class="line">   &lt;/li&gt;</span><br><span class="line"> `,</span><br><span class="line">           props: [&apos;item&apos;]</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             arrayData: [&#123;</span><br><span class="line">                 name: &apos;小明&apos;,</span><br><span class="line">                 age: 16</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                 name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                 age: 24</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                 name: &apos;杰倫&apos;,</span><br><span class="line">                 age: 20</span><br><span class="line">               &#125;</span><br><span class="line">             ],</span><br><span class="line">             objectData: &#123;</span><br><span class="line">               ming: &#123;</span><br><span class="line">                 name: &apos;小明&apos;,</span><br><span class="line">                 age: 16</span><br><span class="line">               &#125;,</span><br><span class="line">               auntie: &#123;</span><br><span class="line">                 name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                 age: 24</span><br><span class="line">               &#125;,</span><br><span class="line">               jay: &#123;</span><br><span class="line">                 name: &apos;杰倫&apos;,</span><br><span class="line">                 age: 20</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             filterArray: [],</span><br><span class="line">             filterText: &apos;&apos;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p> <img src="https://i.imgur.com/5HFiqxL.png" alt></p><h3 id="v-for-與-key"><a href="#v-for-與-key" class="headerlink" title="v-for 與 key"></a>v-for 與 key</h3><p>Vue 在切換畫面的時候，是部份置換，所以下面反轉陣列的例子在切換 input 的時候，不會完整切換 DOM 元素，所以這裡使用 <code>key</code> 來改善這個問題</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">         &lt;li v-for=&quot;(item, key) in arrayData&quot; :key=&quot;item.age&quot;&gt;</span><br><span class="line">           &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">         &lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">       &lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;reverseArray&quot;&gt;反轉陣列&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;list-item&apos;, &#123;</span><br><span class="line">           template: `</span><br><span class="line">   &lt;li&gt;</span><br><span class="line">     &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲</span><br><span class="line">   &lt;/li&gt;</span><br><span class="line"> `,props: [&apos;item&apos;]</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             arrayData: [&#123;</span><br><span class="line">                 name: &apos;小明&apos;,</span><br><span class="line">                 age: 16</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                 name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                 age: 24</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                 name: &apos;杰倫&apos;,</span><br><span class="line">                 age: 20</span><br><span class="line">               &#125;</span><br><span class="line">             ],</span><br><span class="line">             objectData: &#123;</span><br><span class="line">               ming: &#123;</span><br><span class="line">                 name: &apos;小明&apos;,</span><br><span class="line">                 age: 16</span><br><span class="line">               &#125;,</span><br><span class="line">               auntie: &#123;</span><br><span class="line">                 name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                 age: 24</span><br><span class="line">               &#125;,</span><br><span class="line">               jay: &#123;</span><br><span class="line">                 name: &apos;杰倫&apos;,</span><br><span class="line">                 age: 20</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             filterArray: [],</span><br><span class="line">             filterText: &apos;&apos;</span><br><span class="line">           &#125;,methods: &#123;</span><br><span class="line">           </span><br><span class="line">             reverseArray: function () &#123;</span><br><span class="line">               this.arrayData.reverse()</span><br><span class="line">               console.log(this.arrayData)</span><br><span class="line">             &#125;,</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure><h3 id="v-for-與資料過濾"><a href="#v-for-與資料過濾" class="headerlink" title="v-for 與資料過濾"></a>v-for 與資料過濾</h3><p><code>filterArry</code> 一開始是一個空的陣列，現在新增一個 <code>filterText</code>，以輸入的文字，輸出後第一個出現的是我們輸入的資料、陣列迴圈內容，如果是 match 狀態就會回傳一個陣列（只要在filter裡是回傳 true，就會將 item push 回 filterArray)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;filterText&quot; @keyup.enter=&quot;filterData&quot;&gt;</span><br><span class="line"> &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(item, key) in filterArray&quot; :key=&quot;item.age&quot;&gt;</span><br><span class="line">              &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>Vue.component(‘list-item’, {<br>            template: <code>&lt;li&gt;        歲    &lt;/li&gt;</code>,props: [‘item’]<br>          });</p><pre><code> var app = new Vue({   el: &apos;#app&apos;,   data: {     arrayData: [{         name: &apos;小明&apos;,         age: 16       },       {         name: &apos;漂亮阿姨&apos;,         age: 24       },       {         name: &apos;杰倫&apos;,         age: 20       }     ],     objectData: {       ming: {         name: &apos;小明&apos;,         age: 16       },       auntie: {         name: &apos;漂亮阿姨&apos;,         age: 24       },       jay: {         name: &apos;杰倫&apos;,         age: 20       }     },     filterArray: [],     filterText: &apos;&apos;   },   methods: {     filterData: function () {       var vm = this; //指向的是vue應用程式的this，因此可以直接取用data       vm.filterArray = vm.arrayData.filter(function (item) {       console.log(vm.filterText, item.name, item.name.match(vm.filterText))       });       return item.name.match(vm.filterText);     },} })</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 一些特殊例子下運用 v-for 不被允許的狀況</span><br><span class="line"></span><br><span class="line">- 直接修改陣列長度</span><br></pre></td></tr></table></figure><p>&lt;button class=”btn btn-outline-primary” @click=”cantWork”&gt;無法運行<br>          <ul><br>            <li v-for="(item, key) in arrayData" :key="item.age"><br>               -   歲 <input type="text"><br>            </li><br>          </ul></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">Vue.component(&apos;list-item&apos;, &#123;</span><br><span class="line">            template: `</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  `,props: [&apos;item&apos;]</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              arrayData: [&#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  age: 16</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                  age: 24</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;杰倫&apos;,</span><br><span class="line">                  age: 20</span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              objectData: &#123;</span><br><span class="line">                ming: &#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  age: 16</span><br><span class="line">                &#125;,</span><br><span class="line">                auntie: &#123;</span><br><span class="line">                  name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                  age: 24</span><br><span class="line">                &#125;,</span><br><span class="line">                jay: &#123;</span><br><span class="line">                  name: &apos;杰倫&apos;,</span><br><span class="line">                  age: 20</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              filterArray: [],</span><br><span class="line">              filterText: &apos;&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            methods: &#123;</span><br><span class="line">            </span><br><span class="line">             cantWork: function () &#123;</span><br><span class="line">                this.arrayData.length = 0;</span><br><span class="line">                console.log(this.arrayData);</span><br><span class="line">               </span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure><p>//雖然陣列長度的「數字」被修改為 0，但畫面上的資料並沒有因此消失<br><img src="https://i.imgur.com/6JBc8gt.png" alt></p><ul><li>從陣列索引修改資料</li></ul><p>要操作陣列的資料，不能直接透過索引方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;cantWork&quot;&gt;無法運行&lt;/button&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(item, key) in arrayData&quot; :key=&quot;item.age&quot;&gt;</span><br><span class="line">              &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;list-item&apos;, &#123;</span><br><span class="line">            template: `</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  `,props: [&apos;item&apos;]</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              arrayData: [&#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  age: 16</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                  age: 24</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;杰倫&apos;,</span><br><span class="line">                  age: 20</span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              objectData: &#123;</span><br><span class="line">                ming: &#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  age: 16</span><br><span class="line">                &#125;,</span><br><span class="line">                auntie: &#123;</span><br><span class="line">                  name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                  age: 24</span><br><span class="line">                &#125;,</span><br><span class="line">                jay: &#123;</span><br><span class="line">                  name: &apos;杰倫&apos;,</span><br><span class="line">                  age: 20</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              filterArray: [],</span><br><span class="line">              filterText: &apos;&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            methods: &#123;</span><br><span class="line">            </span><br><span class="line">             cantWork: function () &#123;</span><br><span class="line">             this.arrayData[0]=&#123;</span><br><span class="line">                 name:&apos;小強&apos;;</span><br><span class="line">                 age:&apos;99&apos;,</span><br><span class="line">             &#125;</span><br><span class="line">         console.log(this.arrayData);</span><br><span class="line">         &#125;&#125;</span><br><span class="line">            )</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/COHEbEU.png" alt></p><h4 id="解決方式：如果要操作的資料不在原有資料結構裡，用-Vue-set-解決，寫進資料裡面讓它可重新被監控。"><a href="#解決方式：如果要操作的資料不在原有資料結構裡，用-Vue-set-解決，寫進資料裡面讓它可重新被監控。" class="headerlink" title="解決方式：如果要操作的資料不在原有資料結構裡，用 Vue.set() 解決，寫進資料裡面讓它可重新被監控。"></a>解決方式：如果要操作的資料不在原有資料結構裡，用 Vue.set() 解決，寫進資料裡面讓它可重新被監控。</h4><pre><code>Vue.set( target, propertyName/index, value )参数：{Object | Array} target{string | number} propertyName/index{any} value</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">            </span><br><span class="line">           Vue.set(this.arrayData, 0, &#123;</span><br><span class="line">                  name: &apos;joy&apos;,</span><br><span class="line">                  age: 33</span><br><span class="line">                &#125;);</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><ul><li>使用純數字迴圈<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;item in 9&quot;&gt;</span><br><span class="line">              &#123;&#123; item &#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><pre><code>透過v-if的情況，依據 v-if 後的條件是否為true時，決定該元素是否會顯示，若否則相反，並且該元素實際上會從DOM上消失。就是在 v-for 之上再加上一個判斷式。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;pre&gt;&#123;&#123;list&#125;&#125;&lt;/pre&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;（item,index) in list&quot; v-if=&quot;item.age&lt;25&quot;&gt;</span><br><span class="line">              &#123;&#123;index+1&#125;&#125;-&#123;&#123;item.name&#125;&#125;年齡是&#123;&#123;item.age&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              list: [&#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  age: 16</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;媽媽&apos;,</span><br><span class="line">                  age: 38,</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-v-if、v-else-切換物件呈現"><a href="#使用-v-if、v-else-切換物件呈現" class="headerlink" title="使用 v-if、v-else 切換物件呈現"></a>使用 v-if、v-else 切換物件呈現</h3><ul><li>這裡的例子也是上面所說的判斷式運用，以<code>v-if</code> 運用原本已經定義在資料結構裡的 <code>isSuccess</code></li><li>下方相鄰元素使用 <code>v-else</code> (代替 <code>isSuccess</code>)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;alert alert-success&quot; v-if=&quot;isSuccess&quot;&gt;成功!&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;alert alert-danger&quot; v-else&gt;失敗!&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;isSuccess&quot; v-model=&quot;isSuccess&quot;&gt;</span><br><span class="line">  &lt;label class=&quot;form-check-label&quot; for=&quot;isSuccess&quot;&gt;啟用元素狀態&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              isSuccess: true,</span><br><span class="line">              showTemplate: true,</span><br><span class="line"></span><br><span class="line">              link: &apos;a&apos;,</span><br><span class="line"></span><br><span class="line">              loginType: &apos;username&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">              toggleLoginType: function () &#123;</span><br><span class="line">                return this.loginType = this.loginType === &apos;username&apos; ? &apos;email&apos; : &apos;username&apos;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-else-if-製作分類頁籤"><a href="#v-else-if-製作分類頁籤" class="headerlink" title="v-else-if 製作分類頁籤"></a>v-else-if 製作分類頁籤</h3><ul><li>在 content 的元素上運用 <code>v-if</code> 和 <code>v-else-of</code> 判斷</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;nav nav-tabs&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">              &lt;a class=&quot;nav-link&quot; href=&quot;#&quot; :class=&quot;&#123;&apos;active&apos;:link==&apos;a&apos;&#125;&quot; @click.prevent=&quot;link=&apos;a&apos;&quot;&gt;標題一&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">              &lt;a class=&quot;nav-link&quot; href=&quot;#&quot; :class=&quot;&#123;&apos;active&apos;:link==&apos;b&apos;&#125;&quot; @click.prevent=&quot;link=&apos;b&apos;&quot;&gt;標題二&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">              &lt;a class=&quot;nav-link&quot; :class=&quot;&#123;&apos;active&apos;:link==&apos;c&apos;&#125;&quot; href=&quot;#&quot; @click.prevent=&quot;link=&apos;c&apos;&quot;&gt;標題三&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">          &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;div v-if=&quot;link==&apos;a&apos;&quot;&gt;Ａ&lt;/div&gt;</span><br><span class="line">            &lt;div v-else-if=&quot;link==&apos;b&apos;&quot;&gt;Ｂ&lt;/div&gt;</span><br><span class="line">            &lt;div v-else-if=&quot;link==&apos;c&apos;&quot;&gt;Ｃ&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              isSuccess: true,</span><br><span class="line">              showTemplate: true,</span><br><span class="line"></span><br><span class="line">              link: &apos;a&apos;,</span><br><span class="line"></span><br><span class="line">              loginType: &apos;username&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">              toggleLoginType: function () &#123;</span><br><span class="line">                return this.loginType = this.loginType === &apos;username&apos; ? &apos;email&apos; : &apos;username&apos;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-if-與-Key-的運用"><a href="#v-if-與-Key-的運用" class="headerlink" title="v-if 與 Key 的運用"></a>v-if 與 Key 的運用</h3><p> 由於 Vue 的部份置換特性，因此加上 key 值讓畫面完整切換</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-if=&quot;loginType === &apos;username&apos;&quot;&gt;</span><br><span class="line">            &lt;label&gt;Username&lt;/label&gt;</span><br><span class="line">            &lt;input class=&quot;form-control&quot; placeholder=&quot;Enter your username&quot; :key=&quot;1&quot;&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template v-else&gt;</span><br><span class="line">            &lt;label&gt;Email&lt;/label&gt;</span><br><span class="line">            &lt;input class=&quot;form-control&quot; placeholder=&quot;Enter your email address&quot; :key=&quot;2&quot;&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-outline-primary mt-3&quot; @click=&quot;toggleLoginType&quot;&gt;切換狀態&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              isSuccess: true,</span><br><span class="line">              showTemplate: true,</span><br><span class="line"></span><br><span class="line">              link: &apos;a&apos;,</span><br><span class="line"></span><br><span class="line">              loginType: &apos;username&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">              toggleLoginType: function () &#123;</span><br><span class="line">                return this.loginType = this.loginType === &apos;username&apos; ? &apos;email&apos; : &apos;username&apos;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-if-與-v-show-差異"><a href="#v-if-與-v-show-差異" class="headerlink" title="v-if 與 v-show 差異"></a>v-if 與 v-show 差異</h3><p><code>v-show</code> 是透過移除 <code>display:none</code> 切換畫面的顯示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;alert alert-success&quot; v-show=&quot;isSuccess&quot;&gt;成功!&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;alert alert-danger&quot; v-show=&quot;!isSuccess&quot;&gt;失敗!&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;isSuccess2&quot; v-model=&quot;isSuccess&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;isSuccess2&quot;&gt;啟用元素狀態&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              isSuccess: true,</span><br><span class="line">              showTemplate: true,</span><br><span class="line"></span><br><span class="line">              link: &apos;a&apos;,</span><br><span class="line"></span><br><span class="line">              loginType: &apos;username&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">              toggleLoginType: function () &#123;</span><br><span class="line">                return this.loginType = this.loginType === &apos;username&apos; ? &apos;email&apos; : &apos;username&apos;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/SgciFh1.png" alt></p><p>而 v-if 則是直接移除 DOM 元素，一次只會顯示一個 DOM 元素</p><p><img src="https://i.imgur.com/K2JfQ8N.png" alt></p><h3 id="v-for、v-if-的判斷式"><a href="#v-for、v-if-的判斷式" class="headerlink" title="v-for、v-if 的判斷式"></a>v-for、v-if 的判斷式</h3><p>v-for、v-if 一起寫在一個元素上的時候，會先執行 v-for 再執行 v-if </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(item, key) in arrayData&quot; v-if=&quot;item.age &lt;=20&quot;&gt;</span><br><span class="line">              &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;list-item&apos;, &#123;</span><br><span class="line">           template: `</span><br><span class="line">   &lt;li&gt;</span><br><span class="line">     &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲</span><br><span class="line">   &lt;/li&gt;</span><br><span class="line"> `,</span><br><span class="line">           props: [&apos;item&apos;]</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             arrayData: [&#123;</span><br><span class="line">                 name: &apos;小明&apos;,</span><br><span class="line">                 age: 16</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                 name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                 age: 24</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                 name: &apos;杰倫&apos;,</span><br><span class="line">                 age: 20</span><br><span class="line">               &#125;</span><br><span class="line">             ],</span><br><span class="line">             objectData: &#123;</span><br><span class="line">               ming: &#123;</span><br><span class="line">                 name: &apos;小明&apos;,</span><br><span class="line">                 age: 16</span><br><span class="line">               &#125;,</span><br><span class="line">               auntie: &#123;</span><br><span class="line">                 name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                 age: 24</span><br><span class="line">               &#125;,</span><br><span class="line">               jay: &#123;</span><br><span class="line">                 name: &apos;杰倫&apos;,</span><br><span class="line">                 age: 20</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             filterArray: [],</span><br><span class="line">             filterText: &apos;&apos;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h3 id="v-for-與元件"><a href="#v-for-與元件" class="headerlink" title="v-for 與元件"></a>v-for 與元件</h3><p>現在建議元件使用 v-for 都加上 key。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">            &lt;list-item :item=&quot;item&quot; v-for=&quot;(item, key) in arrayData&quot; :key=&quot;item.age&quot;&gt;&lt;/list-item&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="處理使用者互動行為-v-on"><a href="#處理使用者互動行為-v-on" class="headerlink" title="處理使用者互動行為 v-on"></a>處理使用者互動行為 v-on</h2><p>v-on 可以綁定 method 名稱，當然也需要在實例中 methods 中宣告相同名稱的 function。v-on顧名思義就是類似於原生js中的on事件，而使用方法一樣是要綁定的元素上，放一個v-on的屬性，例如，我們要在元素上定義一個點擊會alert一個提示的事件，我們就可以在後面寫上要觸發行為的條件(click)，並且在value的值內放入指定的method。<br>v-model 則是在 vue 中用來實現雙向綁定的方式。透過v-model綁定在元素上，我們可以創造一個雙向綁定資料的概念，也就是說假設我在表單組件input上設置v-model並綁定到data中的meesage上，他除了會即時顯示data.message中資料以外，我們在更動input中的數值時也會同步更改回data中message的value。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-primary mt-1&quot; v-on:click=&quot;reverseText&quot;&gt;反轉字串&lt;/button&gt;</span><br><span class="line">          &lt;div class=&quot;mt-3&quot;&gt;</span><br><span class="line">            &#123;&#123; newText &#125;&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              newText: &apos;&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 請在此撰寫 JavaScript</span><br><span class="line">            methods: &#123;</span><br><span class="line">              reverseText: function () &#123;</span><br><span class="line">                this.newText = this.text.split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-on-與-事件修飾符"><a href="#v-on-與-事件修飾符" class="headerlink" title="v-on 與 事件修飾符"></a>v-on 與 事件修飾符</h3><p>v-on 也可透過修飾符操作事件，在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。<br>Vue 提供了事件修飾符，包括：</p><p>.stop<br>.prevent<br>.capture<br>.self<br>.once<br>.passive</p><ul><li>此處在 v-on 之後透過修飾符取消預設行為</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">         &lt;button class=&quot;btn btn-primary mt-1&quot; v-on:click.prevent=&quot;reverseText&quot;&gt;反轉字串&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="v-on-與-按鍵修飾符"><a href="#v-on-與-按鍵修飾符" class="headerlink" title="v-on 與 按鍵修飾符"></a>v-on 與 按鍵修飾符</h3><p>Vue 允許為 v-on 在監聽鍵盤事件時添加按鍵修飾符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-on:keyup.enter=&quot;reverseText&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="用縮寫表示按鍵修飾符"><a href="#用縮寫表示按鍵修飾符" class="headerlink" title="用縮寫表示按鍵修飾符"></a>用縮寫表示按鍵修飾符</h3><p>v-on 可以 <code>＠</code> 符號來表示 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; ＠keyup.enter=&quot;reverseText&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>v-bind 可以用 <code>:</code> 表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;a :href=&quot;link&quot; class=&quot;btn btn-primary mt-1&quot; @click=&quot;reverseText&quot;&gt;反轉字串&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="v-on-與帶入參數"><a href="#v-on-與帶入參數" class="headerlink" title="v-on 與帶入參數"></a>v-on 與帶入參數</h3><p>如何透過參數將資料傳送到method，直接在 button 元素上帶入參數，所以每次點擊就會在方法裡增加數字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;item in arrayData&quot; class=&quot;my-2&quot;&gt;</span><br><span class="line">              &#123;&#123; item.name &#125;&#125; 有 &#123;&#123; item.cash &#125;&#125; 元</span><br><span class="line">              &lt;button class=&quot;btn btn-sm btn-outline-primary&quot; @click=&quot;storeMoney(item)&quot;&gt;儲值&lt;/button&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       var app = new Vue(&#123;</span><br><span class="line">         el: &apos;#app&apos;,</span><br><span class="line">         data: &#123;</span><br><span class="line">           arrayData: [&#123;</span><br><span class="line">               name: &apos;小明&apos;,</span><br><span class="line">               age: 16,</span><br><span class="line">               cash: 500</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">               name: &apos;漂亮阿姨&apos;,</span><br><span class="line">               age: 24,</span><br><span class="line">               cash: 1000</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">               name: &apos;杰倫&apos;,</span><br><span class="line">               age: 20,</span><br><span class="line">               cash: 5000</span><br><span class="line">             &#125;</span><br><span class="line">           ],</span><br><span class="line">           isRotate: false,</span><br><span class="line">           text: &apos;&apos;</span><br><span class="line">         &#125;,</span><br><span class="line">         methods: &#123;</span><br><span class="line">           changeRotate: function () &#123;</span><br><span class="line">             this.isRotate = !this.isRotate;</span><br><span class="line">           &#125;,</span><br><span class="line">           storeMoney: function (item) &#123;</span><br><span class="line">             item.cash = item.cash + 500;</span><br><span class="line">           &#125;,</span><br><span class="line">           trigger: function (name) &#123;</span><br><span class="line">             console.log(name, &apos;此事件被觸發了&apos;)</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         // 解答</span><br><span class="line">       &#125;);</span><br><span class="line">     &lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .box &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    transition: all .5s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .box.rotate &#123;</span><br><span class="line">    transform: rotate(45deg)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="v-class-動態切換-className"><a href="#v-class-動態切換-className" class="headerlink" title="v-class 動態切換 className"></a>v-class 動態切換 className</h2><p>可以傳給 v-bind:class 一個對象，動態切換 class：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        &lt;div class=&quot;alert alert-secondary&quot;&gt;</span><br><span class="line">          &lt;ol class=&quot;mb-0&quot;&gt;</span><br><span class="line">            &lt;li&gt;為 .box 動態加上 className &quot;rotate&quot;&lt;/li&gt;</span><br><span class="line">          &lt;/ol&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;box&quot; :class=&quot;&#123;&apos;rotate&apos;:isTransform&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">          &lt;hr&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;isTransform=!isTransform&quot;&gt;選轉物件&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              isTransform: false</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">          .box &#123;</span><br><span class="line">            transition: transform .5s;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          .box.rotate &#123;</span><br><span class="line">            transform: rotate(45deg)</span><br><span class="line">          &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;環境建立&quot;&gt;&lt;a href=&quot;#環境建立&quot; class=&quot;headerlink&quot; title=&quot;環境建立&quot;&gt;&lt;/a&gt;環境建立&lt;/h1&gt;&lt;p&gt;Vue 的載入有 2 個版本，可以使用官網提供的CDN快速引入：&lt;/p&gt;
&lt;p&gt;開發版本- 包含開發者工具、完整的警告、錯誤
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念 [2] - methods、computed、watch 的使用情境</title>
    <link href="http://yoursite.com/2019/07/09/2019-07-10-1/"/>
    <id>http://yoursite.com/2019/07/09/2019-07-10-1/</id>
    <published>2019-07-08T16:00:00.000Z</published>
    <updated>2019-07-15T07:57:31.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h1><ul><li><p>computed 方法，會將結果直接回傳存到變數裡面，而且這個變數可以直接使用在畫面上。在 computed 內的任何屬性都是 function 。 原始 data 結構的值若更動時，computed 裡面的值才會跟著更動。- computed 是在監控資料更動後，重新運算結果呈現於畫面上，一般來說不會修改資料，只會回傳用於畫面呈現的資料。- methods 就是互動的函式，需要觸發才會運作會用來修改資料內容</p></li><li><p>methods 就是互動的函式，需要觸發才會運作<br>會用來修改資料內容</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-primary mt-1&quot;&gt;反轉字串&lt;/button&gt;</span><br><span class="line">          &lt;div class=&quot;mt-3&quot;&gt;</span><br><span class="line">            &lt;!-- &#123;&#123; text.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;  表達式太冗長可以直接代替成computed裡的屬性結果會相同--&gt;</span><br><span class="line">            &#123;&#123;reverseText&#125;&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &#123;&#123;reverseText&#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              newText: &apos;&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 請在此撰寫 JavaScript</span><br><span class="line">            computed: &#123;</span><br><span class="line">              reverseText: function () &#123;</span><br><span class="line">                return this.text.split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              &#125; </span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><h2 id="過濾陣列資料，運用-computed-取代-methods"><a href="#過濾陣列資料，運用-computed-取代-methods" class="headerlink" title="過濾陣列資料，運用 computed 取代 methods"></a>過濾陣列資料，運用 computed 取代 methods</h2><p>computed 是針對輸出到畫面上的內容，輸出前預先處理。資料可以透過括號與表達式呈現，但數量一多就不容易管理。因此透過變數直接將運算結果呈現在畫面上，是另一種作法。而透過事件觸發則是另一種</p><ul><li>arrayData(原始資料結構)</li><li>item 裡面的個別資料</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4&gt;Computed&lt;/h4&gt;</span><br><span class="line">       &lt;p&gt;使用 Computed 來過濾資料。&lt;/p&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;filterText&quot;&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">         &lt;li v-for=&quot;(item, key) in filterArray&quot; :key=&quot;item.age&quot;&gt;</span><br><span class="line">           &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">         &lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">       &lt;p&gt;使用 Computed 來呈現時間格式。&lt;/p&gt;</span><br><span class="line">       &lt;p&gt;</span><br><span class="line">         &#123;&#123;formatTime&#125;&#125;</span><br><span class="line">       &lt;/p&gt;</span><br><span class="line">       &lt;h4&gt;Watch&lt;/h4&gt;</span><br><span class="line">       &lt;p&gt;使用 trigger 來觸發旋轉 box、並在三秒後改變回來&lt;/p&gt;</span><br><span class="line">       &lt;div class=&quot;box&quot; :class=&quot;&#123;&apos;rotate&apos;: trigger &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">       &lt;hr&gt;</span><br><span class="line">       &lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;trigger=true&quot;&gt;Counter&lt;/button&gt;</span><br><span class="line">     &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              arrayData: [&#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  age: 16</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                  age: 24</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;杰倫&apos;,</span><br><span class="line">                  age: 20</span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              filterText: &apos;&apos;, //過濾資料並重新繪製</span><br><span class="line">              trigger: false, //按下 couter 按鈕後讓畫面產生變化</span><br><span class="line">              newDate: 0 // 運用 timestamp</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line">            filterArray: function () &#123;</span><br><span class="line">                 var vm = this;</span><br><span class="line">                 return vm.arrayData.filter(function(item) &#123;</span><br><span class="line">                   return item.name.match(vm.filterText);</span><br><span class="line">                 &#125;);</span><br><span class="line">               &#125;</span><br><span class="line">            </span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">         .box &#123;</span><br><span class="line">           transition: all .5s;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         .box.rotate &#123;</span><br><span class="line">           transform: rotate(45deg)</span><br><span class="line">         &#125;</span><br><span class="line">       &lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="使用-Computed-來呈現時間格式"><a href="#使用-Computed-來呈現時間格式" class="headerlink" title="使用 Computed 來呈現時間格式"></a>使用 Computed 來呈現時間格式</h2><ul><li>畫面運行完才會執行 mounted</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4&gt;Computed&lt;/h4&gt;</span><br><span class="line">       &lt;p&gt;使用 Computed 來過濾資料。&lt;/p&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;filterText&quot;&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">         &lt;li v-for=&quot;(item, key) in filterArray&quot; :key=&quot;item.age&quot;&gt;</span><br><span class="line">           &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">         &lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">       &lt;p&gt;使用 Computed 來呈現時間格式。&lt;/p&gt;</span><br><span class="line">       &lt;p&gt;</span><br><span class="line">         &#123;&#123;formatTime&#125;&#125;</span><br><span class="line">       &lt;/p&gt;</span><br><span class="line">       &lt;h4&gt;Watch&lt;/h4&gt;</span><br><span class="line">       &lt;p&gt;使用 trigger 來觸發旋轉 box、並在三秒後改變回來&lt;/p&gt;</span><br><span class="line">       &lt;div class=&quot;box&quot; :class=&quot;&#123;&apos;rotate&apos;: trigger &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">       &lt;hr&gt;</span><br><span class="line">       &lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;trigger=true&quot;&gt;Counter&lt;/button&gt;</span><br><span class="line">     &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              arrayData: [&#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  age: 16</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                  age: 24</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;杰倫&apos;,</span><br><span class="line">                  age: 20</span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              filterText: &apos;&apos;, //過濾資料並重新繪製</span><br><span class="line">              trigger: false, //按下 couter 按鈕後讓畫面產生變化</span><br><span class="line">              newDate: 0 // 運用 timestamp</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line">            filterArray: function () &#123;</span><br><span class="line">                 var vm = this;</span><br><span class="line">                 return vm.arrayData.filter(function(item) &#123;</span><br><span class="line">                   return item.name.match(vm.filterText);</span><br><span class="line">                 &#125;);</span><br><span class="line">               &#125;,</span><br><span class="line">               formatTime: function () &#123;</span><br><span class="line"></span><br><span class="line">                console.log(this.newDate)</span><br><span class="line">                var dates = new Date(this.newDate * 1000);</span><br><span class="line">                var year = dates.getFullYear();</span><br><span class="line">                var month = dates.getMonth() + 1;</span><br><span class="line">                var date = dates.getDate() + 1;</span><br><span class="line">                var hours = dates.getHours();</span><br><span class="line">                var minutes = dates.getMinutes();</span><br><span class="line">                var seconds = dates.getSeconds();</span><br><span class="line">                return `$&#123;year&#125;/$&#123;month&#125;/$&#123;date&#125; $&#123;hours&#125;:$&#123;minutes&#125;:$&#123;seconds&#125;`</span><br><span class="line">              &#125;&#125;,</span><br><span class="line"></span><br><span class="line">mounted: function () &#123;</span><br><span class="line">              this.newDate = Math.floor(Date.now() / 1000);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">         .box &#123;</span><br><span class="line">           transition: all .5s;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         .box.rotate &#123;</span><br><span class="line">           transform: rotate(45deg)</span><br><span class="line">         &#125;</span><br><span class="line">       &lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h1><p>監控特定變數，當變數變化的時候，執行特定事件。以下範例是 trigger 變化的時候監控 trigger。並在 3 秒後將 trigger 再改為 false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4&gt;Computed&lt;/h4&gt;</span><br><span class="line">       &lt;p&gt;使用 Computed 來過濾資料。&lt;/p&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;filterText&quot;&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">         &lt;li v-for=&quot;(item, key) in filterArray&quot; :key=&quot;item.age&quot;&gt;</span><br><span class="line">           &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">         &lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">       &lt;p&gt;使用 Computed 來呈現時間格式。&lt;/p&gt;</span><br><span class="line">       &lt;p&gt;</span><br><span class="line">         &#123;&#123;formatTime&#125;&#125;</span><br><span class="line">       &lt;/p&gt;</span><br><span class="line">       &lt;h4&gt;Watch&lt;/h4&gt;</span><br><span class="line">       &lt;p&gt;使用 trigger 來觸發旋轉 box、並在三秒後改變回來&lt;/p&gt;</span><br><span class="line">       &lt;div class=&quot;box&quot; :class=&quot;&#123;&apos;rotate&apos;: trigger &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">       &lt;hr&gt;</span><br><span class="line">       &lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;trigger=true&quot;&gt;Counter&lt;/button&gt;</span><br><span class="line">     &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              arrayData: [&#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  age: 16</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;漂亮阿姨&apos;,</span><br><span class="line">                  age: 24</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;杰倫&apos;,</span><br><span class="line">                  age: 20</span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              filterText: &apos;&apos;, //過濾資料並重新繪製</span><br><span class="line">              trigger: false, //按下 couter 按鈕後讓畫面產生變化</span><br><span class="line">              newDate: 0 // 運用 timestamp</span><br><span class="line">            &#125;,</span><br><span class="line">             watch: &#123;</span><br><span class="line">              trigger: function () &#123;</span><br><span class="line">                var vm = this;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                  vm.trigger = false</span><br><span class="line">                &#125;, 3000)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">         .box &#123;</span><br><span class="line">           transition: all .5s;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         .box.rotate &#123;</span><br><span class="line">           transform: rotate(45deg)</span><br><span class="line">         &#125;</span><br><span class="line">       &lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;computed&quot;&gt;&lt;a href=&quot;#computed&quot; class=&quot;headerlink&quot; title=&quot;computed&quot;&gt;&lt;/a&gt;computed&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;computed 方法，會將結果直接回傳存到變數裡面，而且這個變數可以直接
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 [Day29] - 物件、函數與 this</title>
    <link href="http://yoursite.com/2019/07/08/2019-07-08/"/>
    <id>http://yoursite.com/2019/07/08/2019-07-08/</id>
    <published>2019-07-07T16:00:00.000Z</published>
    <updated>2019-07-14T05:10:11.799Z</updated>
    
    <content type="html"><![CDATA[<p>函數是一種物件，具有屬性及其他特徵。回到執行環境來看，在函數被呼叫的時候，底層究竟發生什麼變化呢？ 現在要繼續深究物件、函數以及有時讓人感到困惑的關鍵字 ”this” 之間的關係。</p><h3 id="當函式被呼叫的時候"><a href="#當函式被呼叫的時候" class="headerlink" title="當函式被呼叫的時候"></a>當函式被呼叫的時候</h3><p>必須放在心中的是，當函數被呼叫的時候，會創造新的執行環境，放進執行堆，這決定了程式的執行方式。如果想一想執行環境，關注在函數物件的程式部分，當我執行程式屬性裡面的程式會怎麼樣？</p><p>我們知道執行環境被創造的時候，每個執行環境有自己的變數環境，也就是創建在函數裡面的變數所在的地方，它可以參照到外部詞彙環境，也就是它在程式碼當中的實際位置，讓它能夠隨著範圍鏈一路往下找，直到全域環境為止。</p><p>但是每當 在 JavaScript 引擎裡，每一次有一個執行環境創造的時候，每當函數被執行，JavaScript 引擎會給我們一個不曾宣告的<code>this</code> 變數。</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><code>this</code> 會根據函數被呼叫的方式，而指向不同的物件，這是相當重要的觀念。</p><h3 id="以直接取用的方式觀察-this"><a href="#以直接取用的方式觀察-this" class="headerlink" title="以直接取用的方式觀察 this"></a>以直接取用的方式觀察 this</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(this)</span><br></pre></td></tr></table></figure><p>在瀏覽器內執行，直接取用<code>this</code> ， 它會指向全域物件 <code>window</code> 物件。因為 <code>this</code> 會指向全域物件，在瀏覽器內的全域物件就是 window 物件。</p><p><img src="https://i.imgur.com/BaS1SUh.png" alt></p><h3 id="從函數陳述句觀察-this"><a href="#從函數陳述句觀察-this" class="headerlink" title="從函數陳述句觀察 this"></a>從函數陳述句觀察 this</h3><p>現在看另外一個例子，有一個命名為 <code>a</code> 的函數，呼叫 <code>a</code> ，創造執行環境時，其中一部分就是創造 <code>this</code> 關鍵字。<code>this</code> 關鍵字會在執行環境裡面變成什麼呢？仍然會指向全域物件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/0lZbWad.png" alt></p><h3 id="從函數表示式觀察-this"><a href="#從函數表示式觀察-this" class="headerlink" title="從函數表示式觀察 this"></a>從函數表示式觀察 this</h3><p>在這個例子中的 <code>this</code> 會變成什麼呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var b = function () &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>呼叫 <code>b</code> 的結果，<code>this</code> 仍然指向 <code>window</code> 物件。因為我們還是直接呼叫變數 <code>b</code> 的函式。</p><p><img src="https://i.imgur.com/LMsMAY1.png" alt></p><p>所以無論何時我創造函數，用函數表示式或函數陳述句，都不會影響到<code>this</code> 指向記憶體中的同一個位址，也就是全域物件。因為會影響到 <code>this</code> 的因素是函式如何被呼叫。</p><h3 id="延伸觀察"><a href="#延伸觀察" class="headerlink" title="延伸觀察"></a>延伸觀察</h3><p>每一個執行環境都有自己的 <code>this</code>，上面兩個小觀察中的<code>this</code> 指向記憶體中的同一個全域物件。根據這種特性，我們可以繼續延伸觀察。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">    this.newvariable=&apos;hello&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var b = function () &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line">console.log(newvariable);</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>在呼叫 <code>a</code> 之後，當 <code>a</code> 函式的 <code>this</code> 被創造郈， 我們可以用點運算子新增一個屬性， 將這個屬性連結到全域物件，所以在呼叫<br><code>a</code> 函式後，我們可以用 <code>console.log</code> 查詢<code>newvariable</code> 的值。</p><p><img src="https://i.imgur.com/8HAcRXZ.png" alt></p><p>為什麼這裡取用 <code>newvariable</code> 的時候不用點運算子？ 因為這時候的 <code>this</code> 指向全域物件。而所有連接到全域物件的變數都可以直接使用，因為這就像是在全域執行環境使用 <code>var</code> 宣告變數。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function a ()&#123;  </span><br><span class="line">  this.newVariable = &apos;hello&apos;;  </span><br><span class="line">&#125;  </span><br><span class="line">a();  </span><br><span class="line">var c = &apos;123&apos;;  </span><br><span class="line">console.log(window)</span><br></pre></td></tr></table></figure><p>我們在全域執行環境中宣告了變數 c ，並且跟上面的例子一樣直接呼叫函式 a ，並在函式 a 的程式內新增全域物件的屬性，接著觀察 window 的輸出。</p><p><img src="https://i.imgur.com/0NJ2FoV.png" alt></p><p><img src="https://i.imgur.com/WR4ZfC7.png" alt></p><p>可以發現如果 this 指向全域物件時，使用點運算子增加屬性到全域物件上，這時的效果會同於直接在全域執行環境上使用 var 宣告變數。</p><h3 id="物件實體內的方法"><a href="#物件實體內的方法" class="headerlink" title="物件實體內的方法"></a>物件實體內的方法</h3><p>現在我們已經了解函數表示式和函數陳述句，因此我們可以在物件內建立一個函式。</p><p>記得先前提到到，物件是許多名稱/值配對的組合，如果純值稱為屬性，但如果值是一個函數，則稱為方法。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var c = &#123;</span><br><span class="line">    name = &apos;the c object&apos;,</span><br><span class="line">    log:function()&#123;</span><br><span class="line">        console.log(this)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>現在所做的，不是直接呼叫函式，而是呼叫被創造在物件實體內的函式。所以要取用物件內的成員，就要使用點運算子，而且要加上 （）呼叫該函式，也就是 <code>c</code>物件的 <code>log</code> 方法。</p><p><img src="https://i.imgur.com/OawBVeh.png" alt></p><p>因為呼叫的方式改變了，這個範例裡面的 <code>this</code> 會指向有  <code>log</code> 方法的 <code>c</code> 物件，所以我們可以用這個特性，在方法內修改<code>c</code> 物件的 <code>name</code> 屬性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var c = &#123;</span><br><span class="line">    name : &apos;the c object&apos;,</span><br><span class="line">    log:function()&#123;</span><br><span class="line">        this.name=&apos;update c object&apos;,</span><br><span class="line">        console.log(this)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>我們改變了擁有函數的物件的屬性。</p><p><img src="https://i.imgur.com/IvT9TEO.png" alt></p><p>這相當有用，可以使用 <code>this</code> 改變這個包含方法的物件，可以取用同一物件的方法或是屬性。很常用也很簡潔。</p><h3 id="延伸範例"><a href="#延伸範例" class="headerlink" title="延伸範例"></a>延伸範例</h3><p>繼續看看混合範例裡面，<code>this</code> 仍然像我們想的那樣嗎？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var c = &#123;</span><br><span class="line">    name: &apos;the c object&apos;,</span><br><span class="line">    log: function () &#123;</span><br><span class="line">        this.name = &apos;update c object&apos;,</span><br><span class="line">            console.log(this);</span><br><span class="line">        var setname = function (newname) &#123;</span><br><span class="line">            this.name = newname;</span><br><span class="line">        &#125;</span><br><span class="line">        setname(&apos;update again! the c object&apos;);</span><br><span class="line">        console.log(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/IHHz0os.png" alt></p><p>這是為什麼？因為在 <code>log</code> 方法內，我們雖然新增了一個 <code>setName</code>函式，並且直接呼叫它，但是影響 <code>this</code>的是函式的呼叫方式，而非實際上程式碼的位置。所以即便這個方法內的 <code>this</code> 是指向 <code>c</code> 物件本身，但在setName 函式內的 this 仍然是指向全域物件 window 。 </p><p><img src="https://i.imgur.com/oxnycv8.png" alt></p><h3 id="常用解決模式"><a href="#常用解決模式" class="headerlink" title="常用解決模式"></a>常用解決模式</h3><p>既然我們已經知道物件是用 by reference 設定的，</p><p>我們可以設定一個變數，並且把想保存 <code>this</code> 用等號運算子設定給該變數就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    name: &apos;The c object&apos;,</span><br><span class="line">    log: function() &#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        </span><br><span class="line">        self.name = &apos;Updated c object&apos;;</span><br><span class="line">        console.log(self);</span><br><span class="line">        </span><br><span class="line">        var setname = function(newname) &#123;</span><br><span class="line">            self.name = newname;   </span><br><span class="line">        &#125;</span><br><span class="line">        setname(&apos;Updated again! The c object&apos;);</span><br><span class="line">        console.log(self);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/SrzDBfY.png" alt></p><p>如此就只要知道保存下來的 <code>this</code> 是指向誰就可以了。</p><p>在這個例子中，我希望保存 this 指向 c 物件的記憶體位址，因此用了變數 self 配合等號運算子，令其與 this 指向同樣的 c 物件的記憶體位址。這樣即使之後 this 變動，也已經 self 無關，我們仍然可以使用這個變數修改 c 物件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;函數是一種物件，具有屬性及其他特徵。回到執行環境來看，在函數被呼叫的時候，底層究竟發生什麼變化呢？ 現在要繼續深究物件、函數以及有時讓人感到困惑的關鍵字 ”this” 之間的關係。&lt;/p&gt;
&lt;h3 id=&quot;當函式被呼叫的時候&quot;&gt;&lt;a href=&quot;#當函式被呼叫的時候&quot; 
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="克服Javascript奇怪部份" scheme="http://yoursite.com/tags/%E5%85%8B%E6%9C%8DJavascript%E5%A5%87%E6%80%AA%E9%83%A8%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 [Day28] - 傳值與參考值</title>
    <link href="http://yoursite.com/2019/06/29/2019-06-29/"/>
    <id>http://yoursite.com/2019/06/29/2019-06-29/</id>
    <published>2019-06-28T16:00:00.000Z</published>
    <updated>2019-07-14T05:09:41.620Z</updated>
    
    <content type="html"><![CDATA[<p>這一節又來到另一個重要觀念「傳值（by value)」與「參考值(by reference)」，這兩者都和變數關係密切。</p><h3 id="傳值"><a href="#傳值" class="headerlink" title="傳值"></a>傳值</h3><p>好比說有一種純值（primitive value)，可能是數字、布林或字串。我設定一個值到這個變數中，變數就有一個位址，它知道那個純值的記憶體位址。因為參考是參照到一個記憶體的位址。</p><p><img src="https://i.imgur.com/2DyKYst.png" alt></p><p>設定一個新變數，設定它等於 <code>a</code>，也可以說是我傳入 <code>a</code> 到一個函數，兒這個函數的名稱是 <code>b</code>。如果這是 JavaScript 中的純值，b這個新變數，將會指向一個新位址，一個新的記憶體地點。而那個純值的拷貝，被放到記憶體中的另一個地點。</p><p><img src="https://i.imgur.com/UqX7I5C.png" alt></p><p>所以如果 <code>a</code> 是 3，它在一個記憶體中的地點，接著 <code>b</code> 會指向 <code>3</code>，然後這個拷貝的地點，會被填上相同的值。這種方式叫做 <strong><em>by value</em></strong>&gt;。意思是會傳入一個值是直接拷貝另一個值，這兩個變數就相等了。藉由拷貝一個直到另一個記憶體中的地點。</p><h3 id="參考值"><a href="#參考值" class="headerlink" title="參考值"></a>參考值</h3><p>如果我在 JavaScript 裡面有一個物件，包含特殊類型的物件，像是函數。當我設定一個變數為物件，我仍然會得到一個記憶體位址，讓我可以參照到它。當 <code>b</code> 被設定等於 <code>a</code>，意思就是我要讓這兩個東西一樣，或者是把<code>a</code> 傳到函數裡面。這個新的變數 <code>b</code>，不會得到一個新的記憶體位址，而是指向 <code>a</code>的記憶體位址。沒有新的物件被創造，沒有物件的拷貝被創造。這兩個名稱都指向同一位址，就像有一個名字跟綽號一樣。這兩個名字都指向同一個地址的同一個人。<code>a</code> 和 <code>b</code> 有相同的值，因為當你要取用它們的值，他們會指向相同的記憶體位址。這叫做 <strong>by reference</strong>。</p><p><img src="https://i.imgur.com/Z7tJRaX.png" alt></p><p>參考值和傳值是很不同的，很重要的是要了解所有物件都是 by reference 的，當用等號設定他們相等的時候。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// by value (primitive)</span><br><span class="line">var a = 3</span><br><span class="line">var b;</span><br><span class="line">b = a </span><br><span class="line">a=2;</span><br><span class="line">console.log(a);</span><br><span class="line">console.log(b);</span><br></pre></td></tr></table></figure><p>這時會怎樣呢？ <code>a</code> 會是 3 ，<code>b</code> 也是。但記住，這是傳值，因為 3 是一個純值、一個數值（其他純值也會有相同作用）。所以當<code>b</code> 被設定等於<code>a</code> 的時候，等號運算子看到這些是純值，就創造一個新的記憶體位址給<code>b</code>，拷貝<code>a</code>的值到<code>b</code>的地址。所以兩者都是 3 。但他們兩個是在不同的記憶體位址。</p><blockquote><p>這表示我可以改變 <code>a</code> 的值，而不影響到 <code>b</code>，因為他們是記憶體中不同的2 點。</p></blockquote><p><img src="https://i.imgur.com/g0Z3oED.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// by reference (all objects include functions)</span><br><span class="line">var c = &#123;greeting:&quot;hi&quot;&#125;;</span><br><span class="line">var d;</span><br><span class="line">d = c;</span><br><span class="line">c.greeting=&quot;hello&quot; // mutate</span><br><span class="line">console.log(c);</span><br><span class="line">console.log(d);</span><br></pre></td></tr></table></figure><blockquote><p>mutate : 改變某件事情 （to change something)<br> 如果深入看一些 JavaScript 文件，可能會看見”mutate a object”、”mutate a value”，可能是新增或移除屬性。<br>immutable : 不能被改變 （it can’t be changed)</p></blockquote><p>等號運算子知道它們是物件，所以不會建立一個新的記憶體位址給 <code>d</code>，而是把 <code>d</code> 指向和 <code>c</code> 相同的記憶體位址。所以當我輸出這兩個東西，會看到同樣的值，但它們不是對方值的拷貝，它們只是指向同一個記憶體位址。我有一個物件在記憶體中，它有一個 greeting 屬性，我把它的值從 <code>hi</code> 改變為 <code>hello</code>，我改變 (mutate) 了它。</p><p>要記得，當處理物件的時候，你設定它等於另一個物件，你只是把兩個變數名稱指向同一個位址。</p><p><img src="https://i.imgur.com/R6I4eMd.png" alt></p><p>所以如果我改變那個物件的值，它用什麼名稱並不重要，它們只是別名而已。由於物件指向同一個位址，一旦你改變其中一個，另一個也跟著改變。</p><p>當我用函數的參數時也一樣。儘管是參數，物件也經由參考被傳入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// by reference (even as paremeters)</span><br><span class="line"></span><br><span class="line">var c = &#123;greeting:&quot;hi&quot;&#125;;</span><br><span class="line">var d;</span><br><span class="line">d = c;</span><br><span class="line">c.greeting=&quot;hello&quot; // mutate</span><br><span class="line">console.log(c);</span><br><span class="line">console.log(d);</span><br><span class="line"></span><br><span class="line">function changeGreeting(obj)&#123;</span><br><span class="line">obj.greeting =&quot;hola&quot;; // mutate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeGreeting(d);</span><br><span class="line"></span><br><span class="line">console.log(c);</span><br><span class="line">console.log(d);</span><br></pre></td></tr></table></figure><p>傳入 <code>d</code> 到函數，<code>d</code> 就是 <code>obj</code>，所以它被改變了。就像等號一樣，把一個物件傳入函數裡，表示它們是傳入它們的參考點 （by reference)，所以<code>obj</code> 會指向<code>d</code>的記憶體位址，而<code>d</code>已經指向<code>c</code> 的記憶體位址。當它被改變，表示會更新這個物件所指向的記憶體位址裡面的值。</p><p><img src="https://i.imgur.com/DpClwIO.png" alt></p><h3 id="等號運算子設定一個新的記憶體空間"><a href="#等號運算子設定一個新的記憶體空間" class="headerlink" title="等號運算子設定一個新的記憶體空間"></a>等號運算子設定一個新的記憶體空間</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//equals operator sets up a new memory space (a new address)</span><br><span class="line"></span><br><span class="line">c=&#123;greeting:&apos;howdy&apos;&#125;;</span><br><span class="line">console.log(c);</span><br><span class="line">console.log(d);</span><br></pre></td></tr></table></figure><p>這個例子中的等號，我設定 <code>c</code> 為一個新的值，等號運算子會設定一個新的記憶體空間給<code>c</code>，放進那個值，所以 <code>d</code> 和<code>c</code>就不再指向同一個記憶體位址。 <code>d</code> 仍然指向 hola。<br><img src="https://i.imgur.com/uxDDUlL.png" alt></p><p>這是一個特殊例子，這不是 by reference，因為等號運算子看到這些東西還不存在於記憶體裡面，它看到第二個參數不是已經存在的物件，它必須創造一個新的記憶體空間給物件，所以它建立一個新的空間，然後指向 <code>c</code>。在上個例子中我設定<code>d</code> 等於 <code>c</code>，<code>c</code>已經存在了。但在這個例子中， <code>c</code>現在指向不同於<code>d</code>的記憶體位址。</p><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>了解 by value 和 by reference 的差異很重要，因為在 JavaScript 裡面所有的純值都是  by value 而所有的物件都是 by reference。這在除錯時是非常重要的關鍵觀念。但是了解之後，就會知道當物件被改變了，那所有的物件、所有的變數，指向相同位址的東西都會被改變。所以屆時我們就可以了解，如果不小心無意改變了物件，那可能是傳入了這個物件的參考點而不自知。另一方面，改變一個純值，但原始的值並不會被改變，因為它是 by value。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一節又來到另一個重要觀念「傳值（by value)」與「參考值(by reference)」，這兩者都和變數關係密切。&lt;/p&gt;
&lt;h3 id=&quot;傳值&quot;&gt;&lt;a href=&quot;#傳值&quot; class=&quot;headerlink&quot; title=&quot;傳值&quot;&gt;&lt;/a&gt;傳值&lt;/h3&gt;&lt;p&gt;好比
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="克服Javascript奇怪部份" scheme="http://yoursite.com/tags/%E5%85%8B%E6%9C%8DJavascript%E5%A5%87%E6%80%AA%E9%83%A8%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Git 基本指令</title>
    <link href="http://yoursite.com/2019/06/25/2019-06-25/"/>
    <id>http://yoursite.com/2019/06/25/2019-06-25/</id>
    <published>2019-06-24T16:00:00.000Z</published>
    <updated>2019-06-28T07:05:13.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用終端機指令"><a href="#常用終端機指令" class="headerlink" title="常用終端機指令"></a>常用終端機指令</h3><p>$ pwd (print working directory 印出現在所在位置)<br>$ mkdir hello (make dir 建立目錄 hello)<br>$ cd hello/（change dir 移動到目錄 hello）<br>$ cd .. (回到上一層目錄)<br>$ touch index.html (建立檔案 index.html)<br>$ ls (列出目錄裡所有檔案)<br>$ ls -al (列出目錄裡所有檔案的細節)<br>$ rm index.html(徹底刪除檔案)<br>$ rm -r hello/ (徹底刪除hello資料夾)<br>$ cp hello.html world.html （複製 hello.html 為 world.html）<br>$ mv world.html images/ (把 world.html 搬到 images 資料夾 )<br>$ mv world.html 123.html (把 world.html 改名 123.html)</p><p><img src="https://i.imgur.com/6TPZXrC.png" alt></p><h3 id="使用-git"><a href="#使用-git" class="headerlink" title="使用 git"></a>使用 git</h3><h4 id="檢視目前設定"><a href="#檢視目前設定" class="headerlink" title="檢視目前設定"></a>檢視目前設定</h4><p>$ git config –list</p><h4 id="設定帳密"><a href="#設定帳密" class="headerlink" title="設定帳密"></a>設定帳密</h4><p>$ git config –global user.name ‘cxxxxxxx’<br>$ git config –global user.email ‘cxxxxxxx@gmail.com’</p><h4 id="查詢設定"><a href="#查詢設定" class="headerlink" title="查詢設定"></a>查詢設定</h4><p>$ git config –list</p><h3 id="Git-初始化"><a href="#Git-初始化" class="headerlink" title="Git 初始化"></a>Git 初始化</h3><p>讓 Git 知道這個資料夾要進行版控</p><ul><li>建立目錄<br>$ mkdir git-practice<br>$ cd git-practice</li><li>git 初始化<br>$ git init (自動建立一個.git目錄)</li></ul><h3 id="Git-重要區塊"><a href="#Git-重要區塊" class="headerlink" title="Git 重要區塊"></a>Git 重要區塊</h3><ul><li>工作目錄 (working)</li><li>暫存區域 (staging)</li><li>儲存庫 (repository)</li></ul><blockquote><p>它們並不是被放到某個「目錄」，比較像是狀態的「改變」</p></blockquote><h4 id="新增檔案"><a href="#新增檔案" class="headerlink" title="新增檔案"></a>新增檔案</h4><ul><li>現在 git 狀態<br>$ git status<br>$ git add index.html (新增一個檔案的時候，status 還是 untracked file，之後從工作目錄改到暫存區域變成 new file )<br>$ git commit -m “add index” (推到儲存庫，status 顯示 working tree clean)</li></ul><p><img src="https://i.imgur.com/hJEeFVT.png" alt></p><blockquote><p>add+commit 這樣的循環是一次存檔<br>commit 的訊息很重要，重點是這次存了什麼</p></blockquote><ul><li>檢視記錄<br>$ git log<br>$ git log –oneline</li></ul><h3 id="Git-使用情境-1"><a href="#Git-使用情境-1" class="headerlink" title="Git 使用情境 1"></a>Git 使用情境 1</h3><ul><li><p>檔案不小心刪掉怎麼辦？<br>$ rm index.html<br>$ git checkout –index.html<br>$ git checkout . (把這個目錄恢復成最近一次 commit 狀態)</p></li><li><p>查詢檔案作者<br>$ git blame index.html</p></li><li><p>git 裡新增目錄並進行版控<br>由於 git 不會把空資料夾運算進版控，所以可以放一個隱藏檔<br>$ touch hello-world/.keep</p></li></ul><h3 id="使用分支"><a href="#使用分支" class="headerlink" title="使用分支"></a>使用分支</h3><p>為什麼要使用分支？</p><blockquote><p>一般來說，我們分支只是貼在某個 commit 上的貼紙，例如下圖的 master :</p></blockquote><p><img src="https://i.imgur.com/Vly0sFs.png" alt></p><ul><li>查詢分支<br>$ git branch </li><li>開新分支<br>$ git branch xxxx (git branch 後面加上要開的分支名稱)</li></ul><p><img src="https://i.imgur.com/keIwyUn.png" alt></p><blockquote><p>如果 HEAD 現在指向 master，意思就是「現在正在 master 分之上」</p></blockquote><ul><li>切換分支<br>$ git checkout cat (switched to master ‘cat’ )</li><li>合併分支<br>$ git merge cat </li></ul><p>合併前：<br><img src="https://i.imgur.com/9VLiKmo.png" alt><br>合併後：<br><img src="https://i.imgur.com/xyO3GU3.png" alt></p><blockquote><p>合併分支可看成只是在移動貼紙，但是這邊的合併還算單純，所以算是一種「<strong>快轉合併</strong>」</p><ul><li>刪除分支<br>$ git branch -d cat<br>只是把 cat 貼紙撕掉<br>commit 或是檔案不會因此受到影響<br>Git 的本體是 commit </li></ul></blockquote><h3 id="複雜一點的分支"><a href="#複雜一點的分支" class="headerlink" title="複雜一點的分支"></a>複雜一點的分支</h3><p>如果是各自新增的 branch 就沒辦法快轉合併了，要怎麼處理？例如現在分別有一個 dog 跟 cat branch，假設現在 HEAD 指向 dog branch：<br><img src="https://i.imgur.com/cM5Ho0b.png" alt></p><ul><li>合併 dog 跟 cat branch<br>$ git merge cat</li></ul><p><img src="https://i.imgur.com/nR08OV6.png" alt></p><h3 id="另一種合併分支的方式-（rebase"><a href="#另一種合併分支的方式-（rebase" class="headerlink" title="另一種合併分支的方式 （rebase)"></a>另一種合併分支的方式 （rebase)</h3><p><img src="https://i.imgur.com/ymEIFIf.png" alt><br><img src="https://i.imgur.com/ZHgFviZ.png" alt></p><pre><code>以 rebase 合併的好處：合併的歷史比較簡潔乾淨，但相對 merge，就比較難看清楚整個檔案的分支記錄過程。</code></pre><h3 id="如何回到上一步-返回之前狀態"><a href="#如何回到上一步-返回之前狀態" class="headerlink" title="如何回到上一步 (返回之前狀態)"></a>如何回到上一步 (返回之前狀態)</h3><blockquote><p> 對 Git 常見的誤解是以為 reset 是刪除 commit 的意思。但是 Git 的世界事實上沒有刪除 Commit 的指令。一般我們把 reset 理解成「重新設定」，其實可以理解成 become，一種「我想要變成XXX」的狀態。</p><blockquote></blockquote></blockquote><p>原始檔案狀態：<br><img src="https://i.imgur.com/JHdTMi7.png" alt><br>reset 狀態：<br><img src="https://i.imgur.com/8g5Njgz.png" alt></p><p>參數狀態決定檔案去留，常見參數有</p><ul><li>mixed</li><li>soft</li><li>hard</li></ul><p><img src="https://i.imgur.com/L8ghm4Q.png" alt></p><p>在使用 –hard 的時候，如果要再次恢復專案到上一步，要怎樣做？</p><h3 id="reflog-reference-log"><a href="#reflog-reference-log" class="headerlink" title="reflog (reference log )"></a>reflog (reference log )</h3><p>Git 會把移動軌跡都記錄在 reference log，如果使用 –hard 之後想要復原，可先查詢 reflog </p><h4 id="絕對定位法"><a href="#絕對定位法" class="headerlink" title="絕對定位法"></a>絕對定位法</h4><p>$ git reflog (查詢 commit 編號)<br>$ git reset xxxxx(commit 編號) –hard </p><h4 id="相對定位"><a href="#相對定位" class="headerlink" title="相對定位"></a>相對定位</h4><ul><li><code>^</code> Caret</li><li><code>~</code> Tilde </li></ul><p><img src="https://i.imgur.com/lMofhTE.png" alt></p><p>但是如果每次都要輸入 commit 編號有點麻煩，可以把編號改成代號，例如回到現在狀態的前 2 步</p><p><img src="https://i.imgur.com/DruAI8w.png" alt></p><p>例如回到上一個步驟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^ --mixed</span><br></pre></td></tr></table></figure><h4 id="reset-跟-checkout-差別是什麼？"><a href="#reset-跟-checkout-差別是什麼？" class="headerlink" title="reset 跟 checkout 差別是什麼？"></a>reset 跟 checkout 差別是什麼？</h4><p><img src="https://i.imgur.com/fSAJhWD.png" alt></p><h3 id="Git-使用情境-2"><a href="#Git-使用情境-2" class="headerlink" title="Git 使用情境 2"></a>Git 使用情境 2</h3><ul><li><p>回到上一個步驟的兩種作法<br>$ git reset xxxxx(commit 編號) –mixed<br>$ git reset HEAD^ –mixed</p></li><li><p>合併發生衝突怎麼辦？</p></li></ul><p>如果合併時遇到像是同一行 HTML 檔案的衝突，該怎麼辦呢？這時在 HTML 檔案中會出現像這樣：<br><img src="https://i.imgur.com/Xb5B1tm.png" alt></p><p>我們先把那些標記都清除<br><img src="https://i.imgur.com/SMAevkt.png" alt></p><p>並且回到終端機，這時 git status 如下，表示我們要再做一次存檔動作<br><img src="https://i.imgur.com/p2jJTPr.jpg" alt><br>$ git add index.html<br>$ git commit -m “merge payment and member”</p><ul><li><p>不小心把還沒合併的分支砍掉了，救得回來嗎？<br>$git branch -D new_dog (不小心砍掉一個分支)<br>$git branch newnew_dog 053fb21 (在reflog重新貼上newnew_dog)</p></li><li><p>某個分支的某個 commit 做得不錯想收進來，但又不想合併整個分支<br>使用 cherry pick 指令</p></li></ul><h3 id="使用標籤"><a href="#使用標籤" class="headerlink" title="使用標籤"></a>使用標籤</h3><p>什麼時候會使用標籤？在 Git，「標籤（tag）」是一個指向某一個 Commit 的指標。通常在開發軟體有完成特定的里程碑，例如軟體版號 1.0.0 或是 beta-release 之類的，這時候就很適合使用標籤做標記。<br>假設目前的 Commit 紀錄如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">db3bbec (HEAD -&gt; master) add fish</span><br><span class="line">930feb3 add pig</span><br><span class="line">51d54ff add lion and tiger</span><br><span class="line">27f6ed6 add dog 2</span><br><span class="line">2bab3e7 add dog 1</span><br><span class="line">ca40fc9 add 2 cats</span><br><span class="line">1de2076 add cat 2</span><br><span class="line">cd82f29 add cat 1</span><br><span class="line">382a2a5 add database settings</span><br><span class="line">bb0c9c2 init commit</span><br></pre></td></tr></table></figure><p>想在 add lion and tiger 這個 Commit（51d54ff）打上一個 big_cats 的標籤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag big_cats 51d54ff</span><br></pre></td></tr></table></figure><h3 id="修改歷史紀錄"><a href="#修改歷史紀錄" class="headerlink" title="修改歷史紀錄"></a>修改歷史紀錄</h3><h4 id="修改-Commit-訊息-（圖型介面）"><a href="#修改-Commit-訊息-（圖型介面）" class="headerlink" title="修改 Commit 訊息 （圖型介面）"></a>修改 Commit 訊息 （圖型介面）</h4><p>這裡使用的指令一樣是 rebase 但多了互動式操作，在圖型介面的位置如下。操作後可以修改<br><img src="https://i.imgur.com/PCL7fcc.png" alt><br>點擊之後可選擇要修改的地方<img src="https://i.imgur.com/VJk83ZQ.png" alt><br>修改訊息之後，被修正的地方，還有在它後面的訊息的 Changeset 都會被改變<br><img src="https://i.imgur.com/Fn0AcVn.png" alt><br>修改結果<br><img src="https://i.imgur.com/XADDULQ.png" alt></p><h4 id="修改-Commit-訊息-（終端機）"><a href="#修改-Commit-訊息-（終端機）" class="headerlink" title="修改 Commit 訊息 （終端機）"></a>修改 Commit 訊息 （終端機）</h4><p>$ git rebase -i f66ba66 (意思是要修改後退到這個commit編號為止的歷史)</p><blockquote><p>每一次的 rebase ，就算只改一個字，也會改變隨後全部的歷史紀錄</p></blockquote><h3 id="刪除或調整-commit-順序"><a href="#刪除或調整-commit-順序" class="headerlink" title="刪除或調整 commit 順序"></a>刪除或調整 commit 順序</h3><p><img src="https://i.imgur.com/qdr9Cvj.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用終端機指令&quot;&gt;&lt;a href=&quot;#常用終端機指令&quot; class=&quot;headerlink&quot; title=&quot;常用終端機指令&quot;&gt;&lt;/a&gt;常用終端機指令&lt;/h3&gt;&lt;p&gt;$ pwd (print working directory 印出現在所在位置)&lt;br&gt;$ mkdi
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>如何條列化思考</title>
    <link href="http://yoursite.com/2019/06/24/2019-06-24/"/>
    <id>http://yoursite.com/2019/06/24/2019-06-24/</id>
    <published>2019-06-23T16:00:00.000Z</published>
    <updated>2019-06-28T06:30:49.789Z</updated>
    
    <content type="html"><![CDATA[<p>這篇是 Hulo的線上免費課程初心者的計概與 coding 火球術，提供給我這種入門新手的程式思維思考心法。第二堂課的主題是「解決問題」，關注的方向式關於如何在日常思維與電腦化思維之間切換。在第一堂課之後，開始要練習一個可以深入學習的工程師思維，這需要不斷地問自己「為什麼？」另外，到底為什麼要寫程式呢？因為我們要用電腦話讓電腦照著我的意思做。要讓電腦聽話，那就要使用程式碼。最後，程式碼的目標，就是為了解決問題。</p><p>如何條列化思考？如何解決問題？<br>=</p><p>首先要學習的是解決問題的思維，而非令人頭痛的程式語法。</p><p>假設以下問題</p><blockquote><p> computerscience 裡有包含 c 嗎？有幾個 c ?</p></blockquote><h3 id="逐步拆解"><a href="#逐步拆解" class="headerlink" title="逐步拆解"></a>逐步拆解</h3><p>我們的人腦要拆解所有文字，自然最終的結果是看所有文字，但細分來說，其實是一個一個字地看（看第一個、看第二個）。</p><p>所以上面問題的解法，其實是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 從第一個看到最後一個，看有沒有 c 這個字</span><br><span class="line">- 如果有，就把位置記下來，並且繼續往下找</span><br></pre></td></tr></table></figure><h3 id="條列式轉換"><a href="#條列式轉換" class="headerlink" title="條列式轉換"></a>條列式轉換</h3><p>寫程式就是對電腦下指令，而且電腦一次只能做一個指令，所以如果把解法寫成條列式，就是練習對電腦下指令。這一堂利用「給你一串文字，問你裡面有沒有 p」當作範例 一步步教你怎麼用「程式化思考」 把自己的解法轉變成更「標準化」的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.找第一個字，看第一個字是不是 c，是的話就把位置記下來，不是的話就繼續往下找</span><br><span class="line">2.找第二個字，看第一個字是不是 c，是的話就把位置記下來，不是的話就繼續往下找</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>但是這樣太麻煩了，我們可以把無限的步驟簡化為有限的條列</p><blockquote><ul><li>假設 n 是 1， length 是字串長度，A 設成 -1 ，代表找到的位置，p 是要找到的字</li><li>看第 n 個字是不是 p，是的話讓 A =n</li><li>把 n+1，如果 n+1 大於 length 的話，就跳到第 5 步</li><li>跳回第 2 步</li><li>如果 A&lt;0，代表沒出現過；否則 A 就是答案</li></ul></blockquote><p>這邊的重點在加入第四步驟，讓第二、三步驟不斷巡迴。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">length: 15</span><br><span class="line">p:c</span><br><span class="line">n  A</span><br><span class="line">1  1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">10 10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15 15</span><br><span class="line">16</span><br></pre></td></tr></table></figure><h3 id="自主練習"><a href="#自主練習" class="headerlink" title="自主練習"></a>自主練習</h3><ul><li>試著把自己的一些生活流程用條列式列出來，每一條只能有一個動作</li></ul><ol><li>如果上班日，十點上床睡覺</li><li>如果假日，十二點上床睡覺</li><li>在廚房煮飯</li><li>搭捷運</li><li>如果晴天，去跑步</li><li>如果雨天，宅在家裡</li></ol><ul><li>給你一個亂數的數列，例如說：1, 8, 9, 2, 5 ,4，你能想出什麼步驟把這些數字由小到大排好嗎？</li></ul><ol><li>假設要讓亂數群根據數字大小排列，我們不知道這些數字裡面最大是多少所以n &lt;=n</li><li>用 1 比對所有數字，如果有符合的話，排在第一個位置</li><li>用 2 比對所有數字，如果有符合的話，排在第二個位置</li><li>用 9 比對所有數字，如果有符合的話，排在第二個位置</li><li>如果排列到10了，大於9的話，停止排列</li></ol><p>如何代號化？</p><blockquote><p>假設我們要比對的最大數字是 n(小於y的那個數字），y&gt;n=&gt;1<br>比對數字群看 n 有沒有出現，是的話讓A=n，代表找到的位置<br>把 n+1，如果 n+1=&gt;y，就跳到第 5 步<br>跳回第 2 步<br>排列完成</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這篇是 Hulo的線上免費課程初心者的計概與 coding 火球術，提供給我這種入門新手的程式思維思考心法。第二堂課的主題是「解決問題」，關注的方向式關於如何在日常思維與電腦化思維之間切換。在第一堂課之後，開始要練習一個可以深入學習的工程師思維，這需要不斷地問自己「為什麼？
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="計算機概論" scheme="http://yoursite.com/tags/%E8%A8%88%E7%AE%97%E6%A9%9F%E6%A6%82%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>Get API 實作</title>
    <link href="http://yoursite.com/2019/06/23/2019-06-23/"/>
    <id>http://yoursite.com/2019/06/23/2019-06-23/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2019-06-28T08:27:15.860Z</updated>
    
    <content type="html"><![CDATA[<p>這一篇主要是整理一個 Get API 小作品的思路。因為是參考別人的解法，加上自己的思考慣性是習慣從頭到尾把細節了解一次才認為完整掌握，所以使用這種看起來笨笨的步驟，一句一句拆解。</p><p>完成品 <a href="https://chiangyuchi.github.io/get-api" target="_blank" rel="noopener">https://chiangyuchi.github.io/get-api</a><br>原始碼 <a href="https://github.com/ChiangYuChi/get-api" target="_blank" rel="noopener">https://github.com/ChiangYuChi/get-api</a></p><h3 id="設定-DOM"><a href="#設定-DOM" class="headerlink" title="設定 DOM"></a>設定 DOM</h3><ul><li>select  區域選單</li><li>degreetable </li><li>placeTitle 區域名稱</li><li>time 更新時間</li><li>detail 細節</li><li>detailTitle</li><li>infoList 清單</li></ul><h3 id="取得資料"><a href="#取得資料" class="headerlink" title="取得資料"></a>取得資料</h3><ul><li>fetch open data </li><li>怎麼解決CROS問題 (cros-anywhere)</li><li>fetch 之後要怎麼存？存在哪裡？這些數據要幹嘛？<pre><code>-連結get data 函式，儲存data-更新所有頁面，先放入NTP。( datail, infoList) -待資料渲染至頁面後，關閉 loading page&gt;loading.style.display=&apos;none&apos;;</code></pre></li></ul><h3 id="綁定事件"><a href="#綁定事件" class="headerlink" title="綁定事件"></a>綁定事件</h3><ul><li>表單切換 change 事件<br>切換之後把點擊對象的值（e.target.value)，渲染到整個頁面 (updateAll)</li><li>項目 click 事件，如果點擊的標的是連結(e.target.value==A)，把連結標的的值，更新到細節欄位</li></ul><h3 id="儲存色彩資訊"><a href="#儲存色彩資訊" class="headerlink" title="儲存色彩資訊"></a>儲存色彩資訊</h3><ul><li>把顏色整理成陣列</li><li>顏色加入等級表，用for迴圈</li></ul><h3 id="取得資料後的儲存"><a href="#取得資料後的儲存" class="headerlink" title="取得資料後的儲存"></a>取得資料後的儲存</h3><ul><li><p>getData函式，儲存data為陣列<br>把data裡面待會要存到選單項裡面的，用迴圈以add方法，把需要的內容（需要哪些？），向new Set()結構加入新成員。</p></li><li><p>儲存的資料以location的名稱運用在加入選單所需的參數</p><h3 id="加入選單"><a href="#加入選單" class="headerlink" title="加入選單"></a>加入選單</h3></li><li><p>加入選單的函式（有一個參數location)</p></li><li><p>用forEach方法，巡訪參數的每個元素</p></li><li><p>以名為option的變數，創建元素</p></li><li><p>設置指定元素上element的属性值。如果属性已经存在，则更新该值；否则，使  用指定的名称和值添加一个新的属性。</p></li><li><p>把創建的元素加入option</p></li><li><p>把新增的option加進select</p><h3 id="完成的選單被變更了，觸發-change-事件"><a href="#完成的選單被變更了，觸發-change-事件" class="headerlink" title="完成的選單被變更了，觸發 change 事件"></a>完成的選單被變更了，觸發 change 事件</h3></li><li><p>updateAll（location) 傳入的參數是被點擊的地點</p></li><li><p>被點擊的地點，已經用location儲存，現在取用這個location</p></li><li><p>要在畫面更新的地區抬頭，就是點擊地點</p></li><li><p>要在畫面更新的時間，就取用第一筆陣列資料的發佈時間＋’更新’</p></li><li><p>要更新畫面，先把整個infoList清空</p></li><li><p>宣告一個非全域變數 data，它的值的取得，是在datalist裡一個一個過濾所有項目，如果過濾的項目裡面，有任何一個等於我所在區域的項目，回傳項目。</p></li><li><p>剛剛過濾出的項目儲存在變數data裡面，宣告一個新變數sortedData=data，並且用AQI大小排序</p></li><li><p>排序過的資料，用forEach，以字串形式置入畫面</p></li><li><p>在arrow function 裡，每個被檢查到的data，都當做el參數傳入</p></li><li><p>宣告一個新的變數叫做 newList，以此創建一個新的元素li</p></li><li><p>如果傳入的參數的AQI是空值或hypen，他們的AQI就等於N/A</p></li><li><p>宣告一個新的變數叫colorList，它的值是在colors陣列裡面比對，find 方法會對每個元素執行一次 callback 函式，直到找到一個讓 callback 函式回傳 true 的元素。當元素被找到的時候，find 會立刻回傳該元素，否則 find 會回傳 undefined。這個陣列裡面比對的狀態，當成col參數在這個方法裡運作，比對傳入元素的狀態，如果符合，就回傳色彩。</p></li><li><p>如果資料內沒有status(設備維修),if(colorList==undefined)，套用顏色是 ＃EEEEEE</p></li><li><p>組字串，並且更新：字串包含</p><p>  最外層的inforBox<br>  新增一個連結它的顯示文字是傳入的參數的siteName<br>  新增傳入元素的AQI，它的顏色是在colorList陣列裡面用status比對 的色彩</p></li><li><p>把字串加入newList裡</p></li><li><p>把newList加入父階層infoList</p></li><li><p>同步更新detail, updateDetail(傳入參數排序第一個的站名)</p></li></ul><h3 id="更新detail"><a href="#更新detail" class="headerlink" title="更新detail"></a>更新detail</h3><ul><li>函數傳入的參數就是我點擊的那一個</li><li>那一個要更新在畫面上的項目，是在資料陣列裡面用find()方法尋找的，並且叫它place</li><li>如果點擊的那一個，符合資料陣列裡面的siteName，就把data傳入一個新的空陣列裡面</li><li>空陣列包含 item.O3, item.PM10, item[‘PM2.5’], item.CO, item.SO2, item.NO2</li><li>細節標題的第一項，更新成上面的place</li><li>細節標題的第二項，就是項目的AQI屬性</li><li>著色的方式同上，宣告一個新的變數叫colorList，它的值是在colors陣列裡面比對，find 方法會對每個元素執行一次 callback 函式，直到找到一個讓 callback 函式回傳 true 的元素。當元素被找到的時候，find 會立刻回傳該元素，否則 find 會回傳 undefined。這個陣列裡面比對的狀態，當成col參數在這個方法裡運作，比對傳入元素的狀態，如果符合，就回傳色彩。所以要判斷這個colorlist的status是否等於傳入的項目的status，如果是，就回傳。</li><li>回傳顏色的運用方式，是將細節的第一個的背景顏色，比對colorList。</li><li>把data內的資料更新至 detail上 （用迴圈的方式，去檢查數據的長度，並且依照索引值一個一個放到細節項目的相同索引值位置，並回傳）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一篇主要是整理一個 Get API 小作品的思路。因為是參考別人的解法，加上自己的思考慣性是習慣從頭到尾把細節了解一次才認為完整掌握，所以使用這種看起來笨笨的步驟，一句一句拆解。&lt;/p&gt;
&lt;p&gt;完成品 &lt;a href=&quot;https://chiangyuchi.github
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 [Day27] - 函數陳述句與函數表示式</title>
    <link href="http://yoursite.com/2019/06/22/2019-06-22/"/>
    <id>http://yoursite.com/2019/06/22/2019-06-22/</id>
    <published>2019-06-21T16:00:00.000Z</published>
    <updated>2019-07-14T05:09:20.799Z</updated>
    
    <content type="html"><![CDATA[<p>了解函數就是物件後，接著要實際運用這個觀念。開始之前，我們要先了解函數陳述句 （Function Statements) 與函數表示式 (Function Expressions) 的用法差異。</p><h3 id="表示式"><a href="#表示式" class="headerlink" title="表示式"></a>表示式</h3><blockquote><p>表示式是程式碼的單位，會形成一個值  (A unit of code that results in a value)</p></blockquote><p>直接地說，任何表示式最終都會創造一個值，而這個值不一定要儲存在某個變數。</p><p>舉例來說，我們宣告一個變數 <code>a</code>，並且打開開發者工具輸入以下</p><p><img src="https://i.imgur.com/TnvqLDE.png" alt></p><p>上面是一個簡單的表示式，我們透過等號運算子把 3 賦與給變數 <code>a</code>，執行它，得到回傳的結果。</p><p>但是上面說過值不一定要儲存在變數裡面，所以表示式也可以這樣寫：<br><img src="https://i.imgur.com/dqeJb8a.png" alt></p><p>回傳了 3，但是我們並沒有使用等號運算子把這個值放入變數裡面。這個值可以是數值、字串或者物件。所以表示式也可以這樣寫</p><p><img src="https://i.imgur.com/csgpRQs.png" alt></p><h3 id="陳述句"><a href="#陳述句" class="headerlink" title="陳述句"></a>陳述句</h3><blockquote><p>當我們提到陳述句，陳述句表示「做某件事情」。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line"></span><br><span class="line">if(a===3)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當 <code>a===3</code> 就做某件事情。在 if 陳述句的括號內，必須放入表示式，因為會形成一個值，這樣這個陳述句才能運作。陳述句本身不會回傳任何值。</p><p>像是我不能這麼做，這不會有任何效用，因為沒有任何值會回傳給變數 b</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var b=if(a===3)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>結論：陳述句會做其他事情，表示式則回傳值</p></blockquote><h3 id="函式表示式與函式陳述句的差異"><a href="#函式表示式與函式陳述句的差異" class="headerlink" title="函式表示式與函式陳述句的差異"></a>函式表示式與函式陳述句的差異</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function greet() &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函式陳述句"><a href="#函式陳述句" class="headerlink" title="函式陳述句"></a>函式陳述句</h4><p>這是一個簡單的函式陳述句，在創造執行環境的時候，這個函式被放進記憶體中，但這只是陳述句，所以不會回傳任何的值，直到函式被呼叫執行。</p><p>雖然函式陳述句不會回傳任何值，但它會有提升 (hoisting) 現象，所以可以在任何地方取用它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">greet();</span><br><span class="line">function greet() &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函式表示式"><a href="#函式表示式" class="headerlink" title="函式表示式"></a>函式表示式</h4><p>宣告一個 anonymousGreet 變數並且使用等號運算子，然後在右側使用函式陳述句。</p><p>記得「函數就是物件」，所以「建立一個物件，並且設定它等於這個變數」，這個變數也就是它在記憶體中指向的位置。</p><p>我們已經有一個已經知道函式物件位址的變數 anonymousGreet ，所以等號右邊的陳述句可以改寫成這樣，稱為匿名函式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var anonymousGreet = function () &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Brtzuj1.png" alt></p><h3 id="如何觸發函式表示式"><a href="#如何觸發函式表示式" class="headerlink" title="如何觸發函式表示式"></a>如何觸發函式表示式</h3><p>我們需要指向那個物件，告訴它要執行程式，像這樣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anonymousGreet();</span><br></pre></td></tr></table></figure><p>因為變數已經知道函數記憶體的位址，所以只要加上 <code>()</code>，就可以觸發函式。</p><p>但是因為函式表示式的提升 (hoisting) 現象，造成一個值得注意的問題。如果我們把程式碼改寫成這樣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anonymousGreets();  </span><br><span class="line">var anonymousGreets = function() &#123;  </span><br><span class="line">  console.log(&apos;Hi&apos;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果變這樣，為什麼？<br><img src="https://i.imgur.com/wWwuPXa.png" alt></p><p>還記得當執行環境被創造，創造執行階段會把函式陳述句以及變數都放入記憶體，變數被賦予初始值 undefined ，然後逐行執行程式碼。</p><p>於是程式的第一行是「anonymousGreets();」，但此時仍未賦予變數值，變數的值仍然是 undefined 。自然的，錯誤便會告訴我們 undefined 不是函式，它沒辦法被使用 () 呼叫執行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var anonymousGreets = function() &#123;  </span><br><span class="line">  console.log(&apos;Hi&apos;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直到上述這行程式碼，anonymousGreets 變數的值才被賦予函式物件。</p><blockquote><p>所以函式表示式不受到提升 (hoisting) 影響。</p></blockquote><h3 id="傳入函式表示式做為參數"><a href="#傳入函式表示式做為參數" class="headerlink" title="傳入函式表示式做為參數"></a>傳入函式表示式做為參數</h3><p>記得我們說的函式是物件，函式表示式可以馬上創造函式物件，因此我們可延伸出以下寫法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function log(a)&#123;  </span><br><span class="line">  console.log(a);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(function()&#123;  </span><br><span class="line">  console.log(&apos;hi&apos;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我們立即創造了一個函式物件，在裡面寫了一些程式碼。然後把這個函式物件當成參數傳入 log 函式內</p><p><img src="https://i.imgur.com/Mxan84C.png" alt></p><p>不過這樣只是印出函式物件的內容而已，但透過這樣的觀察得知「一級函式可以很快地被創造、使用，且變數也可以設值成為一級函式」</p><p>我們結合上述這些並做些修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function log(a)&#123;  </span><br><span class="line">  a();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var anonymousGreets = function()&#123;  </span><br><span class="line">  console.log(&apos;hi&apos;);  </span><br><span class="line">&#125;  </span><br><span class="line">log(anonymousGreets);　// hi</span><br></pre></td></tr></table></figure><p>因為我們傳入 log 函式的參數為函式物件，所以變數 a 參照到了這個函式物件。同樣地，要呼叫執行函式僅需要加上 () 即可。</p><p>本例來看，我使用函式表示式，接著把這個函式傳入當作另一個函式的參數，這樣另一個函式就可以使用這個函式表示式，這就是我們提到的一級函式的觀念「可以將函式傳入別處」。</p><p>可以把函式給另一個函式，就像使用變數一樣，這樣的做法也稱為函式程式語言 ( functional programming )。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;了解函數就是物件後，接著要實際運用這個觀念。開始之前，我們要先了解函數陳述句 （Function Statements) 與函數表示式 (Function Expressions) 的用法差異。&lt;/p&gt;
&lt;h3 id=&quot;表示式&quot;&gt;&lt;a href=&quot;#表示式&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
