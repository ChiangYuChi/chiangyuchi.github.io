<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CYC&#39;S BLOG</title>
  
  <subtitle>CYC&#39;S NOTEBOOK</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-13T04:56:09.558Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day31-argument 與 spread</title>
    <link href="http://yoursite.com/2019/07/13/2019-07-13-1/"/>
    <id>http://yoursite.com/2019/07/13/2019-07-13-1/</id>
    <published>2019-07-12T16:00:00.000Z</published>
    <updated>2019-07-13T04:56:09.558Z</updated>
    
    <content type="html"><![CDATA[<p>這一節是是關於另一個 JavaScript 的關鍵字「參數 (arguments)」，這是在執行一個函式的時候引擎會自動幫我們設定好的關鍵字。雖然在下一版本的 JavaScript 就不會這麼常提到這個關鍵字，而是用 <code>spread</code> 處理 <code>arguments</code> 的工作。但是如果現在去看任何程式碼，尤其是框架和資源庫，還是會在原始碼看到 <code>arguments</code> 變數。所以我們應該要認識及知道它的用處。</p><p>已知執行函數的時候，一個執行環境被創造，然後 JavaScript 引擎會幫你設定一些東西，像是變數環境 來包住變數，給範圍鏈的外部環境參考，以及特殊關鍵字 <code>this</code> (它會依據函數的位置和不同被呼叫的方式，指向不同的東西)。最後它還設定一個特殊關鍵字 <code>arguments</code>。<code>arguments</code> 包含所有的值，所有傳入所呼叫的函數的參數 （the parameters you pass into a function) 。其實 <code>arguments</code> 只是另一個傳入函數的參數的名稱而已，但是 JavaScript 用 <code>arguments</code> 統稱所有「傳入函數的參數」。</p><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>要了解 <code>arguments</code> 到底用處是什麼，可以看以下例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line"> </span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br></pre></td></tr></table></figure><p>JavaScript  和其它程式語言的差別在於，我可以呼叫 <code>greet</code>  然後不傳入任何參數，而不會報錯。在瀏覽器執行，得到 undefined。在函數執行的時候，發生提昇 (hoisting) 的狀況，它設定好這些東西的初始值，即便我還沒提供確切的特定值。執行函數的地一件事情是設定好 <code>firstname</code>、<code>lastname</code> 的記憶體空間，然後設定它們為 undefined。</p><p><img src="https://i.imgur.com/EZ0O7vt.png" alt></p><p>如果傳入參數，它會由左到右處理，如果我只傳入一個 ‘John’，它會假定這是 <code>firstname</code> 然後我沒有傳入其它東西到 <code>lastname</code> 和 <code>language</code>，出現 undefined 的原因就是因為 hoisting。這表示可以省略傳入參數，或者可以只傳入一部份的參數</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><p>![](<a href="https://i.imgur.com/INhLkRQ" target="_blank" rel="noopener">https://i.imgur.com/INhLkRQ</a>.</p><p>雖然這看起來有點奇怪，但其實這是一個強大的概念。例如，在下一版本的 JavaScript ，如果沒有傳入參數值到函數裡面，可以設定預定參數</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language＝&apos;en&apos;) &#123;</span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><p>然而，這並非所有瀏覽器都支援，所以可以這樣使用預定參數的概念。亦即如果沒有傳入參數給函式，如果是 undefined 就會使用 <code>||</code> 運算子，強制型轉成 false，因為 undefine 會強制型轉成 false，最終會得到 en 的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line"></span><br><span class="line">    language = language || &apos;en&apos;;</span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><p>![](<a href="https://i.imgur.com/iUGjoEh" target="_blank" rel="noopener">https://i.imgur.com/iUGjoEh</a>.</p><p>現在繼續關注 JavaScript 設定的關鍵字 <code>arguments</code> ，沒有在任何地方宣告，但自動就可以取用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line"></span><br><span class="line">    language = language || &apos;en&apos;;</span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(arguments);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><p><code>argument</code> 包含所有傳入參數的值，但因為這是一個特殊的關鍵字，所以那些微微傾斜的中括號，意味它其實是 「像陣列的」（array-like)。這表示它的動作和陣列相似，看起來也很像。但它不是陣列。它只有一部份陣列的功能。</p><p><img src="https://i.imgur.com/Dw34UBP.png" alt></p><p>所以如果我不想要我的函式做任何動作，也沒有傳入任何的參數，我可以檢查 <code>argument.length</code>，長度為 0 表示這個陣列是空的，一個回傳陳述句會將我踢出函式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line"> </span><br><span class="line">    language = language || &apos;en&apos;;</span><br><span class="line">    </span><br><span class="line">    if (arguments.length === 0) &#123;</span><br><span class="line">        console.log(&apos;Missing parameters!&apos;);</span><br><span class="line">        console.log(&apos;-------------&apos;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(arguments);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/p4Z3tzy.png" alt></p><p>所以雖然 <code>argument</code> 沒有參數名稱，只有值，我依然可以像陣列一樣使用它，可以用中括號運算子，像是我們可以利用 arguments 來判斷函式有沒有傳入參數，或者取出特定索引的值等等運用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line"> </span><br><span class="line">    language = language || &apos;en&apos;;</span><br><span class="line">    </span><br><span class="line">    if (arguments.length === 0) &#123;</span><br><span class="line">        console.log(&apos;Missing parameters!&apos;);</span><br><span class="line">        console.log(&apos;-------------&apos;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(arguments);</span><br><span class="line">    console.log(&apos;arg 0: &apos; + arguments[0]);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;);</span><br></pre></td></tr></table></figure><h3 id="spread-parameter-其餘參數"><a href="#spread-parameter-其餘參數" class="headerlink" title="spread parameter 其餘參數"></a>spread parameter 其餘參數</h3><p>隨著 JavaScript 的發展，在 ES6 中，我們可以使用其餘參數<code>...</code>來取代 arguments ，但不代表 arguments 不存在了，它仍然可以使用，只是有更好的選擇。</p><p>簡單來說如果我們有傳入函式的參數，可以使用「…」來省略，但要特別注意的是，只能在沒有其他參數下，或者「…」必須是最後一個參數才可以使用。</p><p>其餘參數比起 arguments 好用的地方在於，其餘參數是一個真正的陣列，支援所有可以用於陣列上的方法， arguments 是類陣列，處理上較為麻煩。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language,...other) &#123;</span><br><span class="line"> </span><br><span class="line">    language = language || &apos;en&apos;;</span><br><span class="line">    </span><br><span class="line">    if (arguments.length === 0) &#123;</span><br><span class="line">        console.log(&apos;Missing parameters!&apos;);</span><br><span class="line">        console.log(&apos;-------------&apos;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    console.log(firstname);</span><br><span class="line">    console.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(arguments);</span><br><span class="line">    console.log(&apos;arg 0: &apos; + arguments[0]);</span><br><span class="line">    console.log(&apos;-------------&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br><span class="line">greet(&apos;John&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;,&apos;other1&apos;,&apos;other2&apos;);</span><br></pre></td></tr></table></figure><h3 id="計算加總-—-其餘參數"><a href="#計算加總-—-其餘參數" class="headerlink" title="計算加總 — 其餘參數"></a>計算加總 — 其餘參數</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function sum(...input) &#123;  </span><br><span class="line">  var result = 0;  </span><br><span class="line">  input.forEach(function(input) &#123;  </span><br><span class="line">    result += input;  </span><br><span class="line">  &#125;);  </span><br><span class="line">  return result;  </span><br><span class="line">&#125;  </span><br><span class="line">console.log(sum(1)); // 1  </span><br><span class="line">console.log(sum(1, 2, 3, 4, 5)); // 15</span><br></pre></td></tr></table></figure><h3 id="計算加總-—-arguments"><a href="#計算加總-—-arguments" class="headerlink" title="計算加總 — arguments"></a>計算加總 — arguments</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function sum() &#123;  </span><br><span class="line">  var result = 0;  </span><br><span class="line">  for (var i = 0;i&lt;arguments.length;i++)&#123;  </span><br><span class="line">    result += arguments[i]  </span><br><span class="line">  &#125;  </span><br><span class="line">  return result;  </span><br><span class="line">&#125;  </span><br><span class="line">console.log(sum(1)); // 1  </span><br><span class="line">console.log(sum(1, 2, 3, 4, 5)); // 15</span><br></pre></td></tr></table></figure><p>雖然 arguments 也能做到一樣的事情，但是因為不是真正的陣列，沒辦法使用 ES6 新增的一些好用的陣列方法，所以只能使用 for 迴圈一個個加總，或者使用其他方式將類陣列轉換成真正的陣列。</p><p>也因為 arguments 不能自訂一個名稱，所以也很難讓人明白到底這段程式是在做些什麼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一節是是關於另一個 JavaScript 的關鍵字「參數 (arguments)」，這是在執行一個函式的時候引擎會自動幫我們設定好的關鍵字。雖然在下一版本的 JavaScript 就不會這麼常提到這個關鍵字，而是用 &lt;code&gt;spread&lt;/code&gt; 處理 &lt;code
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="克服Javascript奇怪部份" scheme="http://yoursite.com/tags/%E5%85%8B%E6%9C%8DJavascript%E5%A5%87%E6%80%AA%E9%83%A8%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>用 Vue 做一個 Todolist</title>
    <link href="http://yoursite.com/2019/07/12/2019-07-12-1/"/>
    <id>http://yoursite.com/2019/07/12/2019-07-12-1/</id>
    <published>2019-07-11T16:00:00.000Z</published>
    <updated>2019-07-12T03:33:55.108Z</updated>
    
    <content type="html"><![CDATA[<p>完成品 <a href="https://chiangyuchi.github.io/vue-simple-todolist/" target="_blank" rel="noopener">https://chiangyuchi.github.io/vue-simple-todolist/</a><br>原始碼 <a href="(https://chiangyuchi.github.io/vue-simple-todolist/)">https://github.com/ChiangYuChi/vue-simple-todolist</a></p><h3 id="原始-HTML-結構"><a href="#原始-HTML-結構" class="headerlink" title="原始 HTML 結構"></a>原始 HTML 結構</h3><p>有一個 input 欄位，現在要在輸入後把文字加入代辦事項列表，首先設定一個代辦事項列表的基礎結構，包括：</p><ul><li>新增項目的輸入框、</li><li>點擊後把資料加入vue原始碼的按鈕</li><li>以陣列儲存資料內容的區段</li></ul><p>我們以 <code>v-for</code> 動態產生資料於畫面上。todos 陣列用來儲存所有待辦事項內容（*:id是v-bind的縮寫，用來綁定Vue資料與HTML屬性）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;input-group mb-3&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;input-group-prepend&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;input-group-text&quot; id=&quot;basic-addon1&quot;&gt;待辦事項&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;input-group-append&quot;&gt;</span><br><span class="line">              &lt;button class=&quot;btn btn-primary&quot; type=&quot;button&quot;&gt;新增&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;ul class=&quot;list-group list-group-flush text-left&quot;&gt;</span><br><span class="line">              &lt;li class=&quot;list-group-item&quot; &gt;</span><br><span class="line">                &lt;div class=&quot;d-flex&quot;&gt;</span><br><span class="line">                  </span><br><span class="line">                  &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">                    &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; &gt;</span><br><span class="line">                    &lt;label class=&quot;form-check-label&quot; &gt;</span><br><span class="line">                    &lt;/label&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                  &lt;!-- 刪除按鈕 --&gt;</span><br><span class="line">                  &lt;button type=&quot;button&quot; class=&quot;close ml-auto&quot; aria-label=&quot;Close&quot; &gt;</span><br><span class="line">                    &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;</span><br><span class="line">                  &lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="STEP-1-建立待辦事項的列表"><a href="#STEP-1-建立待辦事項的列表" class="headerlink" title="STEP 1 建立待辦事項的列表"></a>STEP 1 建立待辦事項的列表</h3><h4 id="HTML-部份"><a href="#HTML-部份" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><ul><li>以 <code>v-model</code> 實現雙向綁定輸入資料</li><li>以 <code>@click</code> 在 button 新增方法 </li><li>以 <code>@keyup.enter</code> 在 input 欄位新增方法</li><li>以 <code>v-for</code>  將資料內容儲存在陣列裡，名稱定義為 <code>item in todos</code>，是代辦事項內容取出呈現的位置。   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line">&lt;li class=&quot;todoItem&quot; v-for=&quot;item in todos&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;label class=&quot;form-check-label&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; &gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">&lt;li class=&quot;list-group-item&quot; v-model=&quot;item.completed&quot;    ：for=&quot;item.id&quot; &gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="JavaScript-部份"><a href="#JavaScript-部份" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">//儲存新增的待辦事項</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">//一個陣列，儲存目前待辦事項的內容</span><br><span class="line">todos:[&#123;</span><br><span class="line">//對應checkbox與待辦事項</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line">//新增一個待辦事項的方法</span><br><span class="line">addTodo:function()&#123;</span><br><span class="line">  var value = this.newTodo;</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>###STEP2 刪除陣列上的特定資料</p><h4 id="HTML-部份-1"><a href="#HTML-部份-1" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><ul><li>新增 <code>＠click=&quot;removeTodo(key)</code> 方法</li><li>為了讓電腦知道點擊的是哪一個，所以必須傳入相關參數，在 <code>item in todos</code> 加入索引值：<code>item,key)in todos</code></li><li>同時把索引值傳給 <code>＠click=&quot;removeTodo</code>方法:<code>＠click=&quot;removeTodo(key)</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> //刪除時必須傳入是哪一筆資料的參數,key是陣列索引位置</span><br><span class="line">&lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key)in todos&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line">&lt;label class=&quot;form-check-label&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"></span><br><span class="line">//傳入陣列索引位置</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; ＠click=&quot;removeTodo(key)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">&lt;/li</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ul><h4 id="JavaScript-部份-1"><a href="#JavaScript-部份-1" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><ul><li>在 methods 裡新增一個判斷式，如果輸入值是空的就不能新增；並以 <code>trim()</code>刪除多餘空白鍵</li><li>removeTodo 方法包含一個 key </li><li>用 splice() 方法刪除所存在位置（key) 的資料</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line">//去除多餘的空白</span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line">//如果沒有輸入值就無法新增</span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line">//刪除的方法包括了一個陣列索引的參數</span><br><span class="line">removeTodo:function(key)&#123;</span><br><span class="line">this.todos.splice(key,1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>###STEP3 製作頁籤分類功能</p><h4 id="HTML-部份-2"><a href="#HTML-部份-2" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><ul><li>利用動態切換 className 功能製造刪節線效果：<code>:class=&quot;{&#39;completed&#39;:item.completed}&quot;</code></li><li>利用動態切換 className 功能動態切換頁籤，如果className 是 all 的時候，visibility就切換為 all。切換條件是「按下頁籤」<code>:class=&quot;{&#39;active&#39;:visibility == &#39;all&#39;}&quot; @click=&quot;visibility=&#39;all&#39;&quot;</code></li><li>列表裡原始的 <code>todos</code> 現在是過濾後的 <code>filteredTodos</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//過濾是否完成</span><br><span class="line">&lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key)in filteredTodos&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line"></span><br><span class="line">//動態切換class</span><br><span class="line">&lt;label class=&quot;form-check-label&quot; :class=&quot;&#123;&apos;completed&apos;:item.completed&#125;&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; ＠click=&quot;removeTodo(key)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">//動態切換頁籤狀態</span><br><span class="line">&lt;div class=&quot;control&quot;&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;btn&quot; :class=&quot;&#123;&apos;active&apos;:visibility == &apos;all&apos;&#125;&quot; @click=&quot;visibility=&apos;all&apos;&quot;&gt;全部&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;btn&quot; :class=&quot;&#123;&apos;active&apos;:visibility == &apos;active&apos;&#125;&quot; @click=&quot;visibility=&apos;active&apos;&quot;&gt;進行中&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;btn&quot; :class=&quot;&#123;&apos;active&apos;:visibility == &apos;completed&apos;&#125;&quot;</span><br><span class="line">  @click=&quot;visibility=&apos;completed&apos;&quot;&gt;已完成&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;btn&quot; href=&quot;#&quot;&gt;清除所有任務&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="JavaScript-部份-2"><a href="#JavaScript-部份-2" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><ul><li>在 data 結構裡，新增一個變數 visibility，用來決定呈現哪一個頁籤 </li><li>過濾要呈現在不同頁籤的內容，使用 computed 功能，並在裡面宣告一個 <code>filteredTodos</code> 方法，在裡面新增判斷式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;],</span><br><span class="line">//新增變數</span><br><span class="line">visibility:&apos;all&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line"></span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line"></span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">removeTodo:function(key)&#123;</span><br><span class="line">this.todos.splice(key,1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//過濾</span><br><span class="line">computed: &#123;</span><br><span class="line">filteredTodos: function () &#123;</span><br><span class="line">if (this.visibility == &apos;all&apos;) &#123;</span><br><span class="line">return this.todos;</span><br><span class="line">&#125; else if (this.visibility == &apos;active&apos;) &#123;</span><br><span class="line">var newTodos = [];</span><br><span class="line">this.todos.forEach(function (item) &#123;</span><br><span class="line">if (!item.completed) &#123;</span><br><span class="line">newTodos.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">return newTodos;</span><br><span class="line">&#125; else if (this.visibility == &apos;completed&apos;) &#123;</span><br><span class="line">var newTodos = [];</span><br><span class="line"> this.todos.forEach(function (item) &#123;</span><br><span class="line">if (item.completed) &#123;</span><br><span class="line">newTodos.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">return newTodos;</span><br><span class="line">&#125;</span><br><span class="line"> return [];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="CSS-部份"><a href="#CSS-部份" class="headerlink" title="CSS 部份"></a>CSS 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">          .completed &#123;</span><br><span class="line">            text-decoration: line-through</span><br><span class="line">          &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="STEP4-雙擊修改資料內容"><a href="#STEP4-雙擊修改資料內容" class="headerlink" title="STEP4 雙擊修改資料內容"></a>STEP4 雙擊修改資料內容</h3><h4 id="HTML-部份-3"><a href="#HTML-部份-3" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><ul><li><p>雙擊觸發 <code>@dblclick=&quot;editTodo(item)&quot;</code>方法</p></li><li><p>新增 <code>v-if</code> 判斷式：假如原本畫面上的資料的 id 不等於暫存編輯中的 id，就顯示出來</p></li><li><p>編輯中的資料內容：<code>v-model=&quot;cacheTitle&quot;</code></p></li><li><p>取消編輯：<code>@keyup.esc=&quot;cancelEdit()</code></p></li><li><p>儲存編輯內容：<code>@keyup.enter=&quot;doneEdit(item)&quot;</code></p></li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//雙擊修改</span><br><span class="line"> &lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key) in filteredTodos&quot; @dblclick=&quot;editTodo(item)&quot;&gt;</span><br><span class="line">//判斷是否顯示編輯框</span><br><span class="line">&lt;div class=&quot;d-flex&quot; v-if=&quot;item.id !==cacheTodo.id&quot;&gt;</span><br><span class="line"> &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line">  &lt;label class=&quot;form-check-label&quot; :class=&quot;&#123;&apos;completed&apos;:item.completed&#125;&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; @click=&quot;removeTodo(key)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">//cache所存id與item id如果相同就隱藏內容顯示輸入框</span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-if=&quot;item.id ===cacheTodo.id&quot; v-model=&quot;cacheTitle&quot;</span><br><span class="line">@keyup.esc=&quot;cancelEdit()&quot; @keyup.enter=&quot;doneEdit(item)&quot;&gt;</span><br><span class="line"> &lt;/li&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-3"><a href="#JavaScript-部份-3" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><ul><li>新增 <code>cacheTodo:{}</code>，暫存編輯資料，新增 <code>cacheTitle</code>，暫存編輯標題</li><li>取消編輯：cacheTodo 等於一個空物件 <code>this.cacheTodo = {}</code></li><li>完成編輯：把 item 的標題指向剛剛預存的標題 <code>item.title = this.cacheTitle;</code> 然後把預存標題清空，將 cacheTodo 替換回來</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;],</span><br><span class="line">//暫存編輯事項</span><br><span class="line">cacheTodo: &#123;&#125;,</span><br><span class="line">cacheTitle: &apos;&apos;,</span><br><span class="line"></span><br><span class="line">visibility:&apos;all&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line"></span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line"></span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">removeTodo:function(key)&#123;</span><br><span class="line">this.todos.splice(key,1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">//編輯待辦事項的方法</span><br><span class="line">editTodo: function (item) &#123;</span><br><span class="line">this.cacheTodo = item;</span><br><span class="line">this.cacheTitle = item.title;</span><br><span class="line">console.log(item)</span><br><span class="line"> &#125;,</span><br><span class="line"> //取消編輯</span><br><span class="line"> cancelEdit: function () &#123;</span><br><span class="line"> this.cacheTodo = &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //儲存完成的編輯</span><br><span class="line">   doneEdit: function (item) &#123;</span><br><span class="line">                    item.title = this.cacheTitle;</span><br><span class="line">                    this.cacheTitle = &apos;&apos;;</span><br><span class="line">                    this.cacheTodo = &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><h3 id="STEP5-修改刪除項目的索引"><a href="#STEP5-修改刪除項目的索引" class="headerlink" title="STEP5 修改刪除項目的索引"></a>STEP5 修改刪除項目的索引</h3><p>修正刪除項目的索引位置</p><h4 id="HTML-部份-4"><a href="#HTML-部份-4" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><ul><li>刪除鍵本來傳入的是 key，改成傳入 item </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;準備要做的任務&quot; v-model=&quot;newTodo &quot; :id=&quot;item.id&quot; @keyup.enter=&quot;addTodo&quot;&gt;</span><br><span class="line"> &lt;button class=&quot;btn btn-primary&quot; @click=&quot;addTodo&quot;&gt;新增&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//雙擊修改</span><br><span class="line"> &lt;li class=&quot;todoItem&quot; v-for=&quot;(item,key) in filteredTodos&quot; @dblclick=&quot;editTodo(item)&quot;&gt;</span><br><span class="line">//判斷是否顯示編輯框</span><br><span class="line">&lt;div class=&quot;d-flex&quot; v-if=&quot;item.id !==cacheTodo.id&quot;&gt;</span><br><span class="line"> &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; v-model=&quot;item.completed&quot; :id=&quot;item.id&quot;&gt;</span><br><span class="line">  &lt;label class=&quot;form-check-label&quot; :class=&quot;&#123;&apos;completed&apos;:item.completed&#125;&quot; :for=&quot;item.id&quot;&gt;</span><br><span class="line">&#123;&#123;item.title&#125;&#125;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;btn-delete&quot; </span><br><span class="line"> //參數是item，就是目前點選的物件</span><br><span class="line"> @click=&quot;removeTodo(item)&quot;&gt;刪除&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-if=&quot;item.id ===cacheTodo.id&quot; v-model=&quot;cacheTitle&quot;</span><br><span class="line">@keyup.esc=&quot;cancelEdit()&quot; @keyup.enter=&quot;doneEdit(item)&quot;&gt;</span><br><span class="line"> &lt;/li&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-4"><a href="#JavaScript-部份-4" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><ul><li>在 removeTodo 裡，原本傳入的是索引值，現修正為 todo list 本身</li><li>在裡面宣告 newIndex 等於一空值</li><li>用迴圈比對刪除的物件跟所有物件的 id 要符合，如果符合就取出他的索引值，並放到要刪除的位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">newTodo:&apos;&apos;</span><br><span class="line">todos:[&#123;</span><br><span class="line">id:&apos;345&apos;,</span><br><span class="line">title: &apos;你好&apos;,</span><br><span class="line">completed:false</span><br><span class="line">&#125;],</span><br><span class="line">//暫存編輯事項</span><br><span class="line">cacheTodo: &#123;&#125;,</span><br><span class="line">cacheTitle: &apos;&apos;,</span><br><span class="line"></span><br><span class="line">visibility:&apos;all&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods&#123;</span><br><span class="line"></span><br><span class="line">addTodo:function()&#123;</span><br><span class="line"></span><br><span class="line">  var value = this.newTodo.trim();</span><br><span class="line">  var timestamp = Math.floor(Date.now());</span><br><span class="line"></span><br><span class="line">  if(!value)&#123;</span><br><span class="line">  return</span><br><span class="line">  &#125;</span><br><span class="line">  this.todos.push(&#123;</span><br><span class="line">  id: timestamp,</span><br><span class="line">  itle: value,</span><br><span class="line">  computed: false</span><br><span class="line">  &#125;);</span><br><span class="line">  this.newTodo = &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//讓所有待辦事項的索引值保持一致，函數參數要改成todo本身</span><br><span class="line"> removeTodo: function (todo) &#123;</span><br><span class="line"> var newIndex = &quot;&quot;;</span><br><span class="line"> var vm = this;</span><br><span class="line">vm.todos.forEach(function (item, key) &#123;</span><br><span class="line">if (todo.id === item.id) &#123;</span><br><span class="line">newIndex = key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">this.todos.splice(newIndex, 1)</span><br><span class="line">&#125;,,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="STEP6-刪除全部及還有幾筆任務未完成"><a href="#STEP6-刪除全部及還有幾筆任務未完成" class="headerlink" title="STEP6 刪除全部及還有幾筆任務未完成"></a>STEP6 刪除全部及還有幾筆任務未完成</h3><h4 id="HTML-部份-5"><a href="#HTML-部份-5" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;control&quot;&gt;</span><br><span class="line">&lt;a class=&quot;btn&quot; href=&quot;#&quot; @click=&quot;clearAll&quot;&gt;清除所有任務&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">&lt;span&gt;還有 &#123;&#123;undoneRecords &#125;&#125; 筆任務未完成&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-5"><a href="#JavaScript-部份-5" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line"> clearAll: function () &#123; this.todos = [];</span><br><span class="line">&#125;&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> computed: &#123;</span><br><span class="line"> undoneRecords:function()&#123;</span><br><span class="line">var undoneRecords=[];</span><br><span class="line"> this.todos.forEach(function(item)&#123;</span><br><span class="line"> if(!item.completed)&#123;</span><br><span class="line"> undoneRecords.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> return.undoneRecords.length;</span><br><span class="line"> &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;完成品 &lt;a href=&quot;https://chiangyuchi.github.io/vue-simple-todolist/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://chiangyuchi.github.io/vue-simple-
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day30-觀念小叮嚀：陣列--任何東西的集合</title>
    <link href="http://yoursite.com/2019/07/12/2019-07-12-2/"/>
    <id>http://yoursite.com/2019/07/12/2019-07-12-2/</id>
    <published>2019-07-11T16:00:00.000Z</published>
    <updated>2019-07-13T03:08:20.129Z</updated>
    
    <content type="html"><![CDATA[<p>陣列是包含許多東西的集合，陣列可以被宣告，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array();</span><br></pre></td></tr></table></figure><p>或者使用陣列實體語法，和物件實體語法類似，除了它是用中括號而不是大括號。放進我要的值，並且在陣列裡面用逗號分隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">arr[2];</span><br></pre></td></tr></table></figure><p>陣列索引值從 0 開始，所以我可以用中括號決定我要抓出哪一個值。2 是第三個值，以此類推。這對以其他程式語言處理陣列的人來說，似乎沒什麼需要解釋的地方。但因為 JavaScript 是動態型別，所以它的陣列有一點不一樣。</p><p>在大部分程式語言，陣列可以包含一連串相同型別的東西，像是一個數字陣列、一個字串陣列、一個物件陣列。但因為 JavaScript 是動態型別，所以我可以在陣列裡混合不同的型別。我可以有一個數字、一個布林值、一個物件實體（裡面有名稱屬性、地址屬性等等）、放進一個函數（因為函數就是物件，所以這裡用的是函數表示式）、再放進一個字串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var arr =[</span><br><span class="line">1,</span><br><span class="line">false,</span><br><span class="line">&#123;</span><br><span class="line">    name:&apos;Tony&apos;,</span><br><span class="line">    address:&apos;111 Main St.&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">function(name)&#123;</span><br><span class="line">    var greeting =&apos;Hello&apos;;</span><br><span class="line">    console.log(greeting + name)&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><p>上驗的例子在輸出的時候會報錯嗎？ 顯然沒有。所以 JavaScript 的陣列可以是任何型別的集合</p><p><img src="https://i.imgur.com/PAOhUzj.png" alt></p><p>基於這個原因，所以我們可以參照並且執行上面陣列裡的函數，用小括號呼叫，我要怎樣取用函數裡的名稱？作法是到上面陣列裡的函數，找第三個元件，接著用點運算子傳入名稱屬性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var arr =[</span><br><span class="line">1,</span><br><span class="line">false,</span><br><span class="line">&#123;</span><br><span class="line">    name:&apos;Tony&apos;,</span><br><span class="line">    address:&apos;111 Main St.&apos;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">function(name)&#123;</span><br><span class="line">    var greeting =&apos;Hello&apos;;</span><br><span class="line">    console.log(greeting + name)&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line">arr[3](arr[2].name);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/df7eDry.png" alt></p><p>所以陣列可以包含不同型別的東西，我可以參照到它，它也可以包括函數，所以我可以呼叫它。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;陣列是包含許多東西的集合，陣列可以被宣告，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="克服Javascript奇怪部份" scheme="http://yoursite.com/tags/%E5%85%8B%E6%9C%8DJavascript%E5%A5%87%E6%80%AA%E9%83%A8%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念-5 動態切換 ClassName 及 Style 多種方法</title>
    <link href="http://yoursite.com/2019/07/12/2019-07-12-3/"/>
    <id>http://yoursite.com/2019/07/12/2019-07-12-3/</id>
    <published>2019-07-11T16:00:00.000Z</published>
    <updated>2019-07-12T08:19:07.918Z</updated>
    
    <content type="html"><![CDATA[<p>假設我們要在原始 HTML 結構上動態為 .box 動態加上 className “rotate”</p><h3 id="物件寫法"><a href="#物件寫法" class="headerlink" title="物件寫法"></a>物件寫法</h3><ul><li>v-bind 綁定一個 class，附加一個物件，但因為是物件的關係，所以可以插入一個以上的值<h4 id="HTML-部份"><a href="#HTML-部份" class="headerlink" title="HTML 部份"></a>HTML 部份</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot; :class=&quot;&#123;&apos;rotate&apos;:isTransform,&apos;bg-danger&apos;:  boxColor &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">          &lt;p&gt;請為此元素加上動態 className&lt;/p&gt;</span><br><span class="line">          &lt;hr&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;isTransform = !isTransform&quot;&gt;選轉物件&lt;/button&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;classToggle1&quot; v-model=&quot;boxColor&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;classToggle1&quot;&gt;切換色彩&lt;/label&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份"><a href="#JavaScript-部份" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             isTransform: false,</span><br><span class="line">             boxColor: false</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure><h4 id="CSS-部份"><a href="#CSS-部份" class="headerlink" title="CSS 部份"></a>CSS 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">          transition: transform .5s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box.rotate &#123;</span><br><span class="line">          transform: rotate(45deg)</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="物件寫法2"><a href="#物件寫法2" class="headerlink" title="物件寫法2"></a>物件寫法2</h3><p>直接在 Vue 的 data 結構裡宣告物件，並在 HTML 裡直接使用，再以點擊事件觸發旋轉，以v-model更改色彩</p><h4 id="HTML-部份-1"><a href="#HTML-部份-1" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot; :class=&quot;objectClass&quot;&gt;&lt;/div&gt;</span><br><span class="line">          &lt;p&gt;請將此範例改為 &quot;物件&quot; 寫法&lt;/p&gt;</span><br><span class="line">          &lt;hr&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;objectClass.rotate = !objectClass.rotate&quot;&gt;選轉物件&lt;/button&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;classToggle2&quot; v-model=&quot;objectClass[&apos;bg-danger&apos;]&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;classToggle2&quot;&gt;切換色彩&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-1"><a href="#JavaScript-部份-1" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             isTransform: false,</span><br><span class="line">             boxColor: false,</span><br><span class="line">             objectClass: &#123;</span><br><span class="line">               &apos;rotate&apos;: false,</span><br><span class="line">               &apos;bg-danger&apos;: false,</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure><h4 id="CSS-部份-1"><a href="#CSS-部份-1" class="headerlink" title="CSS 部份"></a>CSS 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">          transition: transform .5s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box.rotate &#123;</span><br><span class="line">          transform: rotate(45deg)</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="陣列方式"><a href="#陣列方式" class="headerlink" title="陣列方式"></a>陣列方式</h3><p>適用於 className 長度不確定者，動態地將 className 存在陣列裡面。</p><h4 id="HTML-部份-2"><a href="#HTML-部份-2" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class=&quot;btn  &quot; :class=&quot;arrayClass&quot;&gt;請操作本元件&lt;/button&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-2"><a href="#JavaScript-部份-2" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">             isTransform: false,</span><br><span class="line">             boxColor: false,</span><br><span class="line">             objectClass: &#123;</span><br><span class="line">               &apos;rotate&apos;: false,</span><br><span class="line">               &apos;bg-danger&apos;: false,</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure><h4 id="CSS-部份-2"><a href="#CSS-部份-2" class="headerlink" title="CSS 部份"></a>CSS 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">          transition: transform .5s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box.rotate &#123;</span><br><span class="line">          transform: rotate(45deg)</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="綁定行內樣式的方法"><a href="#綁定行內樣式的方法" class="headerlink" title="綁定行內樣式的方法"></a>綁定行內樣式的方法</h3><p>以 <code>:style：&quot;{&#39;樣式屬性&#39;：&#39;樣式的值&#39;}&quot;</code> 插入行內樣式</p><h4 id="HTML-部份-3"><a href="#HTML-部份-3" class="headerlink" title="HTML 部份"></a>HTML 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot; :style=&quot;&#123;backgroundColor:&apos;red&apos;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot; :style=&quot;styleObject&quot;&gt;&lt;/div&gt;// 以變數方式插入</span><br><span class="line"> &lt;div class=&quot;box&quot; :style=&quot;[&#123;backgroundColor:&apos;red&apos;&#125;,&#123;borderWidth:&apos;5px&apos;&#125;]&quot;&gt;&lt;/div&gt; //以陣列方式插入</span><br><span class="line"> &lt;div class=&quot;box&quot; :style=&quot;[&#123;styleObject,styleObject2]&quot;&gt;&lt;/div&gt; //插入多個物件</span><br><span class="line"></span><br><span class="line">&lt;h5&gt;自動加上 Prefix (每個版本結果不同)&lt;/h5&gt;</span><br><span class="line"> &lt;div class=&quot;box&quot; :style=&quot;styleObject3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript-部份-3"><a href="#JavaScript-部份-3" class="headerlink" title="JavaScript 部份"></a>JavaScript 部份</h4><pre><code>&lt;script&gt;  var app = new Vue({    el: &apos;#app&apos;,    data: {      isTransform: false,      boxColor: false,      objectClass: {        &apos;rotate&apos;: false,        &apos;bg-danger&apos;: false,      },      //行內樣式      //使用駝峰式命名      styleObject: {        backgroundColor: &apos;red&apos;,        borderWidth: &apos;5px&apos;      },      styleObject2: {        backgroundColor: &apos;red&apos;,        boxShadow: &apos;3px 3px 5px rgba(0,0,0,0.16)&apos;      },      styleObject3: {        userSelect: &apos;none&apos;      },    }  })&lt;/script&gt;</code></pre><h4 id="CSS-部份-3"><a href="#CSS-部份-3" class="headerlink" title="CSS 部份"></a>CSS 部份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">          transition: transform .5s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box.rotate &#123;</span><br><span class="line">          transform: rotate(45deg)</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假設我們要在原始 HTML 結構上動態為 .box 動態加上 className “rotate”&lt;/p&gt;
&lt;h3 id=&quot;物件寫法&quot;&gt;&lt;a href=&quot;#物件寫法&quot; class=&quot;headerlink&quot; title=&quot;物件寫法&quot;&gt;&lt;/a&gt;物件寫法&lt;/h3&gt;&lt;ul&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念-4 元件基礎概念</title>
    <link href="http://yoursite.com/2019/07/11/2019-07-11-1/"/>
    <id>http://yoursite.com/2019/07/11/2019-07-11-1/</id>
    <published>2019-07-10T16:00:00.000Z</published>
    <updated>2019-07-11T07:40:31.596Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 的每一個元件都可以獨立儲存各自的狀態，以下是一個元件的範例，此範例以反引號來定義元件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">          // 請在此撰寫 JavaScript</span><br><span class="line">          Vue.component(&apos;counter-component&apos;, &#123;</span><br><span class="line">            data: function () &#123;</span><br><span class="line">              return &#123;</span><br><span class="line">                counter: 0</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            template: `&lt;div&gt;</span><br><span class="line">              &lt;button class=&quot;btn btn-outline-secondary btn-sm&quot; @click=&quot;counter += 1&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;`</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              counter: 0</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>元件可以重複使用，而且帶有一個名字，在這個例子中是 <code>counter-component</code>，我們可以在一個 new Vue 建立的 Vue 應用程式使用此組件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            你已經點擊 &lt;counter-component&gt;&lt;/counter-component&gt; 下。</span><br><span class="line">            你已經點擊 &lt;button class=&quot;btn btn-outline-secondary btn-sm&quot; @click=&quot;counter += 1&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt; 下。</span><br><span class="line"></span><br><span class="line">            &lt;counter-component&gt;&lt;/counter-component&gt;</span><br><span class="line">            &lt;counter-component&gt;&lt;/counter-component&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>元件是可以重複使用的，它們與 new Vue 接收相同的選項，例如 data、computed、watch、methods 以及生命周期。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue 的每一個元件都可以獨立儲存各自的狀態，以下是一個元件的範例，此範例以反引號來定義元件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念-3 常見表單與資料的綁定方式</title>
    <link href="http://yoursite.com/2019/07/10/2019-07-10-2/"/>
    <id>http://yoursite.com/2019/07/10/2019-07-10-2/</id>
    <published>2019-07-09T16:00:00.000Z</published>
    <updated>2019-07-11T06:39:57.941Z</updated>
    
    <content type="html"><![CDATA[<ul><li>綁定 input 輸入字串</li></ul><p>使用 v-model 綁定 input 輸入字串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;h4&gt;字串&lt;/h4&gt;</span><br><span class="line">          &#123;&#123; text &#125;&#125;</span><br><span class="line">          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">          &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>綁定 textarea 輸入字串</li></ul><p>使用 v-model 綁定 textarea 輸入字串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;pre&gt;&#123;&#123; textarea &#125;&#125;&lt;/pre&gt;</span><br><span class="line">          &lt;textarea cols=&quot;30&quot; rows=&quot;3&quot; class=&quot;form-control&quot; v-model=&quot;textarea&quot;&gt;</span><br><span class="line">          &lt;/textarea&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>運用 checkbox </li></ul><p>checkbox 的原始預設值是 true/false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check1&quot; v-model=&quot;checkbox1&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;check1&quot;&gt; 你要不要看電影 &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>以陣列方式運用 checkbox</li></ul><p>先用 v-model 取出不同的值，再加入空陣列 checkboxArray裡，接下來用 v-for 取出值渲染在畫面上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check2&quot; value=&quot;雞&quot; v-model=&quot;checkboxArray&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;check2&quot;&gt;雞&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check3&quot; value=&quot;豬&quot; v-model=&quot;checkboxArray&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;check3&quot;&gt;豬&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check4&quot; value=&quot;牛&quot; v-model=&quot;checkboxArray&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;check4&quot;&gt;牛&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;p&gt;晚餐火鍋裡有 &lt;span v-for=&quot;item in checkboxArray&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>運用 radio </li></ul><p>使用方式與上面雷同，先用 v-model 取出不同的值，再加入字串 singleRadio ，接下來用 v-for 取出值渲染在畫面上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; class=&quot;form-check-input&quot; id=&quot;radio2&quot; value=&quot;雞&quot; v-model=&quot;singleRadio&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;radio2&quot;&gt;雞&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;radio&quot; class=&quot;form-check-input&quot; id=&quot;radio3&quot; value=&quot;豬&quot; v-model=&quot;singleRadio&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;radio3&quot;&gt;豬&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;form-check&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;radio&quot; class=&quot;form-check-input&quot; id=&quot;radio4&quot; value=&quot;牛&quot; v-model=&quot;singleRadio&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;form-check-label&quot; for=&quot;radio4&quot;&gt;牛&lt;/label&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;p&gt;晚餐火鍋裡有 &lt;span v-for=&quot;item in singleRadio&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>運用 select</p><p>option 的保留為空的預設值，亦同樣以 v-model 取出不同的值，再加入字串 selected 。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=&quot;&quot; id=&quot;&quot; class=&quot;form-control&quot; v-model=&quot;selected&quot;&gt;</span><br><span class="line">            &lt;option value=&quot;&quot; disabled&gt;--請選擇--&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;賤人&quot;&gt;--賤人--&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;美女&quot;&gt;--美女--&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              textarea: &apos;&apos;,</span><br><span class="line">              checkbox1: false,</span><br><span class="line">              checkboxArray: [],</span><br><span class="line">              singleRadio: &apos;&apos;,</span><br><span class="line">              selected: &apos;&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;綁定 input 輸入字串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 v-model 綁定 input 輸入字串&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念-2 methods 與 computed 的使用情境</title>
    <link href="http://yoursite.com/2019/07/09/2019-07-10-1/"/>
    <id>http://yoursite.com/2019/07/09/2019-07-10-1/</id>
    <published>2019-07-08T16:00:00.000Z</published>
    <updated>2019-07-11T06:29:52.202Z</updated>
    
    <content type="html"><![CDATA[<p>computed 方法，會將結果直接回傳存到變數裡面，而且這個變數可以直接使用在畫面上。在 computed 內的任何屬性都是 function 。 原始 data 結構的值若更動時，computed 裡面的值才會跟著更動。- computed 是在監控資料更動後，重新運算結果呈現於畫面上，一般來說不會修改資料，只會回傳用於畫面呈現的資料。- methods 就是互動的函式，需要觸發才會運作會用來修改資料內容</p><ul><li>methods 就是互動的函式，需要觸發才會運作<br>會用來修改資料內容</li></ul><pre><code>&lt;div id=&quot;app&quot;&gt;          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot;&gt;          &lt;button class=&quot;btn btn-primary mt-1&quot;&gt;反轉字串&lt;/button&gt;          &lt;div class=&quot;mt-3&quot;&gt;            &lt;!-- {{ text.split('').reverse().join('') }}  表達式太冗長可以直接代替成computed裡的屬性結果會相同--&gt;            {{reverseText}}          &lt;/div&gt;          {{reverseText}}        &lt;/div&gt;&lt;/div&gt;  &lt;script&gt;          var app = new Vue({            el: &apos;#app&apos;,            data: {              text: &apos;&apos;,              newText: &apos;&apos;            },            // 請在此撰寫 JavaScript            computed: {              reverseText: function () {                return this.text.split(&apos;&apos;).reverse().join(&apos;&apos;);              }             },          });  &lt;/script&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;computed 方法，會將結果直接回傳存到變數裡面，而且這個變數可以直接使用在畫面上。在 computed 內的任何屬性都是 function 。 原始 data 結構的值若更動時，computed 裡面的值才會跟著更動。- computed 是在監控資料更動後，重新運算
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基礎概念-1 環境建立、指令與修飾符</title>
    <link href="http://yoursite.com/2019/07/09/2019-07-09/"/>
    <id>http://yoursite.com/2019/07/09/2019-07-09/</id>
    <published>2019-07-08T16:00:00.000Z</published>
    <updated>2019-07-11T05:25:58.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="環境建立"><a href="#環境建立" class="headerlink" title="環境建立"></a>環境建立</h3><p>Vue 的載入有 2 個版本，可以使用官網提供的CDN快速引入：</p><p>開發版本- 包含開發者工具、完整的警告、錯誤提示，適合開發時使用<br>生產版本- 刪除了警告，將上述開發工具都拔除，盡量縮小它的體積，適合正式發布時使用。</p><p>為了學習 Vue 的開發，因此我們選擇開發版本，並且在 script 標籤引入 vue.js 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//這樣這裡就可以準備撰寫vue的檔案啦!</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="建立-Vue-應用程式"><a href="#建立-Vue-應用程式" class="headerlink" title="建立 Vue 應用程式"></a>建立 Vue 應用程式</h3><p>建立 Vue 的應用程式，通常是以id來命名 (ex:app)，並且在javascript的地方以 new 初始化 vue，裡面放入一個物件，以el指定剛才命名的id app，這裡的 el 名稱，就是與後面 HTML 綁定的 id 名稱相同。</p><p>同時，在應用程式生成之後，必須綁定一個 HTML 元素。並在 data 建立一個物件放入資料，接著在html元素中以兩層花括號的方式指定要顯示的資料名稱，接著就會在畫面上呈顯出資料的部分。範例如下：</p><ul><li><p>HTML 部份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;app&apos;&gt;</span><br><span class="line">&#123;&#123;text&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>JavaScript 部份</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;some words&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><h4 id="不可建立巢狀應用程式"><a href="#不可建立巢狀應用程式" class="headerlink" title="不可建立巢狀應用程式"></a>不可建立巢狀應用程式</h4><p>要注意 Vue 雖然可以在同一個頁面建立多個應用程式，但是不能建立如下的巢狀結構，否則第二個應用程式會無效</p><ul><li><p>HTML 部份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;app&apos;&gt;</span><br><span class="line">&#123;&#123;text&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;div id=&apos;app2&apos;&gt;</span><br><span class="line">&#123;&#123;text2&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>JavaScript 部份</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;some words&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">var app2 = new Vue(&#123;</span><br><span class="line">            el: &quot;#app2&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text2: &apos;some words&apos;</span><br><span class="line">            &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h3 id="MVVM-與雙向自動綁定"><a href="#MVVM-與雙向自動綁定" class="headerlink" title="MVVM 與雙向自動綁定"></a>MVVM 與雙向自動綁定</h3><p>Vue 是受 MVVM 風格啟發的一套雙向數據綁定的 Javascript框架。MVVM 是一種軟體架構模式 </p><p><img src="https://i.imgur.com/MESxq2B.png" alt></p><p>它的核心只關心視圖層 (View)，它的核心是 MVVM 中的 VM，也就是 ViewModel。ViewModel負責連接 View 和 Model，保證視圖和數據的一致性。但我們在使用 Vue 的時候，只會利用 修改 Model 來影響視圖，是以資料狀態操作畫面，與例如 jQuery 以操作 DOM 方式改變畫面的方式不同。 </p><ul><li>模型<br>模型是指代表真實狀態內容的領域模型（物件導向），或指代表內容的資料存取層（以資料為中心）。</li><li>視圖<br>就像在MVC和MVP模式中一樣，視圖是用戶在螢幕上看到的結構、布局和外觀（UI）。</li><li>視圖模型<br>視圖模型是暴露公共屬性和命令的視圖的抽象。MVVM沒有MVC模式的控制器，也沒有MVP模式的presenter，有的是一個繫結器。在視圖模型中，繫結器在視圖和資料繫結器之間進行通訊。</li></ul><ol><li>使用雙花括號與資料串接</li><li>使用 v-model 綁定 HTML 屬性</li><li>使用 v-text 直接將資料寫入畫面</li><li>使用 v-html 除了將資料寫入畫面，還可修改 HTML 結構</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- HTML 部份</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &#123;&#123;message&#125;&#125;</span><br><span class="line">          &lt;div v-html=&quot;message&quot;&gt;&lt;/div&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- JavaScript 部份</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            // 在此建立資料內容</span><br><span class="line"></span><br><span class="line">            data: &#123;</span><br><span class="line">              message: &apos;&lt;span&gt;哈囉&lt;span&gt;&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="指令-Directives"><a href="#指令-Directives" class="headerlink" title="指令 (Directives)"></a>指令 (Directives)</h3><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><pre><code>透過指令 v-bind 的方式，將資料反應在HTML屬性上，更新 HTML 屬性。v-bind 是 Vue.js 裡面還蠻重要的功能，它可以用來綁定DOM元素中的屬性，並且將屬性的值交由Vue.js來控管，因此我們便可以動態的去綁定、控制屬性，進而使得該元素變成是可控制的元素。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;img v-bind:src=&quot;imgSrc&quot; v-bind:class=&quot;className&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              imgSrc: &apos;https://images.unsplash.com/photo-1479568933336-ea01829af8de?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=d9926ef56492b20aea8508ed32ec6030&amp;auto=format&amp;fit=crop&amp;w=2250&amp;q=80&apos;,</span><br><span class="line">              className: &apos;img-fluid&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>  使用 v-for 來呈現資料，動態產生多筆資料在畫面上。 這個方法就類似用 forEach 將陣列（list) 的值一一取出放到變數 (item) 裡，也可以再加上索引值 (index)。<br>  透過v-for的方式，我們可以將資料中的陣列遍歷出來，作法是在v-for後面的數值中，取一個任意的名稱(ex person)作為代表，取用方式如同一般我們要取出物件中的value一樣。<br>  另外也可以透過第二個參數的部分(ex index)來取得該筆資料的實際索引值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;pre&gt;&#123;&#123;list&#125;&#125;&lt;/pre&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;（item,index) in list&quot; &gt;</span><br><span class="line">              &#123;&#123;index+1&#125;&#125;-&#123;&#123;item.name&#125;&#125;年齡是&#123;&#123;item.age&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              list: [&#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  age: 16</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;媽媽&apos;,</span><br><span class="line">                  age: 38,</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><pre><code>透過v-if的情況，依據 v-if 後的條件是否為true時，決定該元素是否會顯示，若否則相反，並且該元素實際上會從DOM上消失。就是在 v-for 之上再加上一個判斷式。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;pre&gt;&#123;&#123;list&#125;&#125;&lt;/pre&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;（item,index) in list&quot; v-if=&quot;item.age&lt;25&quot;&gt;</span><br><span class="line">              &#123;&#123;index+1&#125;&#125;-&#123;&#123;item.name&#125;&#125;年齡是&#123;&#123;item.age&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              list: [&#123;</span><br><span class="line">                  name: &apos;小明&apos;,</span><br><span class="line">                  age: 16</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;媽媽&apos;,</span><br><span class="line">                  age: 38,</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="處理使用者互動行為-v-on"><a href="#處理使用者互動行為-v-on" class="headerlink" title="處理使用者互動行為 v-on"></a>處理使用者互動行為 v-on</h4><p>v-on 可以綁定 method 名稱，當然也需要在實例中 methods 中宣告相同名稱的 function。v-on顧名思義就是類似於原生js中的on事件，而使用方法一樣是要綁定的元素上，放一個v-on的屬性，例如，我們要在元素上定義一個點擊會alert一個提示的事件，我們就可以在後面寫上要觸發行為的條件(click)，並且在value的值內放入指定的method。<br>v-model 則是在 vue 中用來實現雙向綁定的方式。透過v-model綁定在元素上，我們可以創造一個雙向綁定資料的概念，也就是說假設我在表單組件input上設置v-model並綁定到data中的meesage上，他除了會即時顯示data.message中資料以外，我們在更動input中的數值時也會同步更改回data中message的value。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-primary mt-1&quot; v-on:click=&quot;reverseText&quot;&gt;反轉字串&lt;/button&gt;</span><br><span class="line">          &lt;div class=&quot;mt-3&quot;&gt;</span><br><span class="line">            &#123;&#123; newText &#125;&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              text: &apos;&apos;,</span><br><span class="line">              newText: &apos;&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 請在此撰寫 JavaScript</span><br><span class="line">            methods: &#123;</span><br><span class="line">              reverseText: function () &#123;</span><br><span class="line">                this.newText = this.text.split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="事件修飾符"><a href="#事件修飾符" class="headerlink" title="事件修飾符"></a>事件修飾符</h5><p>v-on 也可透過修飾符操作事件，在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。<br>Vue 提供了事件修飾符，包括：</p><p>.stop<br>.prevent<br>.capture<br>.self<br>.once<br>.passive</p><ul><li>此處在 v-on 之後透過修飾符取消預設行為</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">         &lt;button class=&quot;btn btn-primary mt-1&quot; v-on:click.prevent=&quot;reverseText&quot;&gt;反轉字串&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="按鍵修飾符"><a href="#按鍵修飾符" class="headerlink" title="按鍵修飾符"></a>按鍵修飾符</h5><p>Vue 允許為 v-on 在監聽鍵盤事件時添加按鍵修飾符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-on:keyup.enter=&quot;reverseText&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="用縮寫表示按鍵修飾符"><a href="#用縮寫表示按鍵修飾符" class="headerlink" title="用縮寫表示按鍵修飾符"></a>用縮寫表示按鍵修飾符</h5><p>v-on 可以 <code>＠</code> 符號來表示 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; ＠keyup.enter=&quot;reverseText&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>v-bind 可以用 <code>:</code> 表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;a :href=&quot;link&quot; class=&quot;btn btn-primary mt-1&quot; @click=&quot;reverseText&quot;&gt;反轉字串&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="v-class-動態切換-className"><a href="#v-class-動態切換-className" class="headerlink" title="v-class 動態切換 className"></a>v-class 動態切換 className</h4><p>可以傳給 v-bind:class 一個對象，動態切換 class：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        &lt;div class=&quot;alert alert-secondary&quot;&gt;</span><br><span class="line">          &lt;ol class=&quot;mb-0&quot;&gt;</span><br><span class="line">            &lt;li&gt;為 .box 動態加上 className &quot;rotate&quot;&lt;/li&gt;</span><br><span class="line">          &lt;/ol&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;box&quot; :class=&quot;&#123;&apos;rotate&apos;:isTransform&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">          &lt;hr&gt;</span><br><span class="line">          &lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;isTransform=!isTransform&quot;&gt;選轉物件&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">          var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              isTransform: false</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">          .box &#123;</span><br><span class="line">            transition: transform .5s;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          .box.rotate &#123;</span><br><span class="line">            transform: rotate(45deg)</span><br><span class="line">          &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;環境建立&quot;&gt;&lt;a href=&quot;#環境建立&quot; class=&quot;headerlink&quot; title=&quot;環境建立&quot;&gt;&lt;/a&gt;環境建立&lt;/h3&gt;&lt;p&gt;Vue 的載入有 2 個版本，可以使用官網提供的CDN快速引入：&lt;/p&gt;
&lt;p&gt;開發版本- 包含開發者工具、完整的警告、錯誤
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day29-物件、函數與 this</title>
    <link href="http://yoursite.com/2019/07/08/2019-07-08/"/>
    <id>http://yoursite.com/2019/07/08/2019-07-08/</id>
    <published>2019-07-07T16:00:00.000Z</published>
    <updated>2019-07-10T08:49:25.305Z</updated>
    
    <content type="html"><![CDATA[<p>函數是一種物件，具有屬性及其他特徵。回到執行環境來看，在函數被呼叫的時候，底層究竟發生什麼變化呢？ 現在要繼續深究物件、函數以及有時讓人感到困惑的關鍵字 ”this” 之間的關係。</p><h3 id="當函式被呼叫的時候"><a href="#當函式被呼叫的時候" class="headerlink" title="當函式被呼叫的時候"></a>當函式被呼叫的時候</h3><p>必須放在心中的是，當函數被呼叫的時候，會創造新的執行環境，放進執行堆，這決定了程式的執行方式。如果想一想執行環境，關注在函數物件的程式部分，當我執行程式屬性裡面的程式會怎麼樣？</p><p>我們知道執行環境被創造的時候，每個執行環境有自己的變數環境，也就是創建在函數裡面的變數所在的地方，它可以參照到外部詞彙環境，也就是它在程式碼當中的實際位置，讓它能夠隨著範圍鏈一路往下找，直到全域環境為止。</p><p>但是每當 在 JavaScript 引擎裡，每一次有一個執行環境創造的時候，每當函數被執行，JavaScript 引擎會給我們一個不曾宣告的<code>this</code> 變數。</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><code>this</code> 會根據函數被呼叫的方式，而指向不同的物件，這是相當重要的觀念。</p><h3 id="以直接取用的方式觀察-this"><a href="#以直接取用的方式觀察-this" class="headerlink" title="以直接取用的方式觀察 this"></a>以直接取用的方式觀察 this</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(this)</span><br></pre></td></tr></table></figure><p>在瀏覽器內執行，直接取用<code>this</code> ， 它會指向全域物件 <code>window</code> 物件。因為 <code>this</code> 會指向全域物件，在瀏覽器內的全域物件就是 window 物件。</p><p><img src="https://i.imgur.com/BaS1SUh.png" alt></p><h3 id="從函數陳述句觀察-this"><a href="#從函數陳述句觀察-this" class="headerlink" title="從函數陳述句觀察 this"></a>從函數陳述句觀察 this</h3><p>現在看另外一個例子，有一個命名為 <code>a</code> 的函數，呼叫 <code>a</code> ，創造執行環境時，其中一部分就是創造 <code>this</code> 關鍵字。<code>this</code> 關鍵字會在執行環境裡面變成什麼呢？仍然會指向全域物件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/0lZbWad.png" alt></p><h3 id="從函數表示式觀察-this"><a href="#從函數表示式觀察-this" class="headerlink" title="從函數表示式觀察 this"></a>從函數表示式觀察 this</h3><p>在這個例子中的 <code>this</code> 會變成什麼呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var b = function () &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>呼叫 <code>b</code> 的結果，<code>this</code> 仍然指向 <code>window</code> 物件。因為我們還是直接呼叫變數 <code>b</code> 的函式。</p><p><img src="https://i.imgur.com/LMsMAY1.png" alt></p><p>所以無論何時我創造函數，用函數表示式或函數陳述句，都不會影響到<code>this</code> 指向記憶體中的同一個位址，也就是全域物件。因為會影響到 <code>this</code> 的因素是函式如何被呼叫。</p><h3 id="延伸觀察"><a href="#延伸觀察" class="headerlink" title="延伸觀察"></a>延伸觀察</h3><p>每一個執行環境都有自己的 <code>this</code>，上面兩個小觀察中的<code>this</code> 指向記憶體中的同一個全域物件。根據這種特性，我們可以繼續延伸觀察。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">    this.newvariable=&apos;hello&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var b = function () &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line">console.log(newvariable);</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>在呼叫 <code>a</code> 之後，當 <code>a</code> 函式的 <code>this</code> 被創造郈， 我們可以用點運算子新增一個屬性， 將這個屬性連結到全域物件，所以在呼叫<br><code>a</code> 函式後，我們可以用 <code>console.log</code> 查詢<code>newvariable</code> 的值。</p><p><img src="https://i.imgur.com/8HAcRXZ.png" alt></p><p>為什麼這裡取用 <code>newvariable</code> 的時候不用點運算子？ 因為這時候的 <code>this</code> 指向全域物件。而所有連接到全域物件的變數都可以直接使用，因為這就像是在全域執行環境使用 <code>var</code> 宣告變數。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function a ()&#123;  </span><br><span class="line">  this.newVariable = &apos;hello&apos;;  </span><br><span class="line">&#125;  </span><br><span class="line">a();  </span><br><span class="line">var c = &apos;123&apos;;  </span><br><span class="line">console.log(window)</span><br></pre></td></tr></table></figure><p>我們在全域執行環境中宣告了變數 c ，並且跟上面的例子一樣直接呼叫函式 a ，並在函式 a 的程式內新增全域物件的屬性，接著觀察 window 的輸出。</p><p><img src="https://i.imgur.com/0NJ2FoV.png" alt></p><p><img src="https://i.imgur.com/WR4ZfC7.png" alt></p><p>可以發現如果 this 指向全域物件時，使用點運算子增加屬性到全域物件上，這時的效果會同於直接在全域執行環境上使用 var 宣告變數。</p><h3 id="物件實體內的方法"><a href="#物件實體內的方法" class="headerlink" title="物件實體內的方法"></a>物件實體內的方法</h3><p>現在我們已經了解函數表示式和函數陳述句，因此我們可以在物件內建立一個函式。</p><p>記得先前提到到，物件是許多名稱/值配對的組合，如果純值稱為屬性，但如果值是一個函數，則稱為方法。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var c = &#123;</span><br><span class="line">    name = &apos;the c object&apos;,</span><br><span class="line">    log:function()&#123;</span><br><span class="line">        console.log(this)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>現在所做的，不是直接呼叫函式，而是呼叫被創造在物件實體內的函式。所以要取用物件內的成員，就要使用點運算子，而且要加上 （）呼叫該函式，也就是 <code>c</code>物件的 <code>log</code> 方法。</p><p><img src="https://i.imgur.com/OawBVeh.png" alt></p><p>因為呼叫的方式改變了，這個範例裡面的 <code>this</code> 會指向有  <code>log</code> 方法的 <code>c</code> 物件，所以我們可以用這個特性，在方法內修改<code>c</code> 物件的 <code>name</code> 屬性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var c = &#123;</span><br><span class="line">    name : &apos;the c object&apos;,</span><br><span class="line">    log:function()&#123;</span><br><span class="line">        this.name=&apos;update c object&apos;,</span><br><span class="line">        console.log(this)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>我們改變了擁有函數的物件的屬性。</p><p><img src="https://i.imgur.com/IvT9TEO.png" alt></p><p>這相當有用，可以使用 <code>this</code> 改變這個包含方法的物件，可以取用同一物件的方法或是屬性。很常用也很簡潔。</p><h3 id="延伸範例"><a href="#延伸範例" class="headerlink" title="延伸範例"></a>延伸範例</h3><p>繼續看看混合範例裡面，<code>this</code> 仍然像我們想的那樣嗎？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var c = &#123;</span><br><span class="line">    name: &apos;the c object&apos;,</span><br><span class="line">    log: function () &#123;</span><br><span class="line">        this.name = &apos;update c object&apos;,</span><br><span class="line">            console.log(this);</span><br><span class="line">        var setname = function (newname) &#123;</span><br><span class="line">            this.name = newname;</span><br><span class="line">        &#125;</span><br><span class="line">        setname(&apos;update again! the c object&apos;);</span><br><span class="line">        console.log(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/IHHz0os.png" alt></p><p>這是為什麼？因為在 <code>log</code> 方法內，我們雖然新增了一個 <code>setName</code>函式，並且直接呼叫它，但是影響 <code>this</code>的是函式的呼叫方式，而非實際上程式碼的位置。所以即便這個方法內的 <code>this</code> 是指向 <code>c</code> 物件本身，但在setName 函式內的 this 仍然是指向全域物件 window 。 </p><p><img src="https://i.imgur.com/oxnycv8.png" alt></p><h3 id="常用解決模式"><a href="#常用解決模式" class="headerlink" title="常用解決模式"></a>常用解決模式</h3><p>既然我們已經知道物件是用 by reference 設定的，</p><p>我們可以設定一個變數，並且把想保存 <code>this</code> 用等號運算子設定給該變數就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    name: &apos;The c object&apos;,</span><br><span class="line">    log: function() &#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        </span><br><span class="line">        self.name = &apos;Updated c object&apos;;</span><br><span class="line">        console.log(self);</span><br><span class="line">        </span><br><span class="line">        var setname = function(newname) &#123;</span><br><span class="line">            self.name = newname;   </span><br><span class="line">        &#125;</span><br><span class="line">        setname(&apos;Updated again! The c object&apos;);</span><br><span class="line">        console.log(self);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/SrzDBfY.png" alt></p><p>如此就只要知道保存下來的 <code>this</code> 是指向誰就可以了。</p><p>在這個例子中，我希望保存 this 指向 c 物件的記憶體位址，因此用了變數 self 配合等號運算子，令其與 this 指向同樣的 c 物件的記憶體位址。這樣即使之後 this 變動，也已經 self 無關，我們仍然可以使用這個變數修改 c 物件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;函數是一種物件，具有屬性及其他特徵。回到執行環境來看，在函數被呼叫的時候，底層究竟發生什麼變化呢？ 現在要繼續深究物件、函數以及有時讓人感到困惑的關鍵字 ”this” 之間的關係。&lt;/p&gt;
&lt;h3 id=&quot;當函式被呼叫的時候&quot;&gt;&lt;a href=&quot;#當函式被呼叫的時候&quot; 
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="克服Javascript奇怪部份" scheme="http://yoursite.com/tags/%E5%85%8B%E6%9C%8DJavascript%E5%A5%87%E6%80%AA%E9%83%A8%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day28-傳值與參考值</title>
    <link href="http://yoursite.com/2019/06/29/2019-06-29/"/>
    <id>http://yoursite.com/2019/06/29/2019-06-29/</id>
    <published>2019-06-28T16:00:00.000Z</published>
    <updated>2019-06-30T10:31:40.702Z</updated>
    
    <content type="html"><![CDATA[<p>這一節又來到另一個重要觀念「傳值（by value)」與「參考值(by reference)」，這兩者都和變數關係密切。</p><h3 id="傳值"><a href="#傳值" class="headerlink" title="傳值"></a>傳值</h3><p>好比說有一種純值（primitive value)，可能是數字、布林或字串。我設定一個值到這個變數中，變數就有一個位址，它知道那個純值的記憶體位址。因為參考是參照到一個記憶體的位址。</p><p><img src="https://i.imgur.com/2DyKYst.png" alt></p><p>設定一個新變數，設定它等於 <code>a</code>，也可以說是我傳入 <code>a</code> 到一個函數，兒這個函數的名稱是 <code>b</code>。如果這是 JavaScript 中的純值，b這個新變數，將會指向一個新位址，一個新的記憶體地點。而那個純值的拷貝，被放到記憶體中的另一個地點。</p><p><img src="https://i.imgur.com/UqX7I5C.png" alt></p><p>所以如果 <code>a</code> 是 3，它在一個記憶體中的地點，接著 <code>b</code> 會指向 <code>3</code>，然後這個拷貝的地點，會被填上相同的值。這種方式叫做 <strong><em>by value</em></strong>&gt;。意思是會傳入一個值是直接拷貝另一個值，這兩個變數就相等了。藉由拷貝一個直到另一個記憶體中的地點。</p><h3 id="參考值"><a href="#參考值" class="headerlink" title="參考值"></a>參考值</h3><p>如果我在 JavaScript 裡面有一個物件，包含特殊類型的物件，像是函數。當我設定一個變數為物件，我仍然會得到一個記憶體位址，讓我可以參照到它。當 <code>b</code> 被設定等於 <code>a</code>，意思就是我要讓這兩個東西一樣，或者是把<code>a</code> 傳到函數裡面。這個新的變數 <code>b</code>，不會得到一個新的記憶體位址，而是指向 <code>a</code>的記憶體位址。沒有新的物件被創造，沒有物件的拷貝被創造。這兩個名稱都指向同一位址，就像有一個名字跟綽號一樣。這兩個名字都指向同一個地址的同一個人。<code>a</code> 和 <code>b</code> 有相同的值，因為當你要取用它們的值，他們會指向相同的記憶體位址。這叫做 <strong>by reference</strong>。</p><p><img src="https://i.imgur.com/Z7tJRaX.png" alt></p><p>參考值和傳值是很不同的，很重要的是要了解所有物件都是 by reference 的，當用等號設定他們相等的時候。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// by value (primitive)</span><br><span class="line">var a = 3</span><br><span class="line">var b;</span><br><span class="line">b = a </span><br><span class="line">a=2;</span><br><span class="line">console.log(a);</span><br><span class="line">console.log(b);</span><br></pre></td></tr></table></figure><p>這時會怎樣呢？ <code>a</code> 會是 3 ，<code>b</code> 也是。但記住，這是傳值，因為 3 是一個純值、一個數值（其他純值也會有相同作用）。所以當<code>b</code> 被設定等於<code>a</code> 的時候，等號運算子看到這些是純值，就創造一個新的記憶體位址給<code>b</code>，拷貝<code>a</code>的值到<code>b</code>的地址。所以兩者都是 3 。但他們兩個是在不同的記憶體位址。</p><blockquote><p>這表示我可以改變 <code>a</code> 的值，而不影響到 <code>b</code>，因為他們是記憶體中不同的2 點。</p></blockquote><p><img src="https://i.imgur.com/g0Z3oED.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// by reference (all objects include functions)</span><br><span class="line">var c = &#123;greeting:&quot;hi&quot;&#125;;</span><br><span class="line">var d;</span><br><span class="line">d = c;</span><br><span class="line">c.greeting=&quot;hello&quot; // mutate</span><br><span class="line">console.log(c);</span><br><span class="line">console.log(d);</span><br></pre></td></tr></table></figure><blockquote><p>mutate : 改變某件事情 （to change something)<br> 如果深入看一些 JavaScript 文件，可能會看見”mutate a object”、”mutate a value”，可能是新增或移除屬性。<br>immutable : 不能被改變 （it can’t be changed)</p></blockquote><p>等號運算子知道它們是物件，所以不會建立一個新的記憶體位址給 <code>d</code>，而是把 <code>d</code> 指向和 <code>c</code> 相同的記憶體位址。所以當我輸出這兩個東西，會看到同樣的值，但它們不是對方值的拷貝，它們只是指向同一個記憶體位址。我有一個物件在記憶體中，它有一個 greeting 屬性，我把它的值從 <code>hi</code> 改變為 <code>hello</code>，我改變 (mutate) 了它。</p><p>要記得，當處理物件的時候，你設定它等於另一個物件，你只是把兩個變數名稱指向同一個位址。</p><p><img src="https://i.imgur.com/R6I4eMd.png" alt></p><p>所以如果我改變那個物件的值，它用什麼名稱並不重要，它們只是別名而已。由於物件指向同一個位址，一旦你改變其中一個，另一個也跟著改變。</p><p>當我用函數的參數時也一樣。儘管是參數，物件也經由參考被傳入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// by reference (even as paremeters)</span><br><span class="line"></span><br><span class="line">var c = &#123;greeting:&quot;hi&quot;&#125;;</span><br><span class="line">var d;</span><br><span class="line">d = c;</span><br><span class="line">c.greeting=&quot;hello&quot; // mutate</span><br><span class="line">console.log(c);</span><br><span class="line">console.log(d);</span><br><span class="line"></span><br><span class="line">function changeGreeting(obj)&#123;</span><br><span class="line">obj.greeting =&quot;hola&quot;; // mutate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeGreeting(d);</span><br><span class="line"></span><br><span class="line">console.log(c);</span><br><span class="line">console.log(d);</span><br></pre></td></tr></table></figure><p>傳入 <code>d</code> 到函數，<code>d</code> 就是 <code>obj</code>，所以它被改變了。就像等號一樣，把一個物件傳入函數裡，表示它們是傳入它們的參考點 （by reference)，所以<code>obj</code> 會指向<code>d</code>的記憶體位址，而<code>d</code>已經指向<code>c</code> 的記憶體位址。當它被改變，表示會更新這個物件所指向的記憶體位址裡面的值。</p><p><img src="https://i.imgur.com/DpClwIO.png" alt></p><h3 id="等號運算子設定一個新的記憶體空間"><a href="#等號運算子設定一個新的記憶體空間" class="headerlink" title="等號運算子設定一個新的記憶體空間"></a>等號運算子設定一個新的記憶體空間</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//equals operator sets up a new memory space (a new address)</span><br><span class="line"></span><br><span class="line">c=&#123;greeting:&apos;howdy&apos;&#125;;</span><br><span class="line">console.log(c);</span><br><span class="line">console.log(d);</span><br></pre></td></tr></table></figure><p>這個例子中的等號，我設定 <code>c</code> 為一個新的值，等號運算子會設定一個新的記憶體空間給<code>c</code>，放進那個值，所以 <code>d</code> 和<code>c</code>就不再指向同一個記憶體位址。 <code>d</code> 仍然指向 hola。<br><img src="https://i.imgur.com/uxDDUlL.png" alt></p><p>這是一個特殊例子，這不是 by reference，因為等號運算子看到這些東西還不存在於記憶體裡面，它看到第二個參數不是已經存在的物件，它必須創造一個新的記憶體空間給物件，所以它建立一個新的空間，然後指向 <code>c</code>。在上個例子中我設定<code>d</code> 等於 <code>c</code>，<code>c</code>已經存在了。但在這個例子中， <code>c</code>現在指向不同於<code>d</code>的記憶體位址。</p><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>了解 by value 和 by reference 的差異很重要，因為在 JavaScript 裡面所有的純值都是  by value 而所有的物件都是 by reference。這在除錯時是非常重要的關鍵觀念。但是了解之後，就會知道當物件被改變了，那所有的物件、所有的變數，指向相同位址的東西都會被改變。所以屆時我們就可以了解，如果不小心無意改變了物件，那可能是傳入了這個物件的參考點而不自知。另一方面，改變一個純值，但原始的值並不會被改變，因為它是 by value。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一節又來到另一個重要觀念「傳值（by value)」與「參考值(by reference)」，這兩者都和變數關係密切。&lt;/p&gt;
&lt;h3 id=&quot;傳值&quot;&gt;&lt;a href=&quot;#傳值&quot; class=&quot;headerlink&quot; title=&quot;傳值&quot;&gt;&lt;/a&gt;傳值&lt;/h3&gt;&lt;p&gt;好比
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="克服Javascript奇怪部份" scheme="http://yoursite.com/tags/%E5%85%8B%E6%9C%8DJavascript%E5%A5%87%E6%80%AA%E9%83%A8%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Git 基本指令</title>
    <link href="http://yoursite.com/2019/06/25/2019-06-25/"/>
    <id>http://yoursite.com/2019/06/25/2019-06-25/</id>
    <published>2019-06-24T16:00:00.000Z</published>
    <updated>2019-06-28T07:05:13.091Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用終端機指令"><a href="#常用終端機指令" class="headerlink" title="常用終端機指令"></a>常用終端機指令</h3><p>$ pwd (print working directory 印出現在所在位置)<br>$ mkdir hello (make dir 建立目錄 hello)<br>$ cd hello/（change dir 移動到目錄 hello）<br>$ cd .. (回到上一層目錄)<br>$ touch index.html (建立檔案 index.html)<br>$ ls (列出目錄裡所有檔案)<br>$ ls -al (列出目錄裡所有檔案的細節)<br>$ rm index.html(徹底刪除檔案)<br>$ rm -r hello/ (徹底刪除hello資料夾)<br>$ cp hello.html world.html （複製 hello.html 為 world.html）<br>$ mv world.html images/ (把 world.html 搬到 images 資料夾 )<br>$ mv world.html 123.html (把 world.html 改名 123.html)</p><p><img src="https://i.imgur.com/6TPZXrC.png" alt></p><h3 id="使用-git"><a href="#使用-git" class="headerlink" title="使用 git"></a>使用 git</h3><h4 id="檢視目前設定"><a href="#檢視目前設定" class="headerlink" title="檢視目前設定"></a>檢視目前設定</h4><p>$ git config –list</p><h4 id="設定帳密"><a href="#設定帳密" class="headerlink" title="設定帳密"></a>設定帳密</h4><p>$ git config –global user.name ‘cxxxxxxx’<br>$ git config –global user.email ‘cxxxxxxx@gmail.com’</p><h4 id="查詢設定"><a href="#查詢設定" class="headerlink" title="查詢設定"></a>查詢設定</h4><p>$ git config –list</p><h3 id="Git-初始化"><a href="#Git-初始化" class="headerlink" title="Git 初始化"></a>Git 初始化</h3><p>讓 Git 知道這個資料夾要進行版控</p><ul><li>建立目錄<br>$ mkdir git-practice<br>$ cd git-practice</li><li>git 初始化<br>$ git init (自動建立一個.git目錄)</li></ul><h3 id="Git-重要區塊"><a href="#Git-重要區塊" class="headerlink" title="Git 重要區塊"></a>Git 重要區塊</h3><ul><li>工作目錄 (working)</li><li>暫存區域 (staging)</li><li>儲存庫 (repository)</li></ul><blockquote><p>它們並不是被放到某個「目錄」，比較像是狀態的「改變」</p></blockquote><h4 id="新增檔案"><a href="#新增檔案" class="headerlink" title="新增檔案"></a>新增檔案</h4><ul><li>現在 git 狀態<br>$ git status<br>$ git add index.html (新增一個檔案的時候，status 還是 untracked file，之後從工作目錄改到暫存區域變成 new file )<br>$ git commit -m “add index” (推到儲存庫，status 顯示 working tree clean)</li></ul><p><img src="https://i.imgur.com/hJEeFVT.png" alt></p><blockquote><p>add+commit 這樣的循環是一次存檔<br>commit 的訊息很重要，重點是這次存了什麼</p></blockquote><ul><li>檢視記錄<br>$ git log<br>$ git log –oneline</li></ul><h3 id="Git-使用情境-1"><a href="#Git-使用情境-1" class="headerlink" title="Git 使用情境 1"></a>Git 使用情境 1</h3><ul><li><p>檔案不小心刪掉怎麼辦？<br>$ rm index.html<br>$ git checkout –index.html<br>$ git checkout . (把這個目錄恢復成最近一次 commit 狀態)</p></li><li><p>查詢檔案作者<br>$ git blame index.html</p></li><li><p>git 裡新增目錄並進行版控<br>由於 git 不會把空資料夾運算進版控，所以可以放一個隱藏檔<br>$ touch hello-world/.keep</p></li></ul><h3 id="使用分支"><a href="#使用分支" class="headerlink" title="使用分支"></a>使用分支</h3><p>為什麼要使用分支？</p><blockquote><p>一般來說，我們分支只是貼在某個 commit 上的貼紙，例如下圖的 master :</p></blockquote><p><img src="https://i.imgur.com/Vly0sFs.png" alt></p><ul><li>查詢分支<br>$ git branch </li><li>開新分支<br>$ git branch xxxx (git branch 後面加上要開的分支名稱)</li></ul><p><img src="https://i.imgur.com/keIwyUn.png" alt></p><blockquote><p>如果 HEAD 現在指向 master，意思就是「現在正在 master 分之上」</p></blockquote><ul><li>切換分支<br>$ git checkout cat (switched to master ‘cat’ )</li><li>合併分支<br>$ git merge cat </li></ul><p>合併前：<br><img src="https://i.imgur.com/9VLiKmo.png" alt><br>合併後：<br><img src="https://i.imgur.com/xyO3GU3.png" alt></p><blockquote><p>合併分支可看成只是在移動貼紙，但是這邊的合併還算單純，所以算是一種「<strong>快轉合併</strong>」</p><ul><li>刪除分支<br>$ git branch -d cat<br>只是把 cat 貼紙撕掉<br>commit 或是檔案不會因此受到影響<br>Git 的本體是 commit </li></ul></blockquote><h3 id="複雜一點的分支"><a href="#複雜一點的分支" class="headerlink" title="複雜一點的分支"></a>複雜一點的分支</h3><p>如果是各自新增的 branch 就沒辦法快轉合併了，要怎麼處理？例如現在分別有一個 dog 跟 cat branch，假設現在 HEAD 指向 dog branch：<br><img src="https://i.imgur.com/cM5Ho0b.png" alt></p><ul><li>合併 dog 跟 cat branch<br>$ git merge cat</li></ul><p><img src="https://i.imgur.com/nR08OV6.png" alt></p><h3 id="另一種合併分支的方式-（rebase"><a href="#另一種合併分支的方式-（rebase" class="headerlink" title="另一種合併分支的方式 （rebase)"></a>另一種合併分支的方式 （rebase)</h3><p><img src="https://i.imgur.com/ymEIFIf.png" alt><br><img src="https://i.imgur.com/ZHgFviZ.png" alt></p><pre><code>以 rebase 合併的好處：合併的歷史比較簡潔乾淨，但相對 merge，就比較難看清楚整個檔案的分支記錄過程。</code></pre><h3 id="如何回到上一步-返回之前狀態"><a href="#如何回到上一步-返回之前狀態" class="headerlink" title="如何回到上一步 (返回之前狀態)"></a>如何回到上一步 (返回之前狀態)</h3><blockquote><p> 對 Git 常見的誤解是以為 reset 是刪除 commit 的意思。但是 Git 的世界事實上沒有刪除 Commit 的指令。一般我們把 reset 理解成「重新設定」，其實可以理解成 become，一種「我想要變成XXX」的狀態。</p><blockquote></blockquote></blockquote><p>原始檔案狀態：<br><img src="https://i.imgur.com/JHdTMi7.png" alt><br>reset 狀態：<br><img src="https://i.imgur.com/8g5Njgz.png" alt></p><p>參數狀態決定檔案去留，常見參數有</p><ul><li>mixed</li><li>soft</li><li>hard</li></ul><p><img src="https://i.imgur.com/L8ghm4Q.png" alt></p><p>在使用 –hard 的時候，如果要再次恢復專案到上一步，要怎樣做？</p><h3 id="reflog-reference-log"><a href="#reflog-reference-log" class="headerlink" title="reflog (reference log )"></a>reflog (reference log )</h3><p>Git 會把移動軌跡都記錄在 reference log，如果使用 –hard 之後想要復原，可先查詢 reflog </p><h4 id="絕對定位法"><a href="#絕對定位法" class="headerlink" title="絕對定位法"></a>絕對定位法</h4><p>$ git reflog (查詢 commit 編號)<br>$ git reset xxxxx(commit 編號) –hard </p><h4 id="相對定位"><a href="#相對定位" class="headerlink" title="相對定位"></a>相對定位</h4><ul><li><code>^</code> Caret</li><li><code>~</code> Tilde </li></ul><p><img src="https://i.imgur.com/lMofhTE.png" alt></p><p>但是如果每次都要輸入 commit 編號有點麻煩，可以把編號改成代號，例如回到現在狀態的前 2 步</p><p><img src="https://i.imgur.com/DruAI8w.png" alt></p><p>例如回到上一個步驟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^ --mixed</span><br></pre></td></tr></table></figure><h4 id="reset-跟-checkout-差別是什麼？"><a href="#reset-跟-checkout-差別是什麼？" class="headerlink" title="reset 跟 checkout 差別是什麼？"></a>reset 跟 checkout 差別是什麼？</h4><p><img src="https://i.imgur.com/fSAJhWD.png" alt></p><h3 id="Git-使用情境-2"><a href="#Git-使用情境-2" class="headerlink" title="Git 使用情境 2"></a>Git 使用情境 2</h3><ul><li><p>回到上一個步驟的兩種作法<br>$ git reset xxxxx(commit 編號) –mixed<br>$ git reset HEAD^ –mixed</p></li><li><p>合併發生衝突怎麼辦？</p></li></ul><p>如果合併時遇到像是同一行 HTML 檔案的衝突，該怎麼辦呢？這時在 HTML 檔案中會出現像這樣：<br><img src="https://i.imgur.com/Xb5B1tm.png" alt></p><p>我們先把那些標記都清除<br><img src="https://i.imgur.com/SMAevkt.png" alt></p><p>並且回到終端機，這時 git status 如下，表示我們要再做一次存檔動作<br><img src="https://i.imgur.com/p2jJTPr.jpg" alt><br>$ git add index.html<br>$ git commit -m “merge payment and member”</p><ul><li><p>不小心把還沒合併的分支砍掉了，救得回來嗎？<br>$git branch -D new_dog (不小心砍掉一個分支)<br>$git branch newnew_dog 053fb21 (在reflog重新貼上newnew_dog)</p></li><li><p>某個分支的某個 commit 做得不錯想收進來，但又不想合併整個分支<br>使用 cherry pick 指令</p></li></ul><h3 id="使用標籤"><a href="#使用標籤" class="headerlink" title="使用標籤"></a>使用標籤</h3><p>什麼時候會使用標籤？在 Git，「標籤（tag）」是一個指向某一個 Commit 的指標。通常在開發軟體有完成特定的里程碑，例如軟體版號 1.0.0 或是 beta-release 之類的，這時候就很適合使用標籤做標記。<br>假設目前的 Commit 紀錄如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">db3bbec (HEAD -&gt; master) add fish</span><br><span class="line">930feb3 add pig</span><br><span class="line">51d54ff add lion and tiger</span><br><span class="line">27f6ed6 add dog 2</span><br><span class="line">2bab3e7 add dog 1</span><br><span class="line">ca40fc9 add 2 cats</span><br><span class="line">1de2076 add cat 2</span><br><span class="line">cd82f29 add cat 1</span><br><span class="line">382a2a5 add database settings</span><br><span class="line">bb0c9c2 init commit</span><br></pre></td></tr></table></figure><p>想在 add lion and tiger 這個 Commit（51d54ff）打上一個 big_cats 的標籤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag big_cats 51d54ff</span><br></pre></td></tr></table></figure><h3 id="修改歷史紀錄"><a href="#修改歷史紀錄" class="headerlink" title="修改歷史紀錄"></a>修改歷史紀錄</h3><h4 id="修改-Commit-訊息-（圖型介面）"><a href="#修改-Commit-訊息-（圖型介面）" class="headerlink" title="修改 Commit 訊息 （圖型介面）"></a>修改 Commit 訊息 （圖型介面）</h4><p>這裡使用的指令一樣是 rebase 但多了互動式操作，在圖型介面的位置如下。操作後可以修改<br><img src="https://i.imgur.com/PCL7fcc.png" alt><br>點擊之後可選擇要修改的地方<img src="https://i.imgur.com/VJk83ZQ.png" alt><br>修改訊息之後，被修正的地方，還有在它後面的訊息的 Changeset 都會被改變<br><img src="https://i.imgur.com/Fn0AcVn.png" alt><br>修改結果<br><img src="https://i.imgur.com/XADDULQ.png" alt></p><h4 id="修改-Commit-訊息-（終端機）"><a href="#修改-Commit-訊息-（終端機）" class="headerlink" title="修改 Commit 訊息 （終端機）"></a>修改 Commit 訊息 （終端機）</h4><p>$ git rebase -i f66ba66 (意思是要修改後退到這個commit編號為止的歷史)</p><blockquote><p>每一次的 rebase ，就算只改一個字，也會改變隨後全部的歷史紀錄</p></blockquote><h3 id="刪除或調整-commit-順序"><a href="#刪除或調整-commit-順序" class="headerlink" title="刪除或調整 commit 順序"></a>刪除或調整 commit 順序</h3><p><img src="https://i.imgur.com/qdr9Cvj.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用終端機指令&quot;&gt;&lt;a href=&quot;#常用終端機指令&quot; class=&quot;headerlink&quot; title=&quot;常用終端機指令&quot;&gt;&lt;/a&gt;常用終端機指令&lt;/h3&gt;&lt;p&gt;$ pwd (print working directory 印出現在所在位置)&lt;br&gt;$ mkdi
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>如何條列化思考</title>
    <link href="http://yoursite.com/2019/06/24/2019-06-24/"/>
    <id>http://yoursite.com/2019/06/24/2019-06-24/</id>
    <published>2019-06-23T16:00:00.000Z</published>
    <updated>2019-06-28T06:30:49.794Z</updated>
    
    <content type="html"><![CDATA[<p>這篇是 Hulo的線上免費課程初心者的計概與 coding 火球術，提供給我這種入門新手的程式思維思考心法。第二堂課的主題是「解決問題」，關注的方向式關於如何在日常思維與電腦化思維之間切換。在第一堂課之後，開始要練習一個可以深入學習的工程師思維，這需要不斷地問自己「為什麼？」另外，到底為什麼要寫程式呢？因為我們要用電腦話讓電腦照著我的意思做。要讓電腦聽話，那就要使用程式碼。最後，程式碼的目標，就是為了解決問題。</p><p>如何條列化思考？如何解決問題？<br>=</p><p>首先要學習的是解決問題的思維，而非令人頭痛的程式語法。</p><p>假設以下問題</p><blockquote><p> computerscience 裡有包含 c 嗎？有幾個 c ?</p></blockquote><h3 id="逐步拆解"><a href="#逐步拆解" class="headerlink" title="逐步拆解"></a>逐步拆解</h3><p>我們的人腦要拆解所有文字，自然最終的結果是看所有文字，但細分來說，其實是一個一個字地看（看第一個、看第二個）。</p><p>所以上面問題的解法，其實是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 從第一個看到最後一個，看有沒有 c 這個字</span><br><span class="line">- 如果有，就把位置記下來，並且繼續往下找</span><br></pre></td></tr></table></figure><h3 id="條列式轉換"><a href="#條列式轉換" class="headerlink" title="條列式轉換"></a>條列式轉換</h3><p>寫程式就是對電腦下指令，而且電腦一次只能做一個指令，所以如果把解法寫成條列式，就是練習對電腦下指令。這一堂利用「給你一串文字，問你裡面有沒有 p」當作範例 一步步教你怎麼用「程式化思考」 把自己的解法轉變成更「標準化」的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.找第一個字，看第一個字是不是 c，是的話就把位置記下來，不是的話就繼續往下找</span><br><span class="line">2.找第二個字，看第一個字是不是 c，是的話就把位置記下來，不是的話就繼續往下找</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>但是這樣太麻煩了，我們可以把無限的步驟簡化為有限的條列</p><blockquote><ul><li>假設 n 是 1， length 是字串長度，A 設成 -1 ，代表找到的位置，p 是要找到的字</li><li>看第 n 個字是不是 p，是的話讓 A =n</li><li>把 n+1，如果 n+1 大於 length 的話，就跳到第 5 步</li><li>跳回第 2 步</li><li>如果 A&lt;0，代表沒出現過；否則 A 就是答案</li></ul></blockquote><p>這邊的重點在加入第四步驟，讓第二、三步驟不斷巡迴。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">length: 15</span><br><span class="line">p:c</span><br><span class="line">n  A</span><br><span class="line">1  1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">10 10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15 15</span><br><span class="line">16</span><br></pre></td></tr></table></figure><h3 id="自主練習"><a href="#自主練習" class="headerlink" title="自主練習"></a>自主練習</h3><ul><li>試著把自己的一些生活流程用條列式列出來，每一條只能有一個動作</li></ul><ol><li>如果上班日，十點上床睡覺</li><li>如果假日，十二點上床睡覺</li><li>在廚房煮飯</li><li>搭捷運</li><li>如果晴天，去跑步</li><li>如果雨天，宅在家裡</li></ol><ul><li>給你一個亂數的數列，例如說：1, 8, 9, 2, 5 ,4，你能想出什麼步驟把這些數字由小到大排好嗎？</li></ul><ol><li>假設要讓亂數群根據數字大小排列，我們不知道這些數字裡面最大是多少所以n &lt;=n</li><li>用 1 比對所有數字，如果有符合的話，排在第一個位置</li><li>用 2 比對所有數字，如果有符合的話，排在第二個位置</li><li>用 9 比對所有數字，如果有符合的話，排在第二個位置</li><li>如果排列到10了，大於9的話，停止排列</li></ol><p>如何代號化？</p><blockquote><p>假設我們要比對的最大數字是 n(小於y的那個數字），y&gt;n=&gt;1<br>比對數字群看 n 有沒有出現，是的話讓A=n，代表找到的位置<br>把 n+1，如果 n+1=&gt;y，就跳到第 5 步<br>跳回第 2 步<br>排列完成</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這篇是 Hulo的線上免費課程初心者的計概與 coding 火球術，提供給我這種入門新手的程式思維思考心法。第二堂課的主題是「解決問題」，關注的方向式關於如何在日常思維與電腦化思維之間切換。在第一堂課之後，開始要練習一個可以深入學習的工程師思維，這需要不斷地問自己「為什麼？
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="計算機概論" scheme="http://yoursite.com/tags/%E8%A8%88%E7%AE%97%E6%A9%9F%E6%A6%82%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>Get API 實作</title>
    <link href="http://yoursite.com/2019/06/23/2019-06-23/"/>
    <id>http://yoursite.com/2019/06/23/2019-06-23/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2019-06-28T08:27:15.870Z</updated>
    
    <content type="html"><![CDATA[<p>這一篇主要是整理一個 Get API 小作品的思路。因為是參考別人的解法，加上自己的思考慣性是習慣從頭到尾把細節了解一次才認為完整掌握，所以使用這種看起來笨笨的步驟，一句一句拆解。</p><p>完成品 <a href="https://chiangyuchi.github.io/get-api" target="_blank" rel="noopener">https://chiangyuchi.github.io/get-api</a><br>原始碼 <a href="https://github.com/ChiangYuChi/get-api" target="_blank" rel="noopener">https://github.com/ChiangYuChi/get-api</a></p><h3 id="設定-DOM"><a href="#設定-DOM" class="headerlink" title="設定 DOM"></a>設定 DOM</h3><ul><li>select  區域選單</li><li>degreetable </li><li>placeTitle 區域名稱</li><li>time 更新時間</li><li>detail 細節</li><li>detailTitle</li><li>infoList 清單</li></ul><h3 id="取得資料"><a href="#取得資料" class="headerlink" title="取得資料"></a>取得資料</h3><ul><li>fetch open data </li><li>怎麼解決CROS問題 (cros-anywhere)</li><li>fetch 之後要怎麼存？存在哪裡？這些數據要幹嘛？<pre><code>-連結get data 函式，儲存data-更新所有頁面，先放入NTP。( datail, infoList) -待資料渲染至頁面後，關閉 loading page&gt;loading.style.display=&apos;none&apos;;</code></pre></li></ul><h3 id="綁定事件"><a href="#綁定事件" class="headerlink" title="綁定事件"></a>綁定事件</h3><ul><li>表單切換 change 事件<br>切換之後把點擊對象的值（e.target.value)，渲染到整個頁面 (updateAll)</li><li>項目 click 事件，如果點擊的標的是連結(e.target.value==A)，把連結標的的值，更新到細節欄位</li></ul><h3 id="儲存色彩資訊"><a href="#儲存色彩資訊" class="headerlink" title="儲存色彩資訊"></a>儲存色彩資訊</h3><ul><li>把顏色整理成陣列</li><li>顏色加入等級表，用for迴圈</li></ul><h3 id="取得資料後的儲存"><a href="#取得資料後的儲存" class="headerlink" title="取得資料後的儲存"></a>取得資料後的儲存</h3><ul><li><p>getData函式，儲存data為陣列<br>把data裡面待會要存到選單項裡面的，用迴圈以add方法，把需要的內容（需要哪些？），向new Set()結構加入新成員。</p></li><li><p>儲存的資料以location的名稱運用在加入選單所需的參數</p><h3 id="加入選單"><a href="#加入選單" class="headerlink" title="加入選單"></a>加入選單</h3></li><li><p>加入選單的函式（有一個參數location)</p></li><li><p>用forEach方法，巡訪參數的每個元素</p></li><li><p>以名為option的變數，創建元素</p></li><li><p>設置指定元素上element的属性值。如果属性已经存在，则更新该值；否则，使  用指定的名称和值添加一个新的属性。</p></li><li><p>把創建的元素加入option</p></li><li><p>把新增的option加進select</p><h3 id="完成的選單被變更了，觸發-change-事件"><a href="#完成的選單被變更了，觸發-change-事件" class="headerlink" title="完成的選單被變更了，觸發 change 事件"></a>完成的選單被變更了，觸發 change 事件</h3></li><li><p>updateAll（location) 傳入的參數是被點擊的地點</p></li><li><p>被點擊的地點，已經用location儲存，現在取用這個location</p></li><li><p>要在畫面更新的地區抬頭，就是點擊地點</p></li><li><p>要在畫面更新的時間，就取用第一筆陣列資料的發佈時間＋’更新’</p></li><li><p>要更新畫面，先把整個infoList清空</p></li><li><p>宣告一個非全域變數 data，它的值的取得，是在datalist裡一個一個過濾所有項目，如果過濾的項目裡面，有任何一個等於我所在區域的項目，回傳項目。</p></li><li><p>剛剛過濾出的項目儲存在變數data裡面，宣告一個新變數sortedData=data，並且用AQI大小排序</p></li><li><p>排序過的資料，用forEach，以字串形式置入畫面</p></li><li><p>在arrow function 裡，每個被檢查到的data，都當做el參數傳入</p></li><li><p>宣告一個新的變數叫做 newList，以此創建一個新的元素li</p></li><li><p>如果傳入的參數的AQI是空值或hypen，他們的AQI就等於N/A</p></li><li><p>宣告一個新的變數叫colorList，它的值是在colors陣列裡面比對，find 方法會對每個元素執行一次 callback 函式，直到找到一個讓 callback 函式回傳 true 的元素。當元素被找到的時候，find 會立刻回傳該元素，否則 find 會回傳 undefined。這個陣列裡面比對的狀態，當成col參數在這個方法裡運作，比對傳入元素的狀態，如果符合，就回傳色彩。</p></li><li><p>如果資料內沒有status(設備維修),if(colorList==undefined)，套用顏色是 ＃EEEEEE</p></li><li><p>組字串，並且更新：字串包含</p><p>  最外層的inforBox<br>  新增一個連結它的顯示文字是傳入的參數的siteName<br>  新增傳入元素的AQI，它的顏色是在colorList陣列裡面用status比對 的色彩</p></li><li><p>把字串加入newList裡</p></li><li><p>把newList加入父階層infoList</p></li><li><p>同步更新detail, updateDetail(傳入參數排序第一個的站名)</p></li></ul><h3 id="更新detail"><a href="#更新detail" class="headerlink" title="更新detail"></a>更新detail</h3><ul><li>函數傳入的參數就是我點擊的那一個</li><li>那一個要更新在畫面上的項目，是在資料陣列裡面用find()方法尋找的，並且叫它place</li><li>如果點擊的那一個，符合資料陣列裡面的siteName，就把data傳入一個新的空陣列裡面</li><li>空陣列包含 item.O3, item.PM10, item[‘PM2.5’], item.CO, item.SO2, item.NO2</li><li>細節標題的第一項，更新成上面的place</li><li>細節標題的第二項，就是項目的AQI屬性</li><li>著色的方式同上，宣告一個新的變數叫colorList，它的值是在colors陣列裡面比對，find 方法會對每個元素執行一次 callback 函式，直到找到一個讓 callback 函式回傳 true 的元素。當元素被找到的時候，find 會立刻回傳該元素，否則 find 會回傳 undefined。這個陣列裡面比對的狀態，當成col參數在這個方法裡運作，比對傳入元素的狀態，如果符合，就回傳色彩。所以要判斷這個colorlist的status是否等於傳入的項目的status，如果是，就回傳。</li><li>回傳顏色的運用方式，是將細節的第一個的背景顏色，比對colorList。</li><li>把data內的資料更新至 detail上 （用迴圈的方式，去檢查數據的長度，並且依照索引值一個一個放到細節項目的相同索引值位置，並回傳）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一篇主要是整理一個 Get API 小作品的思路。因為是參考別人的解法，加上自己的思考慣性是習慣從頭到尾把細節了解一次才認為完整掌握，所以使用這種看起來笨笨的步驟，一句一句拆解。&lt;/p&gt;
&lt;p&gt;完成品 &lt;a href=&quot;https://chiangyuchi.github
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day27-函數陳述句與函數表示式</title>
    <link href="http://yoursite.com/2019/06/22/2019-06-22/"/>
    <id>http://yoursite.com/2019/06/22/2019-06-22/</id>
    <published>2019-06-21T16:00:00.000Z</published>
    <updated>2019-06-28T09:48:26.005Z</updated>
    
    <content type="html"><![CDATA[<p>了解函數就是物件後，接著要實際運用這個觀念。開始之前，我們要先了解函數陳述句 （Function Statements) 與函數表示式 (Function Expressions) 的用法差異。</p><h3 id="表示式"><a href="#表示式" class="headerlink" title="表示式"></a>表示式</h3><blockquote><p>表示式是程式碼的單位，會形成一個值  (A unit of code that results in a value)</p></blockquote><p>直接地說，任何表示式最終都會創造一個值，而這個值不一定要儲存在某個變數。</p><p>舉例來說，我們宣告一個變數 <code>a</code>，並且打開開發者工具輸入以下</p><p><img src="https://i.imgur.com/TnvqLDE.png" alt></p><p>上面是一個簡單的表示式，我們透過等號運算子把 3 賦與給變數 <code>a</code>，執行它，得到回傳的結果。</p><p>但是上面說過值不一定要儲存在變數裡面，所以表示式也可以這樣寫：<br><img src="https://i.imgur.com/dqeJb8a.png" alt></p><p>回傳了 3，但是我們並沒有使用等號運算子把這個值放入變數裡面。這個值可以是數值、字串或者物件。所以表示式也可以這樣寫</p><p><img src="https://i.imgur.com/csgpRQs.png" alt></p><h3 id="陳述句"><a href="#陳述句" class="headerlink" title="陳述句"></a>陳述句</h3><blockquote><p>當我們提到陳述句，陳述句表示「做某件事情」。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line"></span><br><span class="line">if(a===3)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當 <code>a===3</code> 就做某件事情。在 if 陳述句的括號內，必須放入表示式，因為會形成一個值，這樣這個陳述句才能運作。陳述句本身不會回傳任何值。</p><p>像是我不能這麼做，這不會有任何效用，因為沒有任何值會回傳給變數 b</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var b=if(a===3)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>結論：陳述句會做其他事情，表示式則回傳值</p></blockquote><h3 id="函式表示式與函式陳述句的差異"><a href="#函式表示式與函式陳述句的差異" class="headerlink" title="函式表示式與函式陳述句的差異"></a>函式表示式與函式陳述句的差異</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function greet() &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函式陳述句"><a href="#函式陳述句" class="headerlink" title="函式陳述句"></a>函式陳述句</h4><p>這是一個簡單的函式陳述句，在創造執行環境的時候，這個函式被放進記憶體中，但這只是陳述句，所以不會回傳任何的值，直到函式被呼叫執行。</p><p>雖然函式陳述句不會回傳任何值，但它會有提升 (hoisting) 現象，所以可以在任何地方取用它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">greet();</span><br><span class="line">function greet() &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函式表示式"><a href="#函式表示式" class="headerlink" title="函式表示式"></a>函式表示式</h4><p>宣告一個 anonymousGreet 變數並且使用等號運算子，然後在右側使用函式陳述句。</p><p>記得「函數就是物件」，所以「建立一個物件，並且設定它等於這個變數」，這個變數也就是它在記憶體中指向的位置。</p><p>我們已經有一個已經知道函式物件位址的變數 anonymousGreet ，所以等號右邊的陳述句可以改寫成這樣，稱為匿名函式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var anonymousGreet = function () &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Brtzuj1.png" alt></p><h3 id="如何觸發函式表示式"><a href="#如何觸發函式表示式" class="headerlink" title="如何觸發函式表示式"></a>如何觸發函式表示式</h3><p>我們需要指向那個物件，告訴它要執行程式，像這樣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anonymousGreet();</span><br></pre></td></tr></table></figure><p>因為變數已經知道函數記憶體的位址，所以只要加上 <code>()</code>，就可以觸發函式。</p><p>但是因為函式表示式的提升 (hoisting) 現象，造成一個值得注意的問題。如果我們把程式碼改寫成這樣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anonymousGreets();  </span><br><span class="line">var anonymousGreets = function() &#123;  </span><br><span class="line">  console.log(&apos;Hi&apos;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果變這樣，為什麼？<br><img src="https://i.imgur.com/wWwuPXa.png" alt></p><p>還記得當執行環境被創造，創造執行階段會把函式陳述句以及變數都放入記憶體，變數被賦予初始值 undefined ，然後逐行執行程式碼。</p><p>於是程式的第一行是「anonymousGreets();」，但此時仍未賦予變數值，變數的值仍然是 undefined 。自然的，錯誤便會告訴我們 undefined 不是函式，它沒辦法被使用 () 呼叫執行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var anonymousGreets = function() &#123;  </span><br><span class="line">  console.log(&apos;Hi&apos;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直到上述這行程式碼，anonymousGreets 變數的值才被賦予函式物件。</p><blockquote><p>所以函式表示式不受到提升 (hoisting) 影響。</p></blockquote><h3 id="傳入函式表示式做為參數"><a href="#傳入函式表示式做為參數" class="headerlink" title="傳入函式表示式做為參數"></a>傳入函式表示式做為參數</h3><p>記得我們說的函式是物件，函式表示式可以馬上創造函式物件，因此我們可延伸出以下寫法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function log(a)&#123;  </span><br><span class="line">  console.log(a);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(function()&#123;  </span><br><span class="line">  console.log(&apos;hi&apos;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我們立即創造了一個函式物件，在裡面寫了一些程式碼。然後把這個函式物件當成參數傳入 log 函式內</p><p><img src="https://i.imgur.com/Mxan84C.png" alt></p><p>不過這樣只是印出函式物件的內容而已，但透過這樣的觀察得知「一級函式可以很快地被創造、使用，且變數也可以設值成為一級函式」</p><p>我們結合上述這些並做些修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function log(a)&#123;  </span><br><span class="line">  a();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var anonymousGreets = function()&#123;  </span><br><span class="line">  console.log(&apos;hi&apos;);  </span><br><span class="line">&#125;  </span><br><span class="line">log(anonymousGreets);　// hi</span><br></pre></td></tr></table></figure><p>因為我們傳入 log 函式的參數為函式物件，所以變數 a 參照到了這個函式物件。同樣地，要呼叫執行函式僅需要加上 () 即可。</p><p>本例來看，我使用函式表示式，接著把這個函式傳入當作另一個函式的參數，這樣另一個函式就可以使用這個函式表示式，這就是我們提到的一級函式的觀念「可以將函式傳入別處」。</p><p>可以把函式給另一個函式，就像使用變數一樣，這樣的做法也稱為函式程式語言 ( functional programming )。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;了解函數就是物件後，接著要實際運用這個觀念。開始之前，我們要先了解函數陳述句 （Function Statements) 與函數表示式 (Function Expressions) 的用法差異。&lt;/p&gt;
&lt;h3 id=&quot;表示式&quot;&gt;&lt;a href=&quot;#表示式&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day26-函數就是物件</title>
    <link href="http://yoursite.com/2019/06/20/2019-06-20/"/>
    <id>http://yoursite.com/2019/06/20/2019-06-20/</id>
    <published>2019-06-19T16:00:00.000Z</published>
    <updated>2019-06-28T07:11:17.817Z</updated>
    
    <content type="html"><![CDATA[<p>在這堂課裡面，作者說明 JavaScript 當中一個重要的觀念「一級函數」（first class functions)，也提到函數也是一種物件 (functions are object)。</p><h3 id="一級函數-（First-class-functions"><a href="#一級函數-（First-class-functions" class="headerlink" title="一級函數 （First class functions)"></a>一級函數 （First class functions)</h3><p>一級函數是指說：你可以對別的型別像是物件、字串、數值、布林做的事情，都可以對函數做。</p><ul><li>你可以指派一個變數的值為函數</li><li>你可以把函數當做參數傳入另一個函數</li><li>可以用實體語法立刻創造函數。</li><li>函數就是物件，所以也可以擁有屬性</li></ul><p>一級函數可以改變你寫程式的方式，可以讓我們用一個完全不同的方法，解決你的問題。所以當我們說函數就是物件。函數物件長成什麼樣子？</p><h3 id="函數物件-（Functions-object"><a href="#函數物件-（Functions-object" class="headerlink" title="函數物件 （Functions object)"></a>函數物件 （Functions object)</h3><p>就像 JavaScript 其他物件一樣，它被存在記憶體裡面，它是一個特殊型態的物件，它具有有所有物件的特色，還有一些其他的屬性和方法。</p><ul><li><p>函數可以連結純值</p></li><li><p>連結名稱/值的配對</p></li><li><p>連結物件</p></li><li><p>連結其他函數。</p></li><li><p>可以是匿名的</p></li><li><p>特殊屬性：JavaScript 的函數不一定要有名稱，一個函數可以是匿名的，表示它沒有名字</p></li><li><p>特殊屬性：程式屬性，你寫程式碼的位置，會成為函數物件的特殊屬性，這個屬性是特別的，因為他是可以呼叫的 (invocable)，代表可以執行這個函數的程式。</p></li></ul><p>這個函數模式相當重要，我們必須把函數想像成物件，而它的程式碼是那個物件的屬性之一。函數還包含許多其他東西。它可以被移動、複製、傳入任何一個東西，就像任何物件、值、字串、或數字一樣。</p><h3 id="實際例子"><a href="#實際例子" class="headerlink" title="實際例子"></a>實際例子</h3><p>這是一個函數，但在 JavaScript裡面，函數就是物件，所以我們可以用 <code>.</code> 符號創造屬性。我們新增了一個函數的屬性，這在其他程式語言裡是不可能的，但在 JavaScript 函數就是物件，所以我們查詢這個函數的時候，會得出函數的文字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function greet()&#123;</span><br><span class="line">console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet.language=&apos;english&apos;;</span><br></pre></td></tr></table></figure><p>如果直接這樣寫，會得到函式的文字內容，在這個範例中這樣子沒什麼用。所以必須使用點運算子取得函式物件的屬性，就像之前在一般物件做的那樣：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(greet);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/pM4yivM.png" alt></p><p>但是如果我試圖找出函數的屬性，用<code>.</code> 運算子就可以找函數的屬性了，就像之前在一般物件做的那樣。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(greet.language);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/DXWZlEU.png" alt></p><p>所以當建立函數的時候，實際上看起來像是這樣<br><img src="https://i.imgur.com/JCLbYmf.png" alt></p><p>以本例來說：</p><ul><li>我建立了一個名稱為 greet 的函數物件</li><li>greet 函數物件具有程式屬性，因為我有寫程式碼在裡面</li><li>我可以再 greet 後面加上括號，呼叫 greet 函式並執行</li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>這個例子說明了，函式只是一種特殊物件，它有一般物件的特性之外，還有自身的特殊屬性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在這堂課裡面，作者說明 JavaScript 當中一個重要的觀念「一級函數」（first class functions)，也提到函數也是一種物件 (functions are object)。&lt;/p&gt;
&lt;h3 id=&quot;一級函數-（First-class-functions
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day25 - JSON 與物件實體</title>
    <link href="http://yoursite.com/2019/06/19/2019-06-19/"/>
    <id>http://yoursite.com/2019/06/19/2019-06-19/</id>
    <published>2019-06-18T16:00:00.000Z</published>
    <updated>2019-06-28T07:11:10.678Z</updated>
    
    <content type="html"><![CDATA[<p>這一節要繼續學習物件實體，還有一些使用 JSON 的時候經常遇到的誤解。JSON (avaScript物件表示法；JavaScript Object Notation) ，受到 JavaScript 物件實體語法啟發，看起來和物件實體語法非常類似，所有常常被誤認為是同一個東西，所以遇到同樣的錯誤。</p><h3 id="JSON-avaScript物件表示法；JavaScript-Object-Notation"><a href="#JSON-avaScript物件表示法；JavaScript-Object-Notation" class="headerlink" title="JSON (avaScript物件表示法；JavaScript Object Notation)"></a>JSON (avaScript物件表示法；JavaScript Object Notation)</h3><p>如果我建立一個物件實體，假設它有很多屬性，這在 JavaScript 是完全有效的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var objectLiteral=&#123;</span><br><span class="line">firstname:&apos;Mary&apos;,</span><br><span class="line">isAProgrammer:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/5k2Kq7p.png" alt></p><p>由於網路資料的傳輸格式很多，但是處理下載的時候，下載速度和使用的頻寬有關。像是 XML，會有一些額外的符號，讓資料變得很龐大，只是傳送一點資料就必須要傳 2 次屬性名稱。資料越多浪費越多頻寬。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;obeject&gt;</span><br><span class="line">&lt;firstname&gt;Mary&lt;/firstname&gt;</span><br><span class="line">&lt;/object&gt;</span><br></pre></td></tr></table></figure><p>所以人們開始改用 JSON 這種資料傳輸格式，這只是一種資料字串，雖然看起來很像物件實體語法，可是有一些小差異。例如屬性需要被包在引號裡面。以下是一個有效的物件實體語法，因為在 JavaScript 的物件實體語法裡面，屬性可以選擇被包在引號裡面。但在 JSON 裡面，屬性「<strong>一定</strong>」要被包在引號裡面。所以如果有解析 JSON 的程式，像是 PHP 或 ASP.NET 的伺服器技術，就預期屬性一定要被包含在括號裡面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;firstname&quot;:&quot;Mary&quot;,</span><br><span class="line">&quot;isAProgrammer&quot;:&quot;true&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-內建轉換-JSON-格式的功能"><a href="#JavaScript-內建轉換-JSON-格式的功能" class="headerlink" title="JavaScript 內建轉換 JSON 格式的功能"></a>JavaScript 內建轉換 JSON 格式的功能</h3><p>技術上，JSON 是物件實體語法的子集合，代表只要在 JSON 有效的，在物件實體語法就是有效的。但不是所有物件實體語法在 JSON 格式都是有效的。所以 JSON 的規則比較嚴格。所以 JSON (avaScript物件表示法；JavaScript Object Notation) 並不是 JavaScript 的一部分，但因為它可以簡單讓 JavaScript 解析它，所以相當受到歡迎，所以 JavaScript 有一些內建的功能可以轉換這 2 者。可以讓任何物件，變成 JSON 字串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var objectLiteral=&#123;</span><br><span class="line">firstname:&apos;Mary&apos;,</span><br><span class="line">isAProgrammer:true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(objectLiteral));</span><br></pre></td></tr></table></figure><p>也可以再把 JSON 字串轉換回物件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var jsonValue = JSON.parse(&apos;&#123; &quot;firstname&quot;: &quot;Mary&quot;, &quot;isAProgrammer&quot;: true &#125;&apos;);</span><br><span class="line">console.log(jsonValue);</span><br></pre></td></tr></table></figure><p>JSON 和物件實體看起來很像，但其實 JSON 的對於屬性使用括號的規則比較嚴格。不過 JavaScript 有讓人在兩者之間轉換的功能，因此也很容易轉換從瀏覽器下載的資料。或者像是當 Node.js 在伺服器端使用 JavaScript 的時候，接收 JSON 格式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一節要繼續學習物件實體，還有一些使用 JSON 的時候經常遇到的誤解。JSON (avaScript物件表示法；JavaScript Object Notation) ，受到 JavaScript 物件實體語法啟發，看起來和物件實體語法非常類似，所有常常被誤認為是同一個東
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day24-框架小叮嚀：偽裝命名空間</title>
    <link href="http://yoursite.com/2019/06/16/2019-06-16/"/>
    <id>http://yoursite.com/2019/06/16/2019-06-16/</id>
    <published>2019-06-15T16:00:00.000Z</published>
    <updated>2019-06-28T07:11:04.352Z</updated>
    
    <content type="html"><![CDATA[<p>這一節是關於打開知名的框架原始碼經常會看到的東西。前面討論的那些主題，像是運算子、物件實體語法後，現在要學習偽裝命名空間 （faking namespaces)。</p><h3 id="變數之間的衝突"><a href="#變數之間的衝突" class="headerlink" title="變數之間的衝突"></a>變數之間的衝突</h3><p>在現代的程式語言，命名空間是變數和函數的容器，只是一個包裝物、一個容器。通常這是用來分開那些有著相同名稱的函數和變數。</p><p>在 JavaScript 裡，因為物件的本質，不需要命名空間這個功能，所以並沒有命名空間，但可以假裝。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var greet =&apos;Hello&apos;;</span><br><span class="line">var greet =&apos;Hola&apos;;</span><br><span class="line"></span><br><span class="line">console.log(greet);</span><br></pre></td></tr></table></figure><p>有 2 個同樣名稱的變數，我們查詢它會得到的結果是什麼？在創造階段的變數會被設定為 <code>undefined</code> ，接著這些程式會逐行的依照順序執行，所以查詢變數的結果會是 <code>hola</code>。</p><p><img src="https://i.imgur.com/RYsiSp7.png" alt></p><p>我們可以想像這兩個 <code>greet</code> 變數，被創造在兩個不同的 JavaScript 檔案中，一個是英文的打招呼，另一個框架是西文的打招呼。</p><p>這就會有問題，因為我們知道兩者都會設定它們的值。以這邊為例就是全域物件，然後覆寫另一個。這時命名空間就可以幫助我們，因為命名空間可以有一個容器裝英文問候語，另一個容器裝西文問候語。雖然 JavaScript 裡面沒有命名空間，但可以用物件做到。</p><h3 id="以物件偽裝命名空間"><a href="#以物件偽裝命名空間" class="headerlink" title="以物件偽裝命名空間"></a>以物件偽裝命名空間</h3><p>我們可以建立物件成為屬性的容器避免這種衝突，而方法則是我們想要使用的東西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//創造物件，使用物件實體語法</span><br><span class="line">var english=&#123;&#125;</span><br><span class="line">var spanish=&#123;&#125;</span><br><span class="line"></span><br><span class="line">english.greet=&apos;Hello&apos;;</span><br><span class="line">spanish.greet=&apos;Hola&apos;;</span><br></pre></td></tr></table></figure><p>這兩變數雖然都叫 <code>greet</code> ，變數已經成為容器，確保我不會和其他 JavaScript 檔案，因為相同的全域命名空間而相互衝突覆寫。</p><p><img src="https://i.imgur.com/o07bfsV.png" alt></p><h3 id="深入運用"><a href="#深入運用" class="headerlink" title="深入運用"></a>深入運用</h3><p>還可以進一步把不同的容器物件分級，例如我想要 english 有打招呼的方法的命名空間在裡面，我不能直接輸入 <code>english.greetings.greet=&#39;Hello&#39;;</code></p><p><img src="https://i.imgur.com/rj1OwBU.png" alt></p><p>要記住 <code>.</code> 運算子是左相依性，表示左邊會先被執行。當<code>.</code> 運算子被呼叫，它會先在 <code>english</code> 裡面找<code>greetings</code> 變數，因為這是空的，所以找不到，而它會認定 <code>undefined</code> 根本不是一個物件，所以它不會在裡面找到 <code>greet</code>。必須再創造一個物件，在記憶體裡有一個物件，然後再連結<code>greet</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var english = &#123;&#125;;</span><br><span class="line">var spanish = &#123;&#125;;</span><br><span class="line">english.greetings = &#123;&#125;;</span><br><span class="line">english.greetings.greet = &apos;Hello&apos;;</span><br><span class="line">spanish.greet = &apos;Hola&apos;;</span><br><span class="line"></span><br><span class="line">console.log(english);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/aqEMBm7.png" alt></p><p>或者可以用物件實體語法初始化它，讓 <code>greetings</code> 裡面有另一個物件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var english = &#123;</span><br><span class="line">    greetings:&#123;</span><br><span class="line">        basic:&apos;Hello&apos;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">var spanish = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">spanish.greet = &apos;Hola&apos;;</span><br><span class="line"></span><br><span class="line">console.log(english);</span><br></pre></td></tr></table></figure><p>物件實體語法可以快速建立，沒有得到 <code>undefined</code> 的錯誤，因為它們都已經被創造了。</p><p><img src="https://i.imgur.com/flFBlte.png" alt></p><p>我們可以用以上任何一種方式，但重點是已經在容器物件裡，包含函數、方法、變數、屬性和其他物件。</p><p>JavaScript 的偽裝命名空間，只是為了那些我們忘了別人已經寫好或自己寫好的程式碼，藉此分開程式碼和其他在全域命名空間的物件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一節是關於打開知名的框架原始碼經常會看到的東西。前面討論的那些主題，像是運算子、物件實體語法後，現在要學習偽裝命名空間 （faking namespaces)。&lt;/p&gt;
&lt;h3 id=&quot;變數之間的衝突&quot;&gt;&lt;a href=&quot;#變數之間的衝突&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day23-物件與實體</title>
    <link href="http://yoursite.com/2019/06/15/2019-06-15-2/"/>
    <id>http://yoursite.com/2019/06/15/2019-06-15-2/</id>
    <published>2019-06-14T16:00:00.000Z</published>
    <updated>2019-06-28T07:10:57.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="建立物件的捷徑"><a href="#建立物件的捷徑" class="headerlink" title="建立物件的捷徑"></a>建立物件的捷徑</h3><p>在 JavaScript 裡面，完成一件事情還有許多方式，還記得宣告 new object 並非建立物件的最好方式，有一種建立物件的捷徑是利用大括號 <code>{}</code> 的物件實體語法（object literal syntax)，得到的結果會和 new object 一樣。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;&#125;;</span><br><span class="line">console.log(person);</span><br></pre></td></tr></table></figure><p>如果我列印出 person，會看到一個空物件，就像 new object 一樣，這是比較快的作法。但注意這不是運算子，這是當 JavaScript 在解析語法時，看到大括號，但這個大括號不是用在 if 條件式或者迴圈時，它就會假設你在創造一個物件。</p><p><img src="https://i.imgur.com/RL1V3u9.png" alt></p><p>我們還可以初始化物件，可以同時在這個大括號裡面建立屬性和方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//命名屬性與方法，並賦值。以逗號增加另一個名稱/值的配對</span><br><span class="line">var person=&#123;</span><br><span class="line">firstname:&apos;Tony&apos;,</span><br><span class="line">lastname:&apos;Alicea&apos;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(person);</span><br></pre></td></tr></table></figure><p>物件有 2 個屬性<br><img src="https://i.imgur.com/fJpq5ku.png" alt></p><p>這跟建立 <code>var person = new Object()</code> 再依序一個一個增加屬性 <code>person.firstname = &#39;Tony&#39;;</code> 、<code>person.lastname=&#39;Alicea&#39;;</code> 一樣</p><p>物件裡還可以包含另一個物件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//命名屬性與方法，並賦值。以逗號增加另一個名稱/值的配對</span><br><span class="line">var person=&#123;</span><br><span class="line">firstname:&apos;Tony&apos;,</span><br><span class="line">lastname:&apos;Alicea&apos;,</span><br><span class="line">address:&#123;</span><br><span class="line">street:&apos;123 Main St.&apos;,</span><br><span class="line">City:&apos;NY&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以當 JavaScript 的語法解析器，執行程式碼的時候，遇到大括號的區塊，它會當成同一行程式碼，並且知道你要建立物件。所以我可以在任何地方新增物件、定義屬性和方法。這比一次定義一個屬性還分成很多行，要快上許多。</p><h3 id="建立函數的捷徑"><a href="#建立函數的捷徑" class="headerlink" title="建立函數的捷徑"></a>建立函數的捷徑</h3><p>當我們了解這個捷徑的處理方式後，就可以快速的建立物件和變數。因此我們也可以快速建立函數。</p><p>有一個打招呼的函數，包含物件，函數需要知道 firstname 屬性，才能打招呼。呼叫 <code>greet</code>  並傳入 <code>Tony</code>。 物件再記憶體裡，被傳入函數中，而且可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function greet(person)&#123;</span><br><span class="line">console.log(&apos;Hi&apos;+person.firstname);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">greet(person);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/SHxajWR.png" alt></p><h3 id="同時建立函數與物件"><a href="#同時建立函數與物件" class="headerlink" title="同時建立函數與物件"></a>同時建立函數與物件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var person=&#123;</span><br><span class="line">firstname:&apos;Tony&apos;,</span><br><span class="line">lastname:&apos;Alicea&apos;,</span><br><span class="line">address:&#123;</span><br><span class="line">street:&apos;123 Main St.&apos;,</span><br><span class="line">City:&apos;NY&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function greet(person)&#123;</span><br><span class="line">console.log(&apos;Hi&apos;+person.firstname);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">greet(person);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greet(&#123;</span><br><span class="line">firstname:&apos;Mary&apos;,</span><br><span class="line">lastname:&apos;Doll&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>用逗號區隔名稱/值配對，然後名稱和值用冒號區隔，再用大括號包起來。JavaScript 可以用物件實體語法，在看到函數的時候，檢查你需要傳入什麼，當它看到大括號的時候，知道你在建立物件，所以建立完就傳入這個物件。這和傳入數值和字串沒有差別。在這個情況下，我同時建立物件，我也可以把它當作一般變數使用。</p><p>在這個情況下，我傳入 <code>person</code> 這個變數，並包含 firstname 屬性，然後再次呼叫函數，裡面包含另一個物件。這個物件在呼叫時同時被建立，然後 firstname 是 Mary。</p><p><img src="https://i.imgur.com/cZgGlwg.png" alt></p><h3 id="混合語法"><a href="#混合語法" class="headerlink" title="混合語法"></a>混合語法</h3><p>用<code>person</code> 這個變數，然後新增一個屬性。用 <code>.</code> 點運算子，而不是物件實體語法，然後再用物件實體語法定義物件。這樣就能結合 2 種語法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.address=&#123;</span><br><span class="line">street:&apos;123 Second St.&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>為什麼可以這樣做？因為程式碼並不是真的直接被處理，它會先被 JavaScript 轉化成電腦能懂的東西。所以不論物件實體語法或用點運算子建立物件，都是一樣的，對 JavaScript 底層來說，它就是在建立物件、屬性和方法到記憶體裡面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;建立物件的捷徑&quot;&gt;&lt;a href=&quot;#建立物件的捷徑&quot; class=&quot;headerlink&quot; title=&quot;建立物件的捷徑&quot;&gt;&lt;/a&gt;建立物件的捷徑&lt;/h3&gt;&lt;p&gt;在 JavaScript 裡面，完成一件事情還有許多方式，還記得宣告 new object 並非建立
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day22-物件與「點」</title>
    <link href="http://yoursite.com/2019/06/15/2019-06-15-1/"/>
    <id>http://yoursite.com/2019/06/15/2019-06-15-1/</id>
    <published>2019-06-14T16:00:00.000Z</published>
    <updated>2019-06-28T07:10:50.988Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，物件與函式兩者是非常相關的，它們在很多情況下幾乎是一樣的，讓我們從本篇之後來談談物件與函式，但在這之前得先了解本篇標題「物件與點」</p><h3 id="物件與「點」"><a href="#物件與「點」" class="headerlink" title="物件與「點」"></a>物件與「點」</h3><p>一個物件是被賦值的名稱與值的組合（Name/Value），但是這個值是什麼？所以物件可以有一個原始的設定叫做屬性 (primitive property)，例如前面提到的純值、布林或字串；或者物件可以再連結另外的物件，值可以是另一個「名稱/值」的組合或物件。物件裡還可以有函數，這種情況稱為「方法」(method)。</p><p><img src="https://i.imgur.com/RMIVyvR.png" alt></p><h3 id="JavaScript-怎麼取得物件的屬性和方法？"><a href="#JavaScript-怎麼取得物件的屬性和方法？" class="headerlink" title="JavaScript 怎麼取得物件的屬性和方法？"></a>JavaScript 怎麼取得物件的屬性和方法？</h3><p>在記憶體裡面，核心物件會有一個記憶體的位址空間，供物件參照到這些電腦記憶體中的屬性和方法，找到這些屬性和方法的所在。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var person = new Object();</span><br><span class="line">person[&quot;firstname&quot;] = tony;</span><br></pre></td></tr></table></figure><p>在 JavaScript 當中，取得屬性和方法有兩種方式。以上是其中一種，利用中括號方式，稱為「計算取用成員」（computer member access）的運算子。</p><p>在中括號內放進值的名稱，這是要放進記憶體的東西，這時它還不存在，所以我們令它等於 <code>tony</code>。這會在記憶體中創造空間，並且有個名稱叫做<code>firstname</code> 的東西。然後 <code>person</code> 物件就能參考到 <code>firstname</code> 在記憶體內的位置，並且知道<code>firstname</code> 的值是一個字串，這就是取得物件屬性的一種方法。</p><p>這個運算子好用的地方是可以用變數修改物件的屬性名稱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var person = new Object();  </span><br><span class="line">person[&apos;firstName&apos;] = &apos;Tony&apos;;  </span><br><span class="line">person[&apos;lastName&apos;] = &apos;Alicea&apos;;  </span><br><span class="line">var firstNameProperty = &apos;firstName&apos;;  </span><br><span class="line">console.log(person);</span><br><span class="line">console.log(person[firstNameProperty]);</span><br></pre></td></tr></table></figure><p>印出物件看看：</p><p><img src="https://i.imgur.com/2undtXe.png" alt></p><p>這個方法有時可以在框架中看到，因為可以決定要取用哪種屬性，但比較起來還是 <code>.</code> 運算子比較方便。</p><h3 id="使用-運算子"><a href="#使用-運算子" class="headerlink" title="使用 . 運算子"></a>使用 . 運算子</h3><p><code>.</code> 運算子的方式比較常見且簡單</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(person.firstName);</span><br><span class="line">// tony</span><br></pre></td></tr></table></figure><p>也可以用 <code>.</code> 運算子創立物件的新屬性名稱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.address.street = &apos;1111. Main St. &apos;;</span><br></pre></td></tr></table></figure><p>簡單來說這個點就和中括號一樣，是「成員取用」運算子，這個成員指的是物件的成員。所以這些運算子會幫我們找到物件的成員，像是方法和屬性。</p><h3 id="物件內的物件"><a href="#物件內的物件" class="headerlink" title="物件內的物件"></a>物件內的物件</h3><p>前面提到物件可以內含另一個物件，這也可以用 . 運算子來做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var person = new Object();  </span><br><span class="line">person[&apos;firstName&apos;] = &apos;Tony&apos;;  </span><br><span class="line">person[&apos;lastName&apos;] = &apos;Alicea&apos;;  </span><br><span class="line">var firstNameProperty = &apos;firstName&apos;;  </span><br><span class="line">console.log(person);</span><br><span class="line">console.log(person[firstNameProperty]);  </span><br><span class="line">person.dog=&quot;Paul&quot;;</span><br><span class="line">console.log(person.dog);</span><br><span class="line">person.address=new Object;</span><br><span class="line">person.address.street = &apos;1111. Main St. &apos;;</span><br><span class="line">console.log(person.address.street);</span><br><span class="line">// 也可以這樣寫 console.log(person[&apos;address&apos;][&apos;street&apos;]);</span><br></pre></td></tr></table></figure><p>再次輸出<code>person</code>物件觀察，可以發現新增的物件被包覆在 <code>person</code> 物件內了。<br><img src="https://i.imgur.com/YaXuy4F.png" alt></p><p>另外程式碼中的「person.address.street= ‘111 Main St.’;」因為用到了兩次運算子，所以我們查一下運算子的優先性與相依性得知，「.」運算子為左相依性，因此會從左邊開始運算到右邊。</p><p>白話來說就是會先到 person 物件內找到屬性物件 address ， 然後再從 address 內找到 street 屬性並且設定字串值。</p><h4 id="附註"><a href="#附註" class="headerlink" title="附註"></a>附註</h4><p>物件在記憶體中是「名稱/值」的組合，它也能夠包含不同的屬性配對，像是字串、布林，也可以包含函式（在此稱為方法），但本篇還不會討論到方法，在此之前有其他部分需先了解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 JavaScript 中，物件與函式兩者是非常相關的，它們在很多情況下幾乎是一樣的，讓我們從本篇之後來談談物件與函式，但在這之前得先了解本篇標題「物件與點」&lt;/p&gt;
&lt;h3 id=&quot;物件與「點」&quot;&gt;&lt;a href=&quot;#物件與「點」&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 30 Days AJAX Type Ahead</title>
    <link href="http://yoursite.com/2019/06/07/2019-06-07/"/>
    <id>http://yoursite.com/2019/06/07/2019-06-07/</id>
    <published>2019-06-06T16:00:00.000Z</published>
    <updated>2019-06-28T07:10:45.510Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用-Fetch-API-取得數據資料"><a href="#利用-Fetch-API-取得數據資料" class="headerlink" title="利用 Fetch API 取得數據資料"></a>利用 Fetch API 取得數據資料</h3><p>利用 fetch 取得數據資料的時候會先回傳 promise 給我們。Promise 是一個根據附加給他的 Callback 回傳的物件，以取代傳遞 Callback 到這個函數。它回傳的還不是我們要的資料。</p><p>查詢一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const prom = fetch(endpoint);</span><br><span class="line">console.log(prom);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/qhO5Wtw.png" alt></p><h3 id="關於-promise"><a href="#關於-promise" class="headerlink" title="關於 promise"></a>關於 promise</h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noopener">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Using_promises </a></p><p>第一個回傳的是一個 <code>readableStream</code><br><img src="https://i.imgur.com/gUlw0Js.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const endpoint =&apos;https://gist.githubusercontent.com</span><br><span class="line">/Miserlou/c5cd8364bf9b2420bb29/raw/</span><br><span class="line">2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/</span><br><span class="line">cities.json&apos;;</span><br><span class="line"></span><br><span class="line">const cities = [];</span><br><span class="line">fetch(endpoint).then(blob =&gt; blob.json()).then(data =&gt; console.log(data));</span><br></pre></td></tr></table></figure><p>在上面可以看到我們已經抓取到資料，但是要怎麼把它一個一個參數個別放進陣列裡呢？ 這裡運用的是ES6的展開運算符<code>...</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(endpoint).then(blob =&gt; blob.json()).then(data =&gt; cities.push(...data));</span><br></pre></td></tr></table></figure><h3 id="建立規式"><a href="#建立規式" class="headerlink" title="建立規式"></a>建立規式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let regex = new RegExp(wordToMatch, &apos;gi&apos;)</span><br></pre></td></tr></table></figure><ul><li>第一個參數是正規式的內容</li><li>第二個參數是一個flag旗標<ul><li>global search，會去搜尋整份文件</li><li>i 表示 case insensitive，也就是不去區分大小寫</li></ul></li></ul><h3 id="利用正規式找到內容"><a href="#利用正規式找到內容" class="headerlink" title="利用正規式找到內容"></a>利用正規式找到內容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function findMatch(wordToMatch, cities) &#123;</span><br><span class="line">      return cities.filter(place =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        const regex = new RegExp(wordToMatch, &apos;gi&apos;);</span><br><span class="line">        return place.city.match(regex) || place.state.match(regex)</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="利用正規式取代內容"><a href="#利用正規式取代內容" class="headerlink" title="利用正規式取代內容"></a>利用正規式取代內容</h3><p>replace() 方法會傳回一個新字串，此新字串是透過將原字串與 pattern 比對，但不會改變原本的字串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const regex = new RegExp(this.value, &apos;gi&apos;);</span><br><span class="line"></span><br><span class="line">const cityName = place.city.replace(regex, </span><br><span class="line">`&lt;span class=&apos;hl&apos;&gt;$&#123;this.value&#125;&lt;/span&gt;`);</span><br><span class="line"></span><br><span class="line">const stateName = place.state.replace(regex, </span><br><span class="line">`&lt;span class=&apos;hl&apos;&gt;$&#123;this.value&#125;&lt;/span&gt;`);</span><br></pre></td></tr></table></figure><h3 id="change-事件和keyup-事件"><a href="#change-事件和keyup-事件" class="headerlink" title="change 事件和keyup 事件"></a>change 事件和keyup 事件</h3><ul><li>keyup 事件 會在任何元素值改變的時候被出發（例如每打一個字都會觸發一次）</li><li>change event 則是會在有元素值改變，且該元素脫離 focus 狀態時才觸發</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">searchInput.addEventListener(&apos;change&apos;, displayMatches);</span><br><span class="line">searchInput.addEventListener(&apos;keyup&apos;, displayMatches);</span><br></pre></td></tr></table></figure><h3 id="完成品"><a href="#完成品" class="headerlink" title="完成品"></a>完成品</h3><p><a href="https://codepen.io/Shengzhi/pen/oRVqYa" target="_blank" rel="noopener">https://codepen.io/Shengzhi/pen/oRVqYa</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;利用-Fetch-API-取得數據資料&quot;&gt;&lt;a href=&quot;#利用-Fetch-API-取得數據資料&quot; class=&quot;headerlink&quot; title=&quot;利用 Fetch API 取得數據資料&quot;&gt;&lt;/a&gt;利用 Fetch API 取得數據資料&lt;/h3&gt;&lt;p&gt;利用
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
</feed>
