<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CYC&#39;S BLOG</title>
  
  <subtitle>CYC&#39;S NOTEBOOK</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-01T07:10:23.619Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C# - This</title>
    <link href="http://yoursite.com/2020/10/01/2020-10-1/"/>
    <id>http://yoursite.com/2020/10/01/2020-10-1/</id>
    <published>2020-09-30T16:00:00.000Z</published>
    <updated>2020-10-01T07:10:23.619Z</updated>
    
    <content type="html"><![CDATA[<ol><li>「this」即這個物件的</li><li>this 是一種 reference type 的變數，是一個指向自己物件的物件變數</li><li>this 這個變數會隨物件建立的時候就宣告</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        public int StudentID;</span><br><span class="line">        public string Name;</span><br><span class="line">        public int Grade;</span><br><span class="line">        public int height;</span><br><span class="line">        public Student(int studentID, string name, int grade,int height)</span><br><span class="line">        &#123;</span><br><span class="line">            StudentID = studentID;</span><br><span class="line">            Name = name;</span><br><span class="line">            Grade = grade;</span><br><span class="line">            <span class="keyword">this</span>.height = height; <span class="comment">// this.height =&gt; 這個物件的 height</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;「this」即這個物件的&lt;/li&gt;
&lt;li&gt;this 是一種 reference type 的變數，是一個指向自己物件的物件變數&lt;/li&gt;
&lt;li&gt;this 這個變數會隨物件建立的時候就宣告&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# - 建構子</title>
    <link href="http://yoursite.com/2020/09/30/2020-09-30-2/"/>
    <id>http://yoursite.com/2020/09/30/2020-09-30-2/</id>
    <published>2020-09-29T16:00:00.000Z</published>
    <updated>2020-09-30T10:15:58.999Z</updated>
    
    <content type="html"><![CDATA[<p>問題:</p><ol><li>建構物件要寫多行程式碼</li><li>重複設定同樣的數值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">void</span> button1_Click(object sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">            s1.Name = <span class="string">"小山"</span>;</span><br><span class="line">            s1.Grade = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            Student s2 = s1;</span><br><span class="line">            s2.Name = <span class="string">"小羊"</span>;</span><br><span class="line">            s2.Grade = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h1><ul><li>Method 的一種</li><li>物件被建立的時候執行</li><li>沒有 output</li><li>名稱與 class 名稱相同</li><li>如果知道某個屬性的初始值為多少，可寫在建構子內，讓物件預先設定好</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line"></span><br><span class="line">       public int Grade;</span><br><span class="line"></span><br><span class="line">       public Student()<span class="comment">//建構子</span></span><br><span class="line">       &#123;</span><br><span class="line">           Grade = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>建構子可以給予 input(引數、輸入值)用來幫助設定物件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        public int Grade;</span><br><span class="line">        public int StudentID;</span><br><span class="line">        public string Name;</span><br><span class="line">        public Student()<span class="comment">//建構子</span></span><br><span class="line">        &#123;</span><br><span class="line">            Grade = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>建構子的 input 要在建立物件時給予</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="number">10201</span>,<span class="string">"zzz"</span>);</span><br></pre></td></tr></table></figure><ul><li>Overloaded 多載<br>不同情況需要不同建構子。可以使用物件導向的其中一個特徵「多載」。</li></ul><p>可寫兩個名稱一樣的建構子，但是接受不同數量的 input</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">void</span> button1_Click(object sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            Student s1 = <span class="keyword">new</span> Student(<span class="number">10201</span>,<span class="string">"aa"</span>);</span><br><span class="line">            Student s2 = <span class="keyword">new</span> Student(<span class="number">10202</span>, <span class="string">"bb"</span>);</span><br><span class="line">            Student s3 = <span class="keyword">new</span> Student(<span class="number">10202</span>, <span class="string">"正正"</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">       public int StudentID;</span><br><span class="line">       public string Name;</span><br><span class="line">       public int Grade;</span><br><span class="line">       public Student(int studentID, string name, int grade)</span><br><span class="line">       &#123;</span><br><span class="line">           StudentID = studentID;</span><br><span class="line">           Name = name;</span><br><span class="line">           Grade = grade;</span><br><span class="line">       &#125;</span><br><span class="line">       public Student(int studentID, string name)</span><br><span class="line">       &#123;</span><br><span class="line">           StudentID = studentID;</span><br><span class="line">           Name = name;</span><br><span class="line">           Grade = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>有建構子就不能使用系統預設建構子</li></ul><p><img src="https://i.imgur.com/Og7rrpp.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;問題:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建構物件要寫多行程式碼&lt;/li&gt;
&lt;li&gt;重複設定同樣的數值&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# - Value 與 Reference Type</title>
    <link href="http://yoursite.com/2020/09/30/2020-09-30/"/>
    <id>http://yoursite.com/2020/09/30/2020-09-30/</id>
    <published>2020-09-29T16:00:00.000Z</published>
    <updated>2020-09-30T07:22:44.981Z</updated>
    
    <content type="html"><![CDATA[<ol><li>所有變數都是被存取在記憶體裡面。</li><li>根據存取變數的方式與使用方式不同可分三種型別：</li></ol><ul><li>Value Type 實質型別</li><li>Reference Type 參考型別</li><li>Pointer Type 指標型別</li></ul><h1 id="Value-Type-實質型別"><a href="#Value-Type-實質型別" class="headerlink" title="Value Type 實質型別"></a>Value Type 實質型別</h1><p>int (整數)」就是一種 Value Type。會在記憶體裡佔據一個空間，並且標記為變數名稱，並且把指定的數值存在這個空間裡面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = <span class="number">10</span></span><br><span class="line">int b = a; <span class="comment">// a =10, b ＝10</span></span><br><span class="line">b = <span class="number">30</span> <span class="comment">// a=10 ,b = 30</span></span><br></pre></td></tr></table></figure><h1 id="Reference-Type-參考型別"><a href="#Reference-Type-參考型別" class="headerlink" title="Reference Type 參考型別"></a>Reference Type 參考型別</h1><ol><li>Class 是一種 Reference Type，宣告 Reference Type 的變數時，也會在記憶體裡尋找一個空間，標記為變數名稱。</li><li>物件要透過 new() 關鍵字建立，才能讓變數有所參照指向。沒有指向任何物件的變數，初始存放的是 null</li><li>物件是存在稱為「堆疊(Heap)」的特殊記憶體區塊</li><li>若宣告一個 Reference Type 的變數等於另一個Reference Type 的變數，會使得前一個變數參照後一個變數指向的堆疊區塊</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        public int StudentID;</span><br><span class="line">        public string Name;</span><br><span class="line">        public int Grade;</span><br><span class="line">        public string Say()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"我叫"</span> + Name + <span class="string">", 我是"</span> + Grade + <span class="string">"年級的學生"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">void</span> button1_Click(object sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">            s1.Name = <span class="string">"小山"</span>;</span><br><span class="line">            s1.Grade = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            Student s2 = s1;</span><br><span class="line">            s2.Name = <span class="string">"小羊"</span>;</span><br><span class="line">            s2.Grade = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            Student s4 = s2;</span><br><span class="line">            s4.Name = <span class="string">"元整"</span>;</span><br><span class="line">            s4.Grade = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            MessageBox.Show(s4.Say()); <span class="comment">//"我叫元整, 我是1年級的學生";</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;所有變數都是被存取在記憶體裡面。&lt;/li&gt;
&lt;li&gt;根據存取變數的方式與使用方式不同可分三種型別：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Value Type 實質型別&lt;/li&gt;
&lt;li&gt;Reference Type 參考型別&lt;/li&gt;
&lt;li&gt;Pointer
      
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# - 物件導向基礎 Class</title>
    <link href="http://yoursite.com/2020/09/27/2020-09-27/"/>
    <id>http://yoursite.com/2020/09/27/2020-09-27/</id>
    <published>2020-09-26T16:00:00.000Z</published>
    <updated>2020-09-30T05:34:59.382Z</updated>
    
    <content type="html"><![CDATA[<ol><li>物件導向即透過物件互動來完成工作</li><li>Class 分成屬性(property)與方法(method)兩部分<ul><li>class Student</li><li>property: Student ID, Name, Grade</li><li>Method:Say,Walk….</li></ul></li><li>Class 像一個設計圖，根據設計圖可以用此建立不同的物件<br><img src="https://i.imgur.com/lWLtMfe.png" alt></li><li>Class 裡面的 property 跟 method 要 public 才能被外部 method 取用在建立物件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//property</span></span><br><span class="line">    public int StudentID;</span><br><span class="line">    public string Name;</span><br><span class="line">    public int Grade;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>method 格式：</li></ol><p>`public 輸出的型別 method 名稱(輸入型別與名稱)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">       <span class="comment">//method;</span></span><br><span class="line">       public string Say()</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="comment">// method 的內容</span></span><br><span class="line">           <span class="keyword">return</span> <span class="string">"我叫"</span> + Name + <span class="string">", 我是"</span> + Grade + <span class="string">"年級的學生"</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>要使用物件，必須使用 class 的變數存取並且用關鍵字 <code>new()</code> 宣告才會真正建立物件</li><li>如果沒有輸出值，就要用 void 代替輸出值</li><li>如果要取得輸入值，必須用類似宣告變數的方式宣告輸入值，例如 talk 這個 method 有 2 個輸入值，字串 sname 與數字 sgrade ，那就要打成 p…. talk(string sname, int sgrade) { 定義 method }</li><li>將資料包裝成物件可以幫助重複使用資料</li><li>將物件傳入其他物件的 method 中使用就是一種「物件互動」的方式</li></ol><h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><ul><li>建立一個車子的 Class，並且新增兩個 method，分別叫做 speedUp 與 crash。</li><li>把車子剛建立時的速度設為 0，並建立兩輛車子 A, B</li><li>假設 A, B 這兩輛車子相向而行，如果呼叫 speedUp() 就會加速(Ex: +10 km/hr)。</li><li>然後 crash 接受一個輸入值，代表被撞的車</li><li>呼叫 crash 就會輸出字串「XX 車撞上 YY 車」</li><li>模擬 A 車以 100 km/hr 的速度撞上 B 車</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Motor</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">       public string color;</span><br><span class="line">       public string name;</span><br><span class="line">       public int speed;</span><br><span class="line"></span><br><span class="line">        public string Run()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> color + <span class="string">"的"</span>+name+<span class="string">"車子正以時速,"</span> + speed + <span class="string">"前進"</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">public <span class="keyword">void</span> speedUp()</span><br><span class="line">        &#123;</span><br><span class="line">            speed += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        public string crash(Motor b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> name + <span class="string">"車以"</span> + speed + <span class="string">"km/hr速度撞上了"</span> + b.name + <span class="string">"車"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">void</span> button1_Click(object sender, EventArgs e)</span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">         Motor a = <span class="keyword">new</span> Motor();</span><br><span class="line">           a.name = <span class="string">"Benz"</span>;</span><br><span class="line">           a.color = <span class="string">"藍色"</span>;</span><br><span class="line">           a.speed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">           Motor b = <span class="keyword">new</span> Motor();</span><br><span class="line">           b.name = <span class="string">"福斯"</span>;</span><br><span class="line">           b.color = <span class="string">"紅色"</span>;</span><br><span class="line">           b.speed = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               a.speedUp();</span><br><span class="line">               MessageBox.Show(a.Run()+<span class="string">"而且加速中當"</span>+b.Run());</span><br><span class="line">               <span class="keyword">if</span> (a.speed == <span class="number">100</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   MessageBox.Show(a.crash(b));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;物件導向即透過物件互動來完成工作&lt;/li&gt;
&lt;li&gt;Class 分成屬性(property)與方法(method)兩部分&lt;ul&gt;
&lt;li&gt;class Student&lt;/li&gt;
&lt;li&gt;property: Student ID, Name, Grade&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# - 程式結構與進入點</title>
    <link href="http://yoursite.com/2020/09/26/2020-09-26-1/"/>
    <id>http://yoursite.com/2020/09/26/2020-09-26-1/</id>
    <published>2020-09-25T16:00:00.000Z</published>
    <updated>2020-09-26T08:03:17.130Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace HelloWorld</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">void</span> Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>C# 程式碼大致可分 2 個區塊<br>（1) using 部分是呼叫內建的程式庫<br>(2) 主要區塊是自行編寫程式邏輯的地方</p></li><li><p>用大括號包起來的程式碼屬於同一個區塊，屬於上方的程式碼所有</p></li><li><p>上方的 HelloWorld 程式分三層<br>(1)namespace 可提供自行在內編寫程式庫<br>(2)class 負責 namespace 裡面某部分工作<br>(3)method 是class裡面負責更細部工作的，它後面跟著一個小括號，例如：<code>void Main(string[] args)</code><br>(4)static void Main(string[] args)是程式的「(entry point)」，所有 C#程式都會從這個 method 開始執行<br>(5)Console.WriteLine 是會在終端機上顯示文字的method，Console.ReadKey 會先暫停程式執行，等待使用者輸入任一字元後再繼續執行程式<br>(6)每行程式碼結尾都要加上 <code>;</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# - 基本計算</title>
    <link href="http://yoursite.com/2020/09/26/2020-09-26-3/"/>
    <id>http://yoursite.com/2020/09/26/2020-09-26-3/</id>
    <published>2020-09-25T16:00:00.000Z</published>
    <updated>2020-09-26T08:45:35.493Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">void</span> button1_Click(object sender, EventArgs e)</span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">           int number =<span class="number">20</span> ;</span><br><span class="line">           number +=<span class="number">30</span> ;</span><br><span class="line">           number = number - <span class="number">1</span>;</span><br><span class="line">           number--;</span><br><span class="line">           MessageBox.Show(<span class="string">"number = "</span>+ number);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ol><li><p>如果你試圖要將小數存入 int(整數) 變數裡面，C# 會自動省略小數點之後，只留下整數的部分存進變數裡面</p></li><li><p>除法要是遇到無法整除的情形，它仍會計算到小數點後</p></li><li><p><code>int a; a = 30 / 8;</code></p><p>最後 a 裡面只會存入 3 而已，因為 a 是整數變數</p></li><li><p>取得餘數用 % 符號</p></li><li><p>number = number + 8 可簡化為 number +=8</p></li><li><p>單純「遞增 1」或「遞減 1 」的計算，可以使用</p></li></ol><p>number++;<br>number–; 7. C# 一看到運算子，就會依照他的計算邏輯把運算子左右兩邊的值抓出來做計算。那麼為了要使結果正確，並且有規則可循。每個運算子都有優先的順序。我們熟悉的「先乘除、後加減」也是 C# 使用運算子的優先順序之一，所以它就會先計算「* / %」的結果，再去計算「+ -」的結果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# - 變數宣告意義與型別</title>
    <link href="http://yoursite.com/2020/09/26/2020-09-26-2/"/>
    <id>http://yoursite.com/2020/09/26/2020-09-26-2/</id>
    <published>2020-09-25T16:00:00.000Z</published>
    <updated>2020-09-28T05:35:20.186Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">void</span> button1_Click(object sender, EventArgs e)</span><br><span class="line">       &#123;</span><br><span class="line">           int number ;</span><br><span class="line">           number = <span class="number">20</span>;</span><br><span class="line">           double dnumber=<span class="number">3.141989030</span>;</span><br><span class="line">           bool b = <span class="literal">true</span>;</span><br><span class="line">           MessageBox.Show(<span class="string">"number = "</span>+ number);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h1 id="變數宣告意義"><a href="#變數宣告意義" class="headerlink" title="變數宣告意義"></a>變數宣告意義</h1><ol><li><p>所有變數在使用前都必須先宣告型別，目的是讓電腦先知道變數的「型別」是什麼。先告知電腦到底我們要給這個變數多少記憶體空間(從 type 判斷)以及它的名稱是甚麼</p></li><li><p><code>=</code>不是等於，而是「指定」特定的儲存值給變數，「指定」代表的意思其實就是把「右邊的值存入左邊的變數」裡的意思。真正的「相等」是使用「==」這個符號。</p></li><li><p>使用變數前，一定要先存入某個數值，否則無法編譯</p></li><li><p>變數的作用域（生命週期）叫 Scope，只要超出變數的 scope 就無法使用他。變數只在大括號包起來的範圍內才有效。而在大括號外面使用變數就會無法呼叫到它。</p></li><li><p>變數名稱是不可以重複的，不過如果你在一個變數的 scope 外宣告了一樣名稱的變數，那就不會互相影響。例如，你在 void button1_Click() 裡面宣告了 num，跟在 void button2_Click() 裡面宣告了 num，這樣就不會互相衝突。</p></li></ol><h1 id="數值型別"><a href="#數值型別" class="headerlink" title="數值型別"></a>數值型別</h1><ol><li><code>int</code> 代表「整數（integer)」，例如 10,100,-999</li><li>int 只能儲存有限大小的數字，每個 int 的變數可以分配到 32 bits(4 bytes) 的記憶體空間。</li><li>想要儲存小數可以使用 float 或 double</li><li>C# 會預先將所有數字當成 double 來處理</li></ol><h1 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h1><ol><li>bool 只能儲存「true」、「false」兩種資料，這種數值通常用來儲存判斷式的結果</li></ol><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><ol><li>常用變數型別，儲存文字類型的值。</li><li>不像 int, double ,bool 等型別儲存使用的記憶體空間是固定的。string 型別若儲存的文字內容越多，佔用的空間越大。</li><li>string 也可用加法連接字串或其他型別的內容，其他不是字串的值會被先轉成字串再相連</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">void</span> button1_Click(object sender, EventArgs e)</span><br><span class="line">       &#123;</span><br><span class="line">           string str = <span class="string">"我是姍姍"</span>;</span><br><span class="line">           string str2 = <span class="string">"哈哈"</span>;</span><br><span class="line">           int number = <span class="number">54321</span>;</span><br><span class="line">           string str3 = str + str2;</span><br><span class="line">           str += str2;</span><br><span class="line">           MessageBox.Show(str3+number);</span><br><span class="line">           MessageBox.Show(str);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>常見的陣列運用方式</title>
    <link href="http://yoursite.com/2019/06/10/2019-06-10/"/>
    <id>http://yoursite.com/2019/06/10/2019-06-10/</id>
    <published>2019-06-09T16:00:00.000Z</published>
    <updated>2020-09-05T09:56:37.626Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"bob"</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">position</span>: <span class="string">"developer"</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"mary"</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">position</span>: <span class="string">"cooker"</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"jim"</span>, <span class="attr">age</span>: <span class="number">68</span>, <span class="attr">position</span>: <span class="string">"artist"</span>, <span class="attr">id</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"tom"</span>, <span class="attr">age</span>: <span class="number">28</span>, <span class="attr">position</span>: <span class="string">"artist"</span>, <span class="attr">id</span>: <span class="number">4</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h1 id="forEach"><a href="#forEach" class="headerlink" title="forEach();"></a>forEach();</h1><p>將陣列內的每個元素，皆傳入並執行給定的函式一次。但不會回傳一個新的陣列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">people.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.first);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h1><p><code>map()</code> 方法會建立一個新的陣列，其內容來自原始陣列的經由函式回呼後形成的新陣列，但不會改變原本陣列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newPeople = people.map(<span class="function"><span class="keyword">function</span> (<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    firstName: person.name.toUpperCase(),</span><br><span class="line">    oldAge: person.age + <span class="number">20</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newPeople);</span><br></pre></td></tr></table></figure><h1 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h1><p>過濾的方法，就是傳入一個函數，並且以迴圈檢查運算每個物件，由原陣列中通過該函式條件而構成的新陣列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> developer = people.filter(<span class="function"><span class="keyword">function</span> (<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> person.position === <span class="string">"developer"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(developer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = people.filter(<span class="function"><span class="keyword">function</span> (<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> person.id === <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(person2);</span><br></pre></td></tr></table></figure><h1 id="find"><a href="#find" class="headerlink" title="find();"></a>find();</h1><p>find() 方法會回傳第一個滿足條件的元素值。否則回傳 undefined。可運用在例如尋找獨特元素如 id 屬性時</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> found = people.find(<span class="function"><span class="keyword">function</span> (<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> person.id === <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(found);</span><br></pre></td></tr></table></figure><h1 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h1><p>sort() 方法會原地對一個陣列的所有元素進行排序，並回傳此陣列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寫法 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ordered = people.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a.age &gt; b.age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ordered);</span><br><span class="line"><span class="comment">//寫法 2</span></span><br><span class="line"><span class="keyword">const</span> ordered = people.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a.age &gt; b.age ? <span class="number">1</span> : <span class="number">-1</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldest = inventors.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lastGuy = a.passed - a.year;</span><br><span class="line">  <span class="keyword">const</span> nextGuy = b.passed - b.year;</span><br><span class="line">  <span class="keyword">return</span> lastGuy &gt; nextGuy ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.table(oldest);</span><br></pre></td></tr></table></figure><h1 id="reduce"><a href="#reduce" class="headerlink" title=".reduce()"></a>.reduce()</h1><p>reduce() 方法將一個累加器及陣列中每項元素（由左至右）傳入回呼函式，將陣列化為單一值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arr.reduce(callback[accumulator, currentValue], initialValue)</span></span><br><span class="line"><span class="keyword">const</span> total = people.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">acc, currItem</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`total <span class="subst">$&#123;acc&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`current money <span class="subst">$&#123;currItem.salary&#125;</span>`</span>);</span><br><span class="line">  acc += currItem.salary;</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br></pre></td></tr></table></figure><h1 id="範例-1-怎麼過濾出網頁裡有-“de”-的地址？"><a href="#範例-1-怎麼過濾出網頁裡有-“de”-的地址？" class="headerlink" title="範例 1 怎麼過濾出網頁裡有 “de” 的地址？"></a>範例 1 怎麼過濾出網頁裡有 “de” 的地址？</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> category = <span class="built_in">document</span>.querySelector(<span class="string">".mw-category"</span>);</span><br><span class="line"><span class="keyword">const</span> link = category.querySelectorAll(<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aElement = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">".mw-category a"</span>));</span><br><span class="line"><span class="keyword">let</span> list = aElement</span><br><span class="line">  .map(<span class="function">(<span class="params">item</span>) =&gt;</span> item.textContent)</span><br><span class="line">  .filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.includes(<span class="string">"de"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure><h1 id="範例-2-依照姓來排序"><a href="#範例-2-依照姓來排序" class="headerlink" title="範例 2 依照姓來排序"></a>範例 2 依照姓來排序</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  <span class="string">"Beck, Glenn"</span>,</span><br><span class="line">  <span class="string">"Becker, Carl"</span>,</span><br><span class="line">  <span class="string">"Beckett, Samuel"</span>,</span><br><span class="line">  <span class="string">"Beddoes, Mick"</span>,</span><br><span class="line">  <span class="string">"Beecher, Henry"</span>,</span><br><span class="line">  <span class="string">"Beethoven, Ludwig"</span>,</span><br><span class="line">  <span class="string">"Begin, Menachem"</span>,</span><br><span class="line">  <span class="string">"Belloc, Hilaire"</span>,</span><br><span class="line">  <span class="string">"Bellow, Saul"</span>,</span><br><span class="line">  <span class="string">"Benchley, Robert"</span>,</span><br><span class="line">  <span class="string">"Benenson, Peter"</span>,</span><br><span class="line">  <span class="string">"Ben-Gurion, David"</span>,</span><br><span class="line">  <span class="string">"Benjamin, Walter"</span>,</span><br><span class="line">  <span class="string">"Benn, Tony"</span>,</span><br><span class="line">  <span class="string">"Bennington, Chester"</span>,</span><br><span class="line">  <span class="string">"Benson, Leana"</span>,</span><br><span class="line">  <span class="string">"Bent, Silas"</span>,</span><br><span class="line">  <span class="string">"Bentsen, Lloyd"</span>,</span><br><span class="line">  <span class="string">"Berger, Ric"</span>,</span><br><span class="line">  <span class="string">"Bergman, Ingmar"</span>,</span><br><span class="line">  <span class="string">"Berio, Luciano"</span>,</span><br><span class="line">  <span class="string">"Berle, Milton"</span>,</span><br><span class="line">  <span class="string">"Berlin, Irving"</span>,</span><br><span class="line">  <span class="string">"Berne, Eric"</span>,</span><br><span class="line">  <span class="string">"Bernhard, Sandra"</span>,</span><br><span class="line">  <span class="string">"Berra, Yogi"</span>,</span><br><span class="line">  <span class="string">"Berry, Halle"</span>,</span><br><span class="line">  <span class="string">"Berry, Wendell"</span>,</span><br><span class="line">  <span class="string">"Bethea, Erin"</span>,</span><br><span class="line">  <span class="string">"Bevan, Aneurin"</span>,</span><br><span class="line">  <span class="string">"Bevel, Ken"</span>,</span><br><span class="line">  <span class="string">"Biden, Joseph"</span>,</span><br><span class="line">  <span class="string">"Bierce, Ambrose"</span>,</span><br><span class="line">  <span class="string">"Biko, Steve"</span>,</span><br><span class="line">  <span class="string">"Billings, Josh"</span>,</span><br><span class="line">  <span class="string">"Biondo, Frank"</span>,</span><br><span class="line">  <span class="string">"Birrell, Augustine"</span>,</span><br><span class="line">  <span class="string">"Black, Elk"</span>,</span><br><span class="line">  <span class="string">"Blair, Robert"</span>,</span><br><span class="line">  <span class="string">"Blair, Tony"</span>,</span><br><span class="line">  <span class="string">"Blake, William"</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alpha = people.sort(<span class="function">(<span class="params">lastOne, nextOne</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [aLast, aFirst] = lastOne.split(<span class="string">","</span>);</span><br><span class="line">  <span class="keyword">const</span> [bLast, bFirst] = nextOne.split(<span class="string">","</span>);</span><br><span class="line">  <span class="keyword">return</span> aLast &gt; bFirst ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(alpha);</span><br></pre></td></tr></table></figure><h1 id="範例-3-加總個別項目的總數"><a href="#範例-3-加總個別項目的總數" class="headerlink" title="範例 3 加總個別項目的總數"></a>範例 3 加總個別項目的總數</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  <span class="string">"car"</span>,</span><br><span class="line">  <span class="string">"car"</span>,</span><br><span class="line">  <span class="string">"truck"</span>,</span><br><span class="line">  <span class="string">"truck"</span>,</span><br><span class="line">  <span class="string">"bike"</span>,</span><br><span class="line">  <span class="string">"walk"</span>,</span><br><span class="line">  <span class="string">"car"</span>,</span><br><span class="line">  <span class="string">"van"</span>,</span><br><span class="line">  <span class="string">"bike"</span>,</span><br><span class="line">  <span class="string">"walk"</span>,</span><br><span class="line">  <span class="string">"car"</span>,</span><br><span class="line">  <span class="string">"van"</span>,</span><br><span class="line">  <span class="string">"car"</span>,</span><br><span class="line">  <span class="string">"truck"</span>,</span><br><span class="line">  <span class="string">"pogostick"</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transportation = data.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">obj, item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj[item]) &#123;</span><br><span class="line">    obj[item] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  obj[item]++;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(transportation);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - AJAX</title>
    <link href="http://yoursite.com/2019/02/11/2019-02-11/"/>
    <id>http://yoursite.com/2019/02/11/2019-02-11/</id>
    <published>2019-02-10T16:00:00.000Z</published>
    <updated>2020-09-01T11:15:43.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>非同步 JavaScript 及 XML （Asynchronous JavaScript and XML，AJAX）不是一種「技術」，而是一種開發架構，主要以 JavaScript 與 XML 為主，也包括 CSS、DOM（Document Object Model）與 HTML 等，最重要的是 XMLHttpRequest 物件。使 AJAX 能達到非同步資料交換的目的。使瀏覽器不需要重新載入整個頁面就可以跟後端或伺服器取得資料。<br>Jesse Garrett 的文章中，對 AJAX 的定義如下：</p><p>● 使用 XHTML 與 CSS 作為展現標準<br>● 使用 DOM 作為動態顯示與互動<br>● 使用 XML 與 XSLT 作為資料交換與運用<br>● 使用 XMLHttpRequest 作為非同步的資料回饋<br>● 使用 JavaScript 結合以上所有結果</p><p>實作取得一個公車路線公開資料如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> URI =</span><br><span class="line">  <span class="string">"https://ptx.transportdata.tw/MOTC/v2/Bus/Route/City/NewTaipei?$top=600&amp;$format=JSON"</span>;</span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">"GET"</span>, URI, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span> &amp;&amp; <span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h1><p>建立一個名稱為 xhr 的 XMLHttpRequest 物件，利用這個物件的方法進行資料請求。執行後在 dev tool 裡用 console.log 查詢一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/aEKdUte.png" alt></p><p>readyState 就是目前回傳狀態</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 - (request not initialized)還沒開始</span><br><span class="line">1 - (server connection established)用了open()，但讀取中</span><br><span class="line">2 - (request received)已讀取</span><br><span class="line">3 - (processing request)資訊交換中</span><br><span class="line">4 - (request finished and response is ready)一切完成</span><br></pre></td></tr></table></figure><p>接著用 <code>open()</code>指令來初始設定發出請求的方式，包括三個參數：<br>第一個參數是 HTTP request 的方法，GET(讀取）、POST（發送），這些方法都是大寫。第二個參數是請求頁面的 URL。第三個是同步(false)與非同步(true) 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"GET"</span>, URI, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>確實發出請求，此方法可帶參數，傳送給對方的資料。或空值，沒有要傳資料</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(<span class="literal">null</span>); <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>利用 if 判斷式(xhr.status == 200)，來確認有沒有撈到資料，條件成立再去執行要做的行為。onload 表示當資料回傳，就會調用相應處理的函數。當中有 if 判斷。status 代表 HTTP 狀態碼，200 表示 ok，在此我們希望完成時有下一步動作，所以判斷條件爲 this.readyState === 4 &amp;&amp; this.status === 200 。接著我們使用一個變數 data，存放取得的資料，responseText 返回在發送請求後從服務器接收的文本。我們利用 JSON.parse 解析數據，使數據成為 JavaScript 對象。接著使用 console.log 把它顯示出來。展開物件來看看結果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span> &amp;&amp; <span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/R0waZIU.png" alt></p><p>成功拿到資料後，再按需求渲染到前端畫面即可</p><h2 id="Asynchronous-非同步-概念"><a href="#Asynchronous-非同步-概念" class="headerlink" title="Asynchronous(非同步)概念"></a>Asynchronous(非同步)概念</h2><p>open 裡面第三個欄位的參數為。</p><p>true: 非同步,不會等資料傳回來就讓程式繼續往下跑,等到資料跑完才自動回傳。<br>false: 同步,會等資料跑完回傳回來,程式再繼續往下跑。有些伺服器的資料是很龐大的，一般來說不太可能等全部跑完再執行之後的程式碼，所以就會用非同步的概念。這種情況就需要用到onload這個事件來解決。意思就是當傳送後載入完成再去執行這個onload帶的 function。</p><h1 id="HTTP-狀態碼"><a href="#HTTP-狀態碼" class="headerlink" title="HTTP 狀態碼"></a>HTTP 狀態碼</h1><p>透過 chrome 瀏覽器開發工具中的 Network 去確認，選擇 JS 後看到 Status的</p><p>status = 200，資料有正確回傳，有撈到。<br>status = 404，資料讀取錯誤，沒有撈到。</p><p><img src="https://i.imgur.com/mEkIInK.png" alt></p><p>詳細 http 狀況碼可以參考 <a href="https://orow.github.io/2019/03/11/ajax-javascript/" target="_blank" rel="noopener">MDN</a></p><h1 id="POST-Method"><a href="#POST-Method" class="headerlink" title="POST Method"></a>POST Method</h1><p>POST 相比 GET 需要在 open 之後多一個指令 setRequestHeader，告訴伺服器現在要傳送資料、並告知資料的格式。而setRequestHeader與send也會因為格式不同而要傳送不同的內容。這邊用註冊的概念來舉例，送出要註冊的帳號密碼，可以透過 xhr 中的responsText來確認是不是有相同帳號。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> account = &#123;</span><br><span class="line">  email: <span class="string">"qweasdqq@gamil.com"</span>,</span><br><span class="line">  password: <span class="string">"555"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"url"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="built_in">JSON</span>.stringify(account);</span><br><span class="line">xhr.send(data);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;AJAX&lt;/h1&gt;&lt;p&gt;非同步 JavaScript 及 XML （Asynchronous JavaScript and XML，AJAX）不是一
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Hoisting(提昇)</title>
    <link href="http://yoursite.com/2019/02/09/2019-02-09/"/>
    <id>http://yoursite.com/2019/02/09/2019-02-09/</id>
    <published>2019-02-08T16:00:00.000Z</published>
    <updated>2020-09-01T09:14:23.724Z</updated>
    
    <content type="html"><![CDATA[<p>重點有三：</p><ol><li>變數宣告跟函式宣告都會提升</li><li>只有宣告會提升，賦值不會提升</li><li>別忘了函式裡面還有傳進來的參數</li></ol><p>Javascript 執行時會經過創造執行環境的階段。JavaScript 跟其他程式語言不同，它可以在還沒宣告函式前就先呼叫並且執行。在下列的範例中，假如我們把呼叫移到程式碼最上方，函式宣告之前，會發生什麼事？JavaScript 不僅執行函式，而且沒有錯誤。<code>Called b!</code> 正常印出來，代表函式 b 正常執行，但是 <code>undefined</code> 是怎麼回事？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"called b !"</span>); <span class="comment">// "called b !"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Javascript 程式碼在執行時，會經過一個創造階段 (creation)，並且在記憶體裡為變數與函數建立儲存空間，在記憶體裡設定變數與函數的這個步驟稱為「提昇」（hoisting) 。</p><p>不是真的把程式碼移到最上面。所以函式跟它的內容(定義)會先存至記憶體，所以可以正確的呼叫，呼叫後建立這個函式的執行環境，印出 <code>Called b!</code>。雖然變數也在記憶體中建立空間，可是它的內容並沒有在創造階段時被放入。創造變數與賦值給變數可當成兩件事，所以呼叫變數 <code>a</code> 才會印出 <code>undefined</code>。</p><p>上面的程式碼，在電腦執行時可以想像成這樣的順序，結果會是一樣的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"called b !"</span>);</span><br><span class="line">&#125;</span><br><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="string">"hello world"</span>;</span><br></pre></td></tr></table></figure><p>下面的例子可以正確執行，因為函數會先在記憶體裡創造空間，並建立它的區域變數，再執行呼叫。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"called b !"</span>); <span class="comment">//called b !</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">"hello world"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// "hello world"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下列的狀況雖然貌似。但是因為 <code>var b</code> 在創造階段被提昇，但還沒有被賦值。接著</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">b();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"called b !"</span>);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">"hello world"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以想像創造階段是像這樣</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"></span><br><span class="line">b();</span><br><span class="line"></span><br><span class="line">b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">"Hello World!"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>變數 <code>b</code> 先被提升 (創造變數 <code>b</code> 並設定進記憶體)，接著呼叫執行 b 函式，為變數 b 賦值(指向)函式。呼叫執行 b 函式時報錯，是因為變數 b 這個時候根本沒有被賦值。所以自然報錯 b is not a function。</p><p>這種貌似變數與函式被拉到執行環境最前面的現象稱為 <code>Hoisting</code></p><p>另一個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> foobar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line">foobar();</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以想像創造階段是像這樣</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> foobar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> foo;</span><br><span class="line">  <span class="built_in">console</span>.log(foo); <span class="comment">//undefined</span></span><br><span class="line">  foo = <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line">foobar();</span><br></pre></td></tr></table></figure><p>區域變數 foo 的宣告會被提昇，先於呼叫 console.log 方法，也就是區域變數的值將會作為參數傳入成為 console.log 得出的值，而不是在函數外部聲明的全域變數。但是，變數宣告不會提升該值，因此輸出將是 undefined，而不是 2。在創造階段，函數跟其函數內容(定義)會先存至記憶體，雖然變數也在記憶體中建立空間，可是它的內容並沒有在創造階段時被放入。所以呼叫變數 foo 才會印出 undefined。</p><p>延伸閱讀：<br><a href="https://" target="_blank" rel="noopener">https://blog.techbridge.cc/2018/11/10/javascript-hoisting/</a><br><a href="https://" target="_blank" rel="noopener">https://github.com/aszx87410/blog/issues/34#issuecomment-500890667</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;重點有三：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;變數宣告跟函式宣告都會提升&lt;/li&gt;
&lt;li&gt;只有宣告會提升，賦值不會提升&lt;/li&gt;
&lt;li&gt;別忘了函式裡面還有傳進來的參數&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Javascript 執行時會經過創造執行環境的階段。JavaScript 跟其他
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 單執行緒、同步與非同步</title>
    <link href="http://yoursite.com/2019/02/09/2019-02-10/"/>
    <id>http://yoursite.com/2019/02/09/2019-02-10/</id>
    <published>2019-02-08T16:00:00.000Z</published>
    <updated>2020-09-01T09:13:18.650Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 的執行方式是單執行緒 (single threaded) 可以理解成它一次只做一件事情。</p><h1 id="單執行緒"><a href="#單執行緒" class="headerlink" title="單執行緒"></a>單執行緒</h1><p>單執行緒的意思是任務的執行需要排隊。瀏覽器只分配給 JavaScript 一個主執行緒(stack)，但一次只能執行一個任務，這些任務形成一個事件佇列 (Queue) 排隊等候執行，但是瀏覽器不只運作 JavaScript 這個程式而已。因為瀏覽器的內核是多線程的，它們藉由瀏覽器內核的控制保持同步，舉例來說有三個常駐線程：</p><ul><li>JavaScript 引擎</li><li>GUI 渲染</li><li>瀏覽器事件觸發</li></ul><p>針對瀏覽器事件觸發，當一個事件被觸發時，該線程會把事件添加到待處理隊列的隊尾，等待 JavaScript 引擎的處理。這些事件可來自 JavaScript 引擎當前執行的程式碼，如 <code>setTimeout</code>、也可來自瀏覽器內核如滑鼠點擊、<code>Ajax</code> 非同步請求等，都要排隊處理。</p><h1 id="同步執行"><a href="#同步執行" class="headerlink" title="同步執行"></a>同步執行</h1><p>同步執行和單執行緒有點類似，同步的意思是，對 JavaScript 來說，一次一個而不是一次兩個或三個。是程式碼中的一行，一次執行一行，而且是照順序的，程式碼會依照出現的順序，一次執行一行。</p><h1 id="單執行緒如何執行非同步？"><a href="#單執行緒如何執行非同步？" class="headerlink" title="單執行緒如何執行非同步？"></a>單執行緒如何執行非同步？</h1><p>以上可以統整出兩個重點：</p><ol><li>瀏覽器內核除了 JavaScript 的執行緒，還有其他同步執行的執行緒。</li><li><code>setTimeout</code>、<code>event</code>、<code>Ajax</code>…等無法預期執行時間的操作，都會先被丟到事件佇列排隊，等候執行，等到同步執行的程式碼執行完之後，才會去處理那些佇列中的任務。</li></ol><p>單一執行緒表示任務跟任務之間需要排隊，前一個任務完成才會執行下一個任務。可是如果 JavaScript 裡不存在非同步，只能一行一行、由上而下執行，那在同步執行下，如果上一行解析時間很長，那 <code>setTimeout</code>、<code>event callback</code>、<code>Http request</code> 這些無法預期觸發執行時間的操作，不就會塞車？對於使用者而言，這樣的使用者體驗很差。</p><p>JavaScript 的執行緒會逐一執行 Stack 內的任務，碰上非同步事件，會先執行後面的任務。當這些非同步事件的 callback function 被呼叫時，就會將這些非同步的任務丟到事件列裡面，等 Stack 的任務都完成後，在繼續執行排隊的任務。</p><p>單執行緒可以透過事件迴圈 (Event loop) 來實現這些事件，將這些耗時、無法預期執行時間的操作以非同步處理，等執行完同步的程式碼再來處理它們。執行 function 時，會依執行順序把 function 丟到 主執行緒中，等到主執行緒中的任務都執行完畢，才會將事件佇列中待執行的任務拉到主執行緒中執行，執行完畢、清空後，再到 事件佇列中查看是否還有待執行任務，這個查看的過程就稱為 <code>Event Loop</code>。</p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><ul><li>例一</li></ul><p>即使 setTimeout()的等待時間為0，但因為會先被JavaScript丟到一邊擱置，等 Stack 的任務完成後，再回來執行 setTimeout()內的 callback function。所以setTimeout()會最晚印出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"start"</span>);</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"call function"</span>);</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"setTimeOut"</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"end"</span>);</span><br></pre></td></tr></table></figure><ul><li>例二</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"5sec"</span>);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"1sec"</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"3sec"</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> ((<span class="built_in">Date</span>, now() &gt; now + <span class="number">2000</span>)) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Nihao"</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"2sec"</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"0sec"</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>這個範例流程可以分為兩條線解析 —</p><p>setTimeout:</p><ol><li><code>setTimeout</code> 被先拉到旁邊開始倒數</li><li>倒數完畢，由 <code>callback function</code> 放到事件佇列</li></ol><p>while 等待兩秒：</p><ol><li>執行同步執行的程式碼</li><li>印出 Nihao</li></ol><h2 id="範例小結"><a href="#範例小結" class="headerlink" title="範例小結"></a>範例小結</h2><p><code>setTimeout</code>、<code>setInterval</code> 等設定的等待時，例如 3 秒，並不能確保它真會在設定的時間到就馬上執行，只能夠確保它在大於等於 3sec 候才會執行。</p><p>因此以上的範例印出的順序及運作流程為：</p><ol><li>5、1、3 秒拉出倒數（倒數完成後由 <code>callback function</code> 丟進<code>事件佇列</code>)</li><li>while 等待 2 秒</li><li>印出 Nihao</li><li>2、0 秒拉出倒數（倒數完成後由 <code>callback function</code> 丟進<code>事件佇列</code>)</li><li>主執行緒空了，查看事件佇列</li><li>印出 1、3sec (5sec 還在倒數)</li><li>印出 while 下方的 0sec</li><li>印出 5sec</li><li>印出 2sec</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript 的執行方式是單執行緒 (single threaded) 可以理解成它一次只做一件事情。&lt;/p&gt;
&lt;h1 id=&quot;單執行緒&quot;&gt;&lt;a href=&quot;#單執行緒&quot; class=&quot;headerlink&quot; title=&quot;單執行緒&quot;&gt;&lt;/a&gt;單執行緒&lt;/h1&gt;&lt;p
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Closure(閉包)</title>
    <link href="http://yoursite.com/2019/02/08/2019-02-08/"/>
    <id>http://yoursite.com/2019/02/08/2019-02-08/</id>
    <published>2019-02-07T16:00:00.000Z</published>
    <updated>2020-09-01T09:14:19.740Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.techbridge.cc/2018/12/08/javascript-closure/" target="_blank" rel="noopener">參考來源一</a><br><a href="https://orow.github.io/2019/03/06/closure/" target="_blank" rel="noopener">參考來源二</a><br><a href="https://ithelp.ithome.com.tw/articles/10193009" target="_blank" rel="noopener">參考來源三</a><br><a href="https://pjchender.blogspot.com/2017/05/javascript-closure.html" target="_blank" rel="noopener">參考來源四</a><br><a href="https://shubo.io/javascript-closure/" target="_blank" rel="noopener">參考來源五</a></p><p>閉包是 JavaScript 最強大的特性之一。JavaScript 允許巢狀函式（nesting of functions）並給予內部函式完全訪問（full access）所有變數、與外部函式定義的函式（還有所有外部函式內的變數與函式）不過，外部函式並不能訪問內部函式的變數與函式。這保障了內部函式的變數安全。另外，由於內部函式能訪問外部函式定義的變數與函式，將存活得比外部函式還久。</p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Functions" target="_blank" rel="noopener">MDN</a></p><h1 id="範圍鏈複習"><a href="#範圍鏈複習" class="headerlink" title="範圍鏈複習"></a>範圍鏈複習</h1><p>閉包概念與範圍鏈關係密切。範圍鏈的一個要點是「變數有效範圍的最小單位是 function」。例如以下例子，內層的 function inner 可以讀取外層宣告的變數，但外層 function outer 存取不到內層宣告的變數。若是在自己層級找不到，就會一層一層往外找，直到全域為止。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = a * <span class="number">2</span>; <span class="comment">// 此處無法取得變數 c , 但可以向外找到變數 a</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c); <span class="comment">//因為範圍鏈的關係，即使只有對c定義，但可以向上取得a,b,c</span></span><br><span class="line">  &#125;</span><br><span class="line">  inner(b * <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; <span class="comment">//globe這層只有a</span></span><br><span class="line">outer(a);</span><br></pre></td></tr></table></figure><h1 id="閉包"><a href="#閉包" class="headerlink" title="閉包"></a>閉包</h1><p>底下例子透過 呼叫 outer() 後 return 的結果，把原本外層存取不到的 inner 取得。因為範圍鏈的變數有效範圍是在函式定義的當下決定，不是呼叫的時候決定。所以即使在全域透唾 innerFunc() 呼叫內部的 inner()，實際取得的 msg 仍然是內層的 “local” 字串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">"global"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">"local"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> innerFunc = outer();</span><br><span class="line"><span class="keyword">var</span> result = innerFunc();</span><br><span class="line"><span class="built_in">console</span>.log(innerFunc());</span><br></pre></td></tr></table></figure><p>當 inner 被回傳後，除了自己本身的程式碼，也取得內部函式「當時環境」的變數值，記住執行當時的環境，這就是「閉包」。在呼叫函式以前，範圍鏈就被建立，所以藉由在函式 outer 裡面「回傳」另一個內部函式給外層的範圍，使得外層也可以透過「範圍鏈」取得內部的變數 msg。</p><ul><li>不使用 closure<br>同時計算 counter 1 跟 counter 2 的函式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  countDog  的函式</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(count + <span class="string">" dog(s)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  countCat  的函式</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countCat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(count + <span class="string">" cat(s)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">countCat(); <span class="comment">//1cat</span></span><br><span class="line">countCat(); <span class="comment">//2cat</span></span><br><span class="line">countCat(); <span class="comment">//3cat</span></span><br></pre></td></tr></table></figure><p>但是當執行了 countDogs()跟 conuntCats()，會讓 count 增加。因為 count 是 全域變數，兩個函式執行時都會用到這個變數而變成重複計算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDogs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(count + <span class="string">" dog(s)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countCats</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(count + <span class="string">" cat(s)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">countCats(); <span class="comment">// 1 cat(s)</span></span><br><span class="line">countCats(); <span class="comment">// 2 cat(s)</span></span><br><span class="line">countCats(); <span class="comment">// 3 cat(s)</span></span><br><span class="line"></span><br><span class="line">countDogs(); <span class="comment">// 4 dog(s)，我希望是 1 dog(s)</span></span><br><span class="line">countDogs(); <span class="comment">// 5 dog(s)，我希望是 2 dog(s)</span></span><br><span class="line"></span><br><span class="line">countCats(); <span class="comment">// 6 cat(s)，我希望是 4 cat(s)</span></span><br></pre></td></tr></table></figure><ul><li>使用 closure<br>Closure 就能解決這個問題。利用閉包（closure）的作法，讓函式有自己私有變數，簡單來說就是 countDogs 裡面能有一個計算 dogs 的 count 變數；而 countCats 裡面也能有一個計算 cats 的 count 變數，兩者是不會互相干擾的。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dogHouse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">countDogs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(count + <span class="string">"dogs"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> countDogs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catHouse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">countCats</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(count + <span class="string">"cats"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> countCats;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> countDogs = dogHouse();</span><br><span class="line"><span class="keyword">const</span> countCats = catHouse();</span><br><span class="line"></span><br><span class="line">countDogs(); <span class="comment">//1dogs</span></span><br><span class="line">countDogs(); <span class="comment">//2dogs</span></span><br><span class="line">countDogs(); <span class="comment">//3dogs</span></span><br><span class="line"></span><br><span class="line">countCats(); <span class="comment">//1cats</span></span><br><span class="line">countCats(); <span class="comment">//2cats</span></span><br><span class="line">countDogs(); <span class="comment">//4dogs</span></span><br></pre></td></tr></table></figure><p>這樣寫就把關於計算貓與狗個別的 count 關閉在 catHouse() 與 dogHouse() 中，當看到一個 function 中內 return 了另一個 function，通常就是有用到 closure。<br>而在 dogHouse 這個函式中存在 count 這個變數，由於 JavaScript 變數會被縮限在函式的執行環境中，因此這個 count 的值只有在 dogHouse 裡面才能被取用，在 dogHouse 函式外是取用不到這個值的。<br>最後因為我們要能夠執行在 dogHouse 中真正核心 countDogs() 這個函式，因此我們會在最後把這個函式給 return 出來，好讓我們可以在外面去呼叫到 dogHouse 裡面的這個 countDogs() 函式：</p><p><img src="https://i.imgur.com/fMtd0ML.png" alt></p><p>接著，當我們在使用閉包時，我們先把存在 dogHouse 裡面的 countDogs 拿出來用，並一樣命名為 countDogs（這裡變數名稱可以自己取），因此當我執行全域中的 countDogs 時，實際上會執行的是 dogHouse 裡面的 countDogs 函式：</p><p><img src="https://i.imgur.com/IX0Szpt.png" alt></p><h1 id="進一步簡化程式"><a href="#進一步簡化程式" class="headerlink" title="進一步簡化程式"></a>進一步簡化程式</h1><p>如果熟悉在 closure 中會 return 一個 function 出來，可以不欲為裡面的函式命名，可以使用匿名函式的方式直接回傳出來。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dogHouse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 把原本 countDogs 函式改成匿名函式直接放進來</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(count + <span class="string">" dogs"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catHouse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 把原本 countCats 函式改成匿名函式直接放進來</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(count + <span class="string">" cats"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> countDogs = dogHouse();</span><br><span class="line"><span class="keyword">const</span> countCats = catHouse();</span><br><span class="line">countDogs(); <span class="comment">//1dogs</span></span><br><span class="line">countDogs(); <span class="comment">//2dogs</span></span><br><span class="line">countDogs(); <span class="comment">//3dogs</span></span><br></pre></td></tr></table></figure><p>透過函式參數的方式把值帶入 closure 中，所以實際上只需要一個 counter，用不同的參數區分就可以記錄不同動物種類。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCounter</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">console</span>.log(count + name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dogCounter = createCounter(<span class="string">"dog"</span>);</span><br><span class="line"><span class="keyword">const</span> catCounter = createCounter(<span class="string">"cat"</span>);</span><br><span class="line">dogCounter(); <span class="comment">// 1 dog</span></span><br><span class="line">dogCounter(); <span class="comment">// 2 dog</span></span><br><span class="line">catCounter(); <span class="comment">// 1 cat</span></span><br></pre></td></tr></table></figure><h1 id="常見誤區"><a href="#常見誤區" class="headerlink" title="常見誤區"></a>常見誤區</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">"global"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">"local"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> innerFunc = outer();</span><br><span class="line"><span class="keyword">var</span> result = innerFunc();</span><br><span class="line"><span class="built_in">console</span>.log(outer());</span><br></pre></td></tr></table></figure><p>呼叫 outer()之後應該要出現 “local” 才對，但為什麼會出現</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ƒ inner() &#123;</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>因為直接呼叫 outer()的時候，回傳的其實是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在呼叫 outer()後面再加上一個小括號，就會等於立即執行 outer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">"global"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">"local"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> innerFunc = outer();</span><br><span class="line"><span class="keyword">var</span> result = innerFunc();</span><br><span class="line"><span class="built_in">console</span>.log(outer()());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.techbridge.cc/2018/12/08/javascript-closure/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;參考來源一&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://orow.git
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Recursion(遞迴)</title>
    <link href="http://yoursite.com/2019/02/07/2019-02-07/"/>
    <id>http://yoursite.com/2019/02/07/2019-02-07/</id>
    <published>2019-02-06T16:00:00.000Z</published>
    <updated>2020-09-01T09:14:14.938Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - LocalStorage(本機端儲存)</title>
    <link href="http://yoursite.com/2019/02/06/2019-02-06/"/>
    <id>http://yoursite.com/2019/02/06/2019-02-06/</id>
    <published>2019-02-05T16:00:00.000Z</published>
    <updated>2020-09-01T09:14:10.514Z</updated>
    
    <content type="html"><![CDATA[<p>LocalStorage 是一種在瀏覽器資料庫中儲存資料的方式，允許將資料儲存在瀏覽器中。有兩種型態的網頁儲存：本機端儲存 (LocalStorage)、連線期間儲存 (SessionStorage)</p><h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>在 HTML5 之前，cookie 是瀏覽器儲存資訊最主要的方式，是伺服器傳送給使用者瀏覽器的一個小片段資料。常見的應用是判例如： 廣告追蹤、身份驗證、購物車，或任何其他伺服器應該記住的資訊</p><p>但限制如下：</p><ul><li>不能儲存太多資料，有容量的限制 4kb</li><li>每次請求網頁時都需傳送到伺服器端。</li><li>不安全</li><li>可設定失效時間，預設是瀏覽器關閉後失效</li></ul><h1 id="什麼是-LocalStorage"><a href="#什麼是-LocalStorage" class="headerlink" title="什麼是 LocalStorage"></a>什麼是 LocalStorage</h1><p>就本機的儲存功能而言，HTML 新增兩種僅在瀏覽器保存，不參與 serve 溝通的儲存方式。儲存物件 (storage object) 包含兩種不同的資料儲存方式，本機端儲存物件（localStorage) 和連線期間儲存物件 (sessionStorage)。這兩種方式都使用相同的方法和特性。</p><p>差異：</p><ul><li>cookie 關閉視窗會將資料保存</li><li>sessionStorage session 關閉視窗即失效</li><li>localStorage 關閉視窗會將資料保存，直到主動去清空，ChromeDevTools 可做修改</li></ul><p>缺點:</p><ul><li>各瀏覽器容量大小不一，IE8+才支援</li><li>localStorage 儲存值為 string，JSON 需轉換處理</li><li>無法被爬蟲抓取</li><li>內容過多會消號記憶體空間，導致卡頓</li></ul><p>在 chrome 瀏覽器可以透過 devtool 中去查詢 localstorage，下面會介紹幾個操控 localstorage 的方式。</p><p><img src="https://i.imgur.com/4OLy7eB.png" alt></p><h1 id="storage-API-的操作"><a href="#storage-API-的操作" class="headerlink" title="storage API 的操作"></a>storage API 的操作</h1><p>要將一個項目儲存到儲存物件中，使用 <code>setItem()</code>，需要兩個參數 key/值配對</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">"name"</span>, <span class="string">"caibin"</span>);</span><br></pre></td></tr></table></figure><p>要取得儲存物件中的項目，使用 <code>getItem()</code>，需要儲存物件的 key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.getItem(<span class="string">"name"</span>); <span class="comment">//caibin,讀取儲存在localStorage物件里名為name的變數的值</span></span><br></pre></td></tr></table></figure><p>刪除某筆資料</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.removeItem(<span class="string">"name"</span>);</span><br></pre></td></tr></table></figure><p>清除所有儲存物件中的資訊</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.clear();</span><br></pre></td></tr></table></figure><p>實際透過 devtool 觀察</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>請輸入你的姓名<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"textClass"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btnClass"</span> <span class="attr">value</span>=<span class="string">"點擊"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btnCall"</span> <span class="attr">value</span>=<span class="string">"點擊呼叫名字"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">".btnClass"</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="title">saveName</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="built_in">document</span>.querySelector(<span class="string">".textClass"</span>).value;</span><br><span class="line">  localStorage.setItem(<span class="string">"myName"</span>, str);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> call = <span class="built_in">document</span>.querySelector(<span class="string">".btnCall"</span>);</span><br><span class="line"></span><br><span class="line">call.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="title">callName</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = localStorage.getItem(<span class="string">"myName"</span>);</span><br><span class="line">  alert(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/mxJ91wP.png" alt></p><h1 id="資料轉換"><a href="#資料轉換" class="headerlink" title="資料轉換"></a>資料轉換</h1><p>localStorage 儲存格式為字串形式，所以這裡要學習資料型別轉換。</p><ul><li>JSON.stringify(): 轉為 JSON 格式的字串</li><li>JSON.parse(): 轉為 JSON 格式的字串</li></ul><p>會用在要儲存一個陣列裡面有多筆資料的時候，(JSON 格式)。<br>下面例子為將陣列中的學生資料名稱轉為字串後，儲存進去 localstorgae，再把字串轉回原本型態後取出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> students = &#123;</span><br><span class="line">  xiaomin: &#123;</span><br><span class="line">    name: <span class="string">"xiaoming"</span>,</span><br><span class="line">    grade: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  teemo: &#123;</span><br><span class="line">    name: <span class="string">"teemo"</span>,</span><br><span class="line">    grade: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">students = <span class="built_in">JSON</span>.stringify(students); <span class="comment">//將JSON轉為字串存到變數裡</span></span><br><span class="line"><span class="built_in">console</span>.log(students);</span><br><span class="line">localStorage.setItem(<span class="string">"students"</span>, students); <span class="comment">//將變數存到localStorage裡</span></span><br><span class="line"><span class="keyword">var</span> newStudents = localStorage.getItem(<span class="string">"students"</span>);</span><br><span class="line">newStudents = <span class="built_in">JSON</span>.parse(students); <span class="comment">//轉為JSON</span></span><br><span class="line"><span class="built_in">console</span>.log(newStudents); <span class="comment">// 列印出原先物件</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/fYUoC8x.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;LocalStorage 是一種在瀏覽器資料庫中儲存資料的方式，允許將資料儲存在瀏覽器中。有兩種型態的網頁儲存：本機端儲存 (LocalStorage)、連線期間儲存 (SessionStorage)&lt;/p&gt;
&lt;h1 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Event bubbling and capturing (事件冒泡與捕獲)</title>
    <link href="http://yoursite.com/2019/02/04/2019-02-05/"/>
    <id>http://yoursite.com/2019/02/04/2019-02-05/</id>
    <published>2019-02-03T16:00:00.000Z</published>
    <updated>2020-09-01T09:14:05.627Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/" target="_blank" rel="noopener">參考來源一</a><br><a href="https://ithelp.ithome.com.tw/articles/10191970" target="_blank" rel="noopener">參考來源二</a></p><h1 id="事件機制"><a href="#事件機制" class="headerlink" title="事件機制"></a>事件機制</h1><p>JavaScript 是「事件驅動」的程式語言，雖然瀏覽器在載入網頁後就會讀取 JavaScript 相關程式碼，但只有等到「事件」發生 （像是使用者滑鼠點擊、按下鍵盤）才會執行相關程式。</p><p>以網頁對話框為例：按下開啟 （觸發事件）-&gt; 彈出對話框 （執行相關事件）</p><p>這整個對話框從觸發到開啟的過程牽涉到 DOM 的事件流程，就是「網頁元素接收事件的順序」</p><h1 id="事件流程-event-flow"><a href="#事件流程-event-flow" class="headerlink" title="事件流程 (event flow)"></a>事件流程 (event flow)</h1><p>由於 inner 也是 outer 的一部分，所以點擊 inner 的時候，也點到 outer(實際上也點擊整個網頁)。假如我在兩個元素上面都加了 eventListener，知道哪個先執行就很重要。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"outer"</span>&gt;</span><br><span class="line">  &lt;div id=<span class="string">"inner"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h1 id="事件的三個階段"><a href="#事件的三個階段" class="headerlink" title="事件的三個階段"></a>事件的三個階段</h1><p>事件流程可以分成三個階段</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/eventPhase" target="_blank" rel="noopener">event phase 定義</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CAPTURING_PHASE                = 1;</span><br><span class="line">AT_TARGET                      = 2;</span><br><span class="line">BUBBLING_PHASE                 = 3;</span><br></pre></td></tr></table></figure><ul><li>事件冒泡 (event bubbling):<br>事件冒泡是從「啟動事件的元素節點」開始，逐層往上傳遞」直到網頁的根節點，也就是 document。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      click</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在事件冒泡的觸發順序會是：</p><ol><li><div>click</div></li><li>body</li><li>html</li><li>document</li></ol><ul><li>事件捕獲 (event capturing)<br>事件捕獲的機制正好相反，觸發是順序會從根節點開始<br>在事件冒泡的觸發順序會是：</li></ul><ol><li>document</li><li>html</li><li>body</li><li><div>click</div></li></ol><ul><li>AT_TARGET</li></ul><p>DOM 事件會從根節點往下傳遞到 target，target 就是點擊的目標，如果在 target 上加上事件監聽，他就會處在 AT_TARGET 這一個 Phase。</p><h1 id="先捕獲再冒泡"><a href="#先捕獲再冒泡" class="headerlink" title="先捕獲再冒泡"></a>先捕獲再冒泡</h1><p>事件究竟依賴哪種機制執行？兩種都會。在點擊 td 的時候，會從 window 開始往下傳，一直傳到 td 為止，到這邊就叫做 CAPTURING_PHASE，捕獲階段。接著事件傳遞到 td 本身，這時候叫做 AT_TARGET。最後事件會從 td 一路傳回去 window，這時候叫做 BUBBLING_PHASE，冒泡階段</p><p><img src="https://i.imgur.com/bJz5SVd.png" alt></p><p>如何決定要在捕獲還是冒泡階段監聽這個事件？ 這裡可利用 <code>addEventListener</code> 的第三個參數，true 代表把這個 listener 添加到捕獲階段，false 或是沒有傳就代表把這個 listener 添加到冒泡階段。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.addEventListener(type, listener, useCapture);</span><br></pre></td></tr></table></figure><p>以實際例子看：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    父元素</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>幫每一個元素的每一個階段都添加事件，並且利用事件物件(event object) 提供的資訊了解事件傳遞機制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.querySelector(<span class="string">"#parent"</span>);</span><br><span class="line"><span class="keyword">var</span> child = <span class="built_in">document</span>.querySelector(<span class="string">"#child"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//透過地三個參數 true/false 分別設定捕獲及冒泡機制</span></span><br><span class="line"></span><br><span class="line">parent.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"parent capturing"</span>, e.eventPhase);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line">parent.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"parent bubbling"</span>, e.eventPhase);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line">child.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"child capturing"</span>, e.eventPhase);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line">child.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"child bubbling"</span>, e.eventPhase);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>當我點擊子元素的時候，事件觸發在 console 輸出的結果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parent capturing <span class="number">1</span></span><br><span class="line">child capturing <span class="number">2</span></span><br><span class="line">child bubbling <span class="number">2</span></span><br><span class="line">parent bubbling <span class="number">3</span></span><br></pre></td></tr></table></figure><p>點擊父元素的時候，則出現</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parent capturing <span class="number">2</span></span><br><span class="line">parent bubbling <span class="number">2</span></span><br></pre></td></tr></table></figure><p>1 是 CAPTURING_PHASE，2 是 AT_TARGET，3 是 BUBBLING_PHASE。</p><p>很明顯看出，事件的確是從最上層一直傳遞到 target。當事件傳遞到點擊的真正對象，也就是 e.target 的時候，無論你使用 addEventListener 的第三個參數是 true 還是 false，這邊的 e.eventPhase 都會變成 AT_TARGET。</p><p>所以即便調換子層的 capturing 或 bubbling 順序，也沒有什麼捕獲跟冒泡之分，所以執行順序就會根據你 addEventListener 的順序而定，先添加的先執行，後添加的後執行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">child.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"child bubbling"</span>, e.eventPhase);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">child.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"child capturing"</span>, e.eventPhase);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parent capturing <span class="number">1</span></span><br><span class="line">child bubbling <span class="number">2</span></span><br><span class="line">child capturing <span class="number">2</span></span><br><span class="line">parent bubbling <span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>事件的傳遞順序，只要記住兩個原則就好：- 先捕獲，再冒泡- 當事件傳到 target 本身，沒有分捕獲跟冒泡</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;參考來源一&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Event-addEventListener (事件監聽)</title>
    <link href="http://yoursite.com/2019/02/04/2019-02-04/"/>
    <id>http://yoursite.com/2019/02/04/2019-02-04/</id>
    <published>2019-02-03T16:00:00.000Z</published>
    <updated>2020-09-10T08:08:28.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件-Event"><a href="#事件-Event" class="headerlink" title="事件 Event"></a>事件 Event</h1><p>Event 事件就是在瀏覽頁面的時候，根據使用者不同的行為，而觸發瀏覽器不同的動作。（例如使用者點擊、按下鍵盤等）</p><p><a href="https://www.w3schools.com/js/js_events_examples.asp" target="_blank" rel="noopener">w3school - event sample</a></p><h1 id="常見事件類型"><a href="#常見事件類型" class="headerlink" title="常見事件類型"></a>常見事件類型</h1><ul><li>click 點擊事件</li><li>mousedown 按下滑鼠</li><li>mouseup 放開滑鼠鍵</li><li>mouseenter 游標移入</li><li>mouseleave 游標移出</li></ul><h1 id="事件監聽-（addEventListener"><a href="#事件監聽-（addEventListener" class="headerlink" title="事件監聽 （addEventListener)"></a>事件監聽 （addEventListener)</h1><p>JavaScript 是一種由「事件驅動」(Event-driven)的程式語言，在瀏覽器載入頁面的時候，要等到事件被觸發（例如使用者點擊、按下鍵盤等），才會進行相關程式的執行。</p><p>事件監聽的功能就是監聽事件有沒有被觸發。</p><p>以下是利用事件監聽器把一個事件綁定到元件上，並且指定事件啟動時需執行的函式，監聽元素 class=’btn’有沒有被點擊到的監聽案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">".btn"</span>);</span><br><span class="line">el.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 要綁定到節點的事件，呼叫的函式,指定的事件流程（冒泡或捕捉），一般設定為冒泡</span></span><br><span class="line">    alert(<span class="string">"hi"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="事件綁定的差異"><a href="#事件綁定的差異" class="headerlink" title="事件綁定的差異"></a>事件綁定的差異</h2><p>以點擊的案例來舉例，</p><ul><li>傳統的 DOM 事件處理器</li></ul><p>點擊可以透過 onclick = function(){…}達成，但是一個事件處理器只能一次綁定一個事件，在綁定多個事件的時候，只會執行最後一個事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btnOn"</span> <span class="attr">value</span>=<span class="string">"on點擊"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btnAdd"</span> <span class="attr">value</span>=<span class="string">"add點擊"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elOn = <span class="built_in">document</span>.querySelector(<span class="string">".btnOn"</span>);</span><br><span class="line">elOn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"onclick-1"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">elOn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"onclick-2"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>事件監聽器</li></ul><p>可一次呼叫多個函式，但是舊版本的瀏覽器不支援</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btnAdd"</span> <span class="attr">value</span>=<span class="string">"add點擊"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elAdd = <span class="built_in">document</span>.querySelector(<span class="string">".btnAdd"</span>);</span><br><span class="line">elAdd.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"add-1"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line">elAdd.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"add-2"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="Event-物件"><a href="#Event-物件" class="headerlink" title="Event 物件"></a>Event 物件</h1><p>當事件發生時，event 物件可提供事件的相關資訊，和觸發事件的目標元件，包含一些和事件相關的有用資訊。<br>例如：</p><ul><li>在 keypress 事件按下的按鍵是哪一個</li><li>事件的目標元件</li></ul><p>event 物件會被傳遞到事件處理器中，當 event 物件被傳遞給函式的時候，通常使用的參數名稱是 e。在一個計算機的案例中，在 html 頁面建立一個有數字與運算符號的計算機，並且綁定多個元素，用 click 事件來執行 function，在小括號中帶入一個參數，之後觸發事件後就印出當下元素各種資訊。這個帶入參數的方式，在很多事件行為操作都需要利用到這個參數。</p><p>我們要判斷按下的是數字還是運算符號，利用 if 判斷是否具備運算符屬性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"calculator__keys"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"key--operator"</span> <span class="attr">data-action</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line">    +</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"key--operator"</span> <span class="attr">data-action</span>=<span class="string">"subtract"</span>&gt;</span></span><br><span class="line">    -</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"key--operator"</span> <span class="attr">data-action</span>=<span class="string">"multiply"</span>&gt;</span></span><br><span class="line">    &amp;times;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"key--operator"</span> <span class="attr">data-action</span>=<span class="string">"divide"</span>&gt;</span></span><br><span class="line">    ÷</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>7<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>8<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = <span class="built_in">document</span>.querySelector(<span class="string">'.calculator__keys'</span>);</span><br><span class="line">keys.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e.target.matches(<span class="string">'button'</span>))&#123;</span><br><span class="line">   <span class="keyword">const</span> key = e.target;</span><br><span class="line"><span class="keyword">if</span>(!action)&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果如下圖：<br><img src="https://i.imgur.com/yNA0LDg.png" alt></p><h1 id="變更預設行為-preventDefault"><a href="#變更預設行為-preventDefault" class="headerlink" title="變更預設行為 preventDefault()"></a>變更預設行為 preventDefault()</h1><p>preventDefault() 方法阻止元素的預設行為，例如點擊連結會前往另一個頁面。或者 form 表單裡面 submit 的按鈕，不想要點擊後馬上送出資料到後端，想要先進行基礎驗證的時候就可以使用這個方式。<br>以 <code>&lt;a href=&quot;http://w3school.com.cn/&quot;&gt;W3School&lt;/a&gt;</code> 為例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://w3school.com.cn/"</span>&gt;</span>W3School<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">"a"</span>);</span><br><span class="line">el.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="comment">// 取消默認的行爲</span></span><br><span class="line">  <span class="comment">// 取消點擊a連結後跳轉到指定頁面</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="target-指向最初觸發事件的-DOM-物件"><a href="#target-指向最初觸發事件的-DOM-物件" class="headerlink" title="target - 指向最初觸發事件的 DOM 物件"></a>target - 指向最初觸發事件的 DOM 物件</h1><p>event.target 屬性則是永遠指向觸發事件的 DOM 物件</p><p>語法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theTarget = event.target</span><br></pre></td></tr></table></figure><p>想要知道滑鼠現在是點擊到哪一個位置的時候，就會用.target 的方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"padding-top: 100px; border: 1px solid #333;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">".header"</span>);</span><br><span class="line">el.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target);</span><br><span class="line">    <span class="comment">// target中還有各種語法,如nodeName是大寫的節點名稱</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在網頁上點擊過後，console.log 就會印出是 ul，li 或是 a。<br><img src="https://i.imgur.com/H7EM9PF.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件-Event&quot;&gt;&lt;a href=&quot;#事件-Event&quot; class=&quot;headerlink&quot; title=&quot;事件 Event&quot;&gt;&lt;/a&gt;事件 Event&lt;/h1&gt;&lt;p&gt;Event 事件就是在瀏覽頁面的時候，根據使用者不同的行為，而觸發瀏覽器不同的動作。（例如使
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - DOM</title>
    <link href="http://yoursite.com/2019/02/03/2019-02-03/"/>
    <id>http://yoursite.com/2019/02/03/2019-02-03/</id>
    <published>2019-02-02T16:00:00.000Z</published>
    <updated>2020-09-10T07:22:29.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>DOM (document object modal) 是一種應用程式介面 (API)，能以樹狀結構描述頁面元素在瀏覽器的組成結構。DOM 定義特性和方法，供程式存取和變更模型中的每個物件。DOM 讓文檔可以採取為由節點和物件 (包含屬性和方法的物件)的組成結構。簡言之，DOM 連接了網頁、腳本及程式語言。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">參考來源一</a></p><p>下面範例，HTML 裡面每個元素、屬性都代表著其中一個節點</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>my title<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/CiFZJI5.gif" alt></p><h1 id="DOM-操作基本語法"><a href="#DOM-操作基本語法" class="headerlink" title="DOM 操作基本語法"></a>DOM 操作基本語法</h1><h2 id="選取元素"><a href="#選取元素" class="headerlink" title="選取元素"></a>選取元素</h2><p>getElementById():<br>利用元件的 id 屬性值，由於元素的 ID 在頁面中具有唯一性，因此是一個高效查找特定元素的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="built_in">document</span>.getElementById(<span class="string">"first"</span>);</span><br></pre></td></tr></table></figure><p>querySelector():</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"titleId"</span> <span class="attr">class</span>=<span class="string">"special"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 CSS 選擇器尋找第一個符合條件的元件，id 用#，class 用.。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="built_in">document</span>.querySelector(<span class="string">"#titleId"</span>);</span><br><span class="line"><span class="keyword">var</span> first = <span class="built_in">document</span>.querySelector(<span class="string">".special"</span>);</span><br></pre></td></tr></table></figure><p>querySelector 也可以用來選擇下一層的元素，下面例子就會選取到 em 這個元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"titleId"</span> <span class="attr">class</span>=<span class="string">"titleClass"</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>123<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">".titleClass em"</span>);</span><br></pre></td></tr></table></figure><ul><li>選取多個標籤</li></ul><p>getElementsByClassName():<br>選取具有指定 Class 屬性值的所有元件。<br>選取具有指定標籤名稱的所有元件。會取得一個類似陣列（array-like) 的<br>node-list (節點列表)，可運用 index 及 length 查找，但不能運用其他陣列方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"titleClass"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"titleClass"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"titleClass"</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>document.getElementsByTagName():<br>選取具有指定標籤名稱的所有元件。會取得一個類似陣列（array-like) 的<br>node-list (節點列表)，可運用 index 及 length 查找，但不能運用其他陣列方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</span><br><span class="line"><span class="comment">//在ES6前</span></span><br><span class="line">first.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item); <span class="comment">//Uncaught TypeError: items.forEach is not a function</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">const</span> betterItems = [...first];</span><br><span class="line">betterItems.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>document.querySelectorAll():<br>利用選擇器選擇所有符合條件的元件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="built_in">document</span>.querySelectorAll(<span class="string">"p"</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h2 id="遍歷-DOM"><a href="#遍歷-DOM" class="headerlink" title="遍歷 DOM"></a>遍歷 DOM</h2><ul><li>獲取子元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>orange<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>pear<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tomato<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//childNode 會把空白字元當做一個文字節點一同回傳</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">document</span>.querySelector(<span class="string">"#result"</span>);</span><br><span class="line"><span class="keyword">var</span> allChildren = result.childNodes;</span><br><span class="line"><span class="built_in">console</span>.log(allChildren);</span><br><span class="line"></span><br><span class="line">![](https:<span class="comment">//i.imgur.com/H0UYxUZ.png)</span></span><br><span class="line"><span class="comment">// children 會回傳父節點的子元素集合</span></span><br><span class="line"><span class="keyword">var</span> children = result.children;</span><br><span class="line">![](https:<span class="comment">//i.imgur.com/sVXAFe7.png)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//firstChild,lastChild</span></span><br><span class="line"><span class="built_in">console</span>.log(result.firstChild);</span><br><span class="line"><span class="built_in">console</span>.log(result.lastChild);</span><br><span class="line"></span><br><span class="line">也會把空白字元當做文字節點一同回傳</span><br><span class="line">![](https:<span class="comment">//i.imgur.com/mTVgNlh.png)</span></span><br></pre></td></tr></table></figure><ul><li>獲取父元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"second"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>second heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> heading = <span class="built_in">document</span>.querySelector(<span class="string">"h2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(heading.parentElement);</span><br><span class="line">![](https:<span class="comment">//i.imgur.com/BI9EXQK.png)</span></span><br></pre></td></tr></table></figure><ul><li>nextSibling、previousSibling)</li></ul><p>回傳當前節點的前一個或後一個兄弟節點，若中間有空白字元，則可能回傳的是空白字元，沒有則回傳 null。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>listitem 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>listitem 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"last"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="built_in">document</span>.querySelector(<span class="string">".first"</span>);</span><br><span class="line"><span class="keyword">var</span> second = first.nextSibling.nextSibling;</span><br><span class="line"><span class="built_in">console</span>.log(second);</span><br><span class="line">![](https:<span class="comment">//i.imgur.com/A7AxrgC.png)</span></span><br><span class="line"><span class="keyword">var</span> last = <span class="built_in">document</span>.querySelector(<span class="string">".last"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(last.nextSibling.nextSibling);</span><br><span class="line">![](https:<span class="comment">//i.imgur.com/ZYUmq6c.png)</span></span><br></pre></td></tr></table></figure><ul><li>nextElementSibling、previousElementSibling<br>跳過空白字元，立即回傳下一個或上一個兄弟節點</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> last = <span class="built_in">document</span>.querySelector(<span class="string">".last"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(last.previousElementSibling);</span><br></pre></td></tr></table></figure><ul><li>nodeValue、textContent<br>nodeValue 回傳當前節點的值。會把空白字元當做一個文字節點一同回傳。</li></ul><h2 id="設定-取得屬性值"><a href="#設定-取得屬性值" class="headerlink" title="設定/取得屬性值"></a>設定/取得屬性值</h2><p>要獲取屬性當下的值可使用 getAttribute();移除某個屬性 removeAttribute()。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"first"</span> <span class="attr">id</span>=<span class="string">"special"</span>&gt;</span>I have class of first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"first.html"</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span>random link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>I have no attributes<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> first = <span class="built_in">document</span>.querySelector(<span class="string">".first"</span>);</span><br><span class="line"><span class="keyword">const</span> classValue = first.getAttribute(<span class="string">"id"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(classValue); <span class="comment">// special</span></span><br><span class="line"><span class="keyword">const</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</span><br><span class="line"><span class="keyword">const</span> showLink = link.getAttribute(<span class="string">"href"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(showLink); <span class="comment">//first.html</span></span><br></pre></td></tr></table></figure><p>setAttribute(name, value) 設定指定元素的屬性值，如果屬性值已存在就更新該值，否則使用指定名稱和值添加一個新的屬性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> last = link.nextElementSibling;</span><br><span class="line">last.setAttribute(<span class="string">"class"</span>, <span class="string">"first"</span>);</span><br><span class="line">last.textContent = <span class="string">"I have class a first"</span>;</span><br></pre></td></tr></table></figure><h2 id="插入元素至指定位置"><a href="#插入元素至指定位置" class="headerlink" title="插入元素至指定位置"></a>插入元素至指定位置</h2><ul><li>insertBefore</li></ul><p>// 語法 insertBefore(‘element’,’location’)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"colors"</span>&gt;</span>i am the child of result<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.colors</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="built_in">document</span>.querySelector(<span class="string">"#result"</span>);</span><br><span class="line"><span class="keyword">const</span> first = <span class="built_in">document</span>.querySelector(<span class="string">".colors"</span>);</span><br><span class="line"><span class="keyword">const</span> bodyDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">const</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">"a simple body div"</span>);</span><br><span class="line">bodyDiv.appendChild(text);</span><br><span class="line"><span class="built_in">document</span>.body.insertBefore(bodyDiv, result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heading = <span class="built_in">document</span>.createElement(<span class="string">"h2"</span>);</span><br><span class="line"><span class="keyword">const</span> headingText = <span class="built_in">document</span>.createTextNode(<span class="string">"dynamic heading"</span>);</span><br><span class="line">heading.appendChild(headingText);</span><br><span class="line">heading.classList.add(<span class="string">"blue"</span>);</span><br><span class="line">result.insertBefore(heading, first);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/OawJe8Y.png" alt></p><ul><li>替代子元素<br>用指定的節點替換當前某一個子節點</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 語法   replaceChild(新的節點,要被替換的舊節點);</span></span><br><span class="line"><span class="keyword">const</span> smallHeading = <span class="built_in">document</span>.createElement(<span class="string">"h6"</span>);</span><br><span class="line"><span class="keyword">const</span> smallText = <span class="built_in">document</span>.createTextNode(<span class="string">"Iam small heading"</span>);</span><br><span class="line">smallHeading.classList.add(<span class="string">"colors"</span>);</span><br><span class="line">smallHeading.appendChild(smallText);</span><br><span class="line"><span class="built_in">document</span>.body.replaceChild(smallHeading, bodyDiv);</span><br></pre></td></tr></table></figure><h2 id="replaceChild、replace"><a href="#replaceChild、replace" class="headerlink" title="replaceChild、replace"></a>replaceChild、replace</h2><p>兩種移除子元素的方式。</p><p>選定父層，直接移除所有子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="built_in">document</span>.querySelector(<span class="string">"#result"</span>);</span><br><span class="line">result.remove();</span><br></pre></td></tr></table></figure><p>選定父層與指定子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="built_in">document</span>.querySelector(<span class="string">"#result"</span>);</span><br><span class="line"><span class="keyword">const</span> heading = result.querySelector(<span class="string">"h1"</span>);</span><br><span class="line">result.removeChild(heading);</span><br></pre></td></tr></table></figure><h2 id="新增-移除類別屬性"><a href="#新增-移除類別屬性" class="headerlink" title="新增/移除類別屬性"></a>新增/移除類別屬性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"first"</span> <span class="attr">class</span>=<span class="string">"colors"</span>&gt;</span>first element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"second"</span>&gt;</span>second element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"third"</span>&gt;</span>third element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>className<br>後面新增的類別屬性會覆蓋前一個新增的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> second = <span class="built_in">document</span>.getElementById(<span class="string">"second"</span>);</span><br><span class="line">second.className = <span class="string">"colors"</span>;</span><br><span class="line">second.className = <span class="string">"text"</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/UcW0LC4.png" alt><br>解決辦法是寫在一起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">second.className = <span class="string">"colors text"</span>;</span><br></pre></td></tr></table></figure><ul><li>classList</li></ul><p>或使用 classList 新增類別屬性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">second.classList.add(<span class="string">"colors"</span>);</span><br><span class="line">second.classList.add(<span class="string">"text"</span>);</span><br><span class="line"><span class="comment">//用逗點隔開的新增法</span></span><br><span class="line">second.classList.add(<span class="string">"text"</span>, <span class="string">"colors"</span>);</span><br></pre></td></tr></table></figure><p>使用 classList 移除類別屬性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">second.classList.remove(<span class="string">"text"</span>);</span><br></pre></td></tr></table></figure><p>使用 <code>contains()</code>方法檢查類別屬性是否存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = third.classList.contains(<span class="string">"color"</span>);</span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"yes color"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"does not have the class"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="innerHTML、textContent"><a href="#innerHTML、textContent" class="headerlink" title="innerHTML、textContent"></a>innerHTML、textContent</h2><p>innerHTML 的方式會讓瀏覽器將字串解析為 HTML 的屬性，帶有 HTML 屬性作用，如果用 <code>&lt;script&gt;</code> 寫一段攻擊是會有作用的。</p><p>textContent 是解析為純文字，比較安全。</p><p>點擊第一個連結會執行跳出視窗動作，而點擊第二個連結不會執行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="built_in">document</span>.querySelector(<span class="string">"#test"</span>);</span><br><span class="line"><span class="keyword">let</span> linkText = <span class="string">"Link to page"</span>;</span><br><span class="line"><span class="keyword">let</span> maliciousCode = <span class="string">'javascript:alert(\'test\');" style="color:red;"'</span>;</span><br><span class="line"></span><br><span class="line">test.innerHTML = <span class="string">' &lt;a href=" '</span> + maliciousCode + <span class="string">' "&gt; '</span> + linkText + <span class="string">"&lt;/a&gt;&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> linkTag = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">linkTag.textContent = linkText;</span><br><span class="line">linkTag.href = maliciousCode;</span><br><span class="line">test.appendChild(linkTag);</span><br></pre></td></tr></table></figure><h2 id="新增元素"><a href="#新增元素" class="headerlink" title="新增元素"></a>新增元素</h2><p>createElement（）從字面看就是增加元素，但是只有單純新增元素，如果需要修改內容或是設定屬性還需要用到上面提到的其他設定值，像是 textContent、setAttribute。<br>例如創見一個新的 <div> 插入到 ID“div1”的元素前。</div></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>||Working with elements||<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>The text above has been created dynamically.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//創一個新的 div 元素</span></span><br><span class="line"><span class="keyword">let</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"><span class="comment">//新增一些文字節點</span></span><br><span class="line"><span class="keyword">let</span> newContent = <span class="built_in">document</span>.createTextNode(<span class="string">"Hi there and greetin</span></span><br><span class="line"><span class="string">//把文字節點新增到div元素內</span></span><br><span class="line"><span class="string">newDiv.appendChild(newContent);</span></span><br><span class="line"><span class="string">// 新的元素和它的文本添加到 DOM 中</span></span><br><span class="line"><span class="string">let currentDiv = document.getElementById("</span>div1<span class="string">");</span></span><br><span class="line"><span class="string">document.body.insertBefore(newDiv, currentDiv);</span></span><br></pre></td></tr></table></figure><p>比較用 Javascript 操控 HTML 的兩個方法</p><p>innerHTML:</p><ul><li>方法：直接插入 DOM 結構中</li><li>優點：效能快</li><li>缺點：資安風險,<br>createElement:</li><li>方法：以 DOM 節點來處理</li><li>優點：安全性高</li><li></li></ul><p>缺點：效能差</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h1&gt;&lt;p&gt;DOM (document object modal) 是一種應用程式介面 (API)，能以樹狀結構描述頁面元素在瀏覽器的組成結構。
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Control and loop (控制判斷與迴圈)</title>
    <link href="http://yoursite.com/2019/02/02/2019-02-02/"/>
    <id>http://yoursite.com/2019/02/02/2019-02-02/</id>
    <published>2019-02-01T16:00:00.000Z</published>
    <updated>2020-09-01T09:13:44.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>程式碼裡有時需要條件判斷，決定流程的下一步要執行哪些步驟。這時需要使用「條件判斷」的語法，決定使用哪一條流程。當指定的條件為 true ，就會執行該條件指定的流程，如果為 false 則使用另一個流程。JavaScript 的條件判斷語法有 2 種：if…else 和 switch 兩種</p><h2 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h2><p>if 條件判斷句在條件為 true 的狀況下只會執行一組敘述句；if…else 條件判斷句在條件為 true 的情況下會運行一組敘述，在 條件為 false 的狀況下，運行另外一組敘述。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (指定條件) &#123;</span><br><span class="line">  陳述式 <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  陳述式 <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有更多個條件，可再搭配使用 else if</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (指定條件<span class="number">1</span>) &#123;</span><br><span class="line">  陳述式 <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (指定條件 <span class="number">2</span>) &#123;</span><br><span class="line">  陳述式 <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (指定條件 n) &#123;</span><br><span class="line">  陳述式 n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  最後陳述式;</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>JavaScript 遇到 switch 語句會先執行指定的 expression 語句，然後用執行 expression 得到的值，去跟所有 case 的值做比較，如果相等就執行這個 case 區塊的程式碼，都不相等則執行 default 區塊的程式碼。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line"> <span class="keyword">case</span> value_1:</span><br><span class="line">    statements_1</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> value_2:</span><br><span class="line">    statements_2</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    statements_def</span><br><span class="line">    [<span class="keyword">break</span>;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>舉例來說如果 fruitType 變數的值是 Apples，則會執行 case ‘Apples’ 區塊的程式碼；如果 fruitType 變數的值是 Mangoes，則會執行 case ‘Mangoes’ 區塊的程式碼；如果 fruitType 的值都不在指定的 case 裡面，則執行 default 區塊的程式碼。也可以省略 default 區塊，表示如果找不到相符的 case，則跳過整個 switch 區塊什麼不執行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (fruitType) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"Oranges"</span>:</span><br><span class="line">    alert(<span class="string">"Oranges"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"Apples"</span>:</span><br><span class="line">    alert(<span class="string">"Apples"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"Bananas"</span>:</span><br><span class="line">    alert(<span class="string">"Bananas"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"Cherries"</span>:</span><br><span class="line">    alert(<span class="string">"Cherries"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"Mangoes"</span>:</span><br><span class="line">    alert(<span class="string">"Mangoes"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"Papayas"</span>:</span><br><span class="line">    alert(<span class="string">"Papayas"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    alert(<span class="string">"沒有符合的條件"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>break 關鍵字<br>當 JavaScript 執行到 break 這個關鍵字的時後，就會直接跳出整個 switch 區塊，繼續往下執行。</li><li>if…else 與 switch 的效能比較<br>switch 的效能比 if…else 好，因為 if…else 即使已經找到符合的條件，還是會繼續檢視全部的條件。switch 如果有符合的條件，就會執行對應的程式碼</li></ul><h2 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h2><p>迴圈 (loop) 提供一個快速又簡潔的方法來重複地做某件事。三種常用的迴圈有：</p><ul><li>for</li><li>while</li><li>do…while</li></ul><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>建立一個變數並設定初始值 <code>var i=0</code> ，設定條件 <code>i&lt;10</code> 意思是迴圈執行到第 9 次就會結束。<code>i++</code> 就是迴圈每執行一次，就會在計數器上增加一次計數意思就是 i = i + 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>while 陳述式會不斷執行它的陳述式只要指定的條件式判斷為 true。以下的 while 迴圈在只要 n 比 3 少的情況下便會不斷重複</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">  n++;</span><br><span class="line">  x += n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迴圈把 n 遞增並將其值加到 x 上。因此，x 跟 n 的值會是下列情況：</p><p>經過第一次迴圈後 n = 1 而 x = 1<br>經過第二次迴圈後 n = 2 而 x = 3<br>經過第三次迴圈後 n = 3 而 x = 6<br>在完成第三次迴圈後，判斷是 n&lt;3 不再是 true ，所以迴圈終止</p><ul><li>兩者相較</li></ul><p>while 是控制條件的變數在迴圈開始前即存在，迴圈開始後只會定義條件，不會去初始化參數，大多數用在迴圈執行次數『不確定』的時候。<br>for 則在迴圈一開始就定義變數，大多數用在迴圈次數『明確』的狀態。</p><h3 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h3><p>while 和 do…while 的主要差別在於後者的程式區塊會寫在條件之前，這表示無論條件是否符合，程式區塊中的敘述都至少會執行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  n++;</span><br><span class="line">  x += n;</span><br><span class="line">&#125; <span class="keyword">while</span> (n &lt; <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="迴圈操作"><a href="#迴圈操作" class="headerlink" title="迴圈操作"></a>迴圈操作</h3><p>break 和 continue 是迴圈中兩個特別的指令</p><ul><li>break 會中止跳離迴圈</li></ul><p>例子：如果找到所要的東西，就停止迴圈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = foo();</span><br><span class="line">  <span class="keyword">if</span> (result == <span class="string">"find it"</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"找到了，結束迴圈"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>continue 會讓迴圈跳過這一次的行為繼續執行下一次的迴圈。</li></ul><p>例子：假設想要印出 1 ~ 10 的數字 ，但是不包括 3 的倍數。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// i 能被 3 整除表示 i 是 3 的倍數，遇到 continue 就會跳過這次</span></span><br><span class="line">  <span class="keyword">if</span>( i % <span class="number">3</span> === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><h3 id="迴圈應用-99-乘法表"><a href="#迴圈應用-99-乘法表" class="headerlink" title="迴圈應用 - 99 乘法表"></a>迴圈應用 - 99 乘法表</h3><ul><li>for 迴圈</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i + <span class="string">"x"</span> + j + <span class="string">" = "</span> + i * j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>while</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (j &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i + <span class="string">" x "</span> + j + <span class="string">" = "</span> + i * j);</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>do…while</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i + <span class="string">" x "</span> + j + <span class="string">" = "</span> + i * j);</span><br><span class="line">    j++;</span><br><span class="line">  &#125; <span class="keyword">while</span> (j &lt; <span class="number">10</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="迴圈應用-找出最大值"><a href="#迴圈應用-找出最大值" class="headerlink" title="迴圈應用 找出最大值"></a>迴圈應用 找出最大值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> biggest = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] &gt; biggest) &#123;</span><br><span class="line">      biggest = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(biggest);</span><br><span class="line">&#125;</span><br><span class="line">max();</span><br></pre></td></tr></table></figure><h3 id="迴圈應用-加總"><a href="#迴圈應用-加總" class="headerlink" title="迴圈應用 加總"></a>迴圈應用 加總</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumArr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    sum += nums[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125;</span><br><span class="line">sumArr();</span><br></pre></td></tr></table></figure><h3 id="迴圈應用-判斷相等"><a href="#迴圈應用-判斷相等" class="headerlink" title="迴圈應用 判斷相等"></a>迴圈應用 判斷相等</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">equal</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] !== arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">equal(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br></pre></td></tr></table></figure><h3 id="迴圈應用-字串倒轉"><a href="#迴圈應用-字串倒轉" class="headerlink" title="迴圈應用 字串倒轉"></a>迴圈應用 字串倒轉</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> emptyArr = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseArr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    emptyArr.push(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(emptyArr);</span><br><span class="line">&#125;</span><br><span class="line">reverseArr();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流程控制&quot;&gt;&lt;a href=&quot;#流程控制&quot; class=&quot;headerlink&quot; title=&quot;流程控制&quot;&gt;&lt;/a&gt;流程控制&lt;/h1&gt;&lt;p&gt;程式碼裡有時需要條件判斷，決定流程的下一步要執行哪些步驟。這時需要使用「條件判斷」的語法，決定使用哪一條流程。當指定的條件為
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Basic</title>
    <link href="http://yoursite.com/2019/02/01/2019-02-01/"/>
    <id>http://yoursite.com/2019/02/01/2019-02-01/</id>
    <published>2019-01-31T16:00:00.000Z</published>
    <updated>2020-09-05T04:47:24.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基礎概念"><a href="#基礎概念" class="headerlink" title="基礎概念"></a>基礎概念</h1><p>JavaScript 是一門基於原型、函式先行的程式語言，支援物件導向。簡言之，是一種可在網站裡加入動態效果的程式語言，例如更改樣式、展示動畫等</p><h2 id="概論"><a href="#概論" class="headerlink" title="概論"></a>概論</h2><p>一般來說，完整的 JavaScript 包括以下幾個部分：</p><ul><li>ECMAScript，描述了該語言的語法和基本物件</li><li>文件物件模型（DOM），描述處理網頁內容的方法和介面</li><li>瀏覽器物件模型（BOM），描述與瀏覽器進行互動的方法和介面</li></ul><p>JavaScript 的基本特點如下：</p><ul><li>是一種解釋性程式語言（代碼不進行預編譯）。</li><li>主要用來向 HTML 頁面添加互動行為。</li><li>可以直接嵌入 HTML 頁面，但寫成單獨的 js 檔案有利於結構和行為的分離。</li></ul><p>JavaScript 常用來完成以下任務：</p><ul><li>嵌入動態文字於 HTML 頁面</li><li>對瀏覽器事件作出回應</li><li>讀寫 HTML 元素</li><li>在資料被提交到伺服器之前驗證資料</li><li>檢測訪客的瀏覽器資訊</li><li>控制 cookies，包括建立和修改等</li></ul><h2 id="動態型別"><a href="#動態型別" class="headerlink" title="動態型別"></a>動態型別</h2><p>JavaScript 是一種「弱型別」的程式語言，在變數的資料型別與其他的程式語言相當不同，它是以「動態型別」（Dynamic Typing) 處理資料型別。</p><p>程式語言會依照語言的型別系統分成「強型別語言」和「弱型別語言」。強型別是指「程式定義的變數型別等於變數在執行的時候的型別」，這類語言的變數在宣告的時候，必須指定一種資料型別給它。弱型別正好相反，因此具有語法簡潔的優點。JavaScript 的變數在宣告時無需指定型別。</p><p>JavaScript 程式在運作時，型別會自動轉換。這也代表你可以以不同的型別使用同一個變數。因為型別的資訊只在「值」或「物件」本身，變數只是用來取得值或物件的參考。</p><h2 id="資料型別"><a href="#資料型別" class="headerlink" title="資料型別"></a>資料型別</h2><h4 id="基本型別-Primitive"><a href="#基本型別-Primitive" class="headerlink" title="基本型別 (Primitive)"></a>基本型別 (Primitive)</h4><ul><li>string 字串</li><li>number 數字</li><li>boolean 布林值 (true/false)</li><li>null 只有一個 null 值</li><li>undefined 只有一個 undefined 值</li></ul><h4 id="物件型別-Object"><a href="#物件型別-Object" class="headerlink" title="物件型別 (Object)"></a>物件型別 (Object)</h4><ul><li>object:所有基本型別以外的值都是物件。在真實世界中，以一台汽車為例，我們可以用時速、顏色、油耗描述一台車子的屬性，這些屬性各自具備不同的值。同樣的，在 JavaScript 當中，每個物件也是可以用都是一特性 (properties)、事件 (event)、方法（method) 來描述的實體 (instance)的特性。一個物件的特性是鍵 (key) 與值 (value) 的配對。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object=            &#123;key:value&#125;</span><br></pre></td></tr></table></figure><p>以下是一個物件的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123;</span><br><span class="line">  brand: ford,</span><br><span class="line">  color: red,</span><br><span class="line">  secondHand: <span class="literal">true</span>,</span><br><span class="line">  bwh: &#123;</span><br><span class="line">    strength: <span class="number">34</span>,</span><br><span class="line">    fuel: desel,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>brand，color 是 key; ford，red 是 value。物件的屬性是可以新增與刪除的。但是原始型別沒有屬性。是一個值，沒有屬性，且是不可變異(immutable)。必要時，JavaScript 引擎會將原始別強制轉型為對應的物件型別（除了 null &amp; undefined）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">42</span>; <span class="comment">// foo 目前是數字</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">"bar"</span>; <span class="comment">// foo 目前是字串</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>; <span class="comment">// foo 目前是布林值</span></span><br></pre></td></tr></table></figure><h1 id="Truthy-and-Falsy"><a href="#Truthy-and-Falsy" class="headerlink" title="Truthy and Falsy"></a>Truthy and Falsy</h1><p>在 JavaScript 裡面，所有的值都有真(truthy)和假(falsy)之分。可用來檢視頁面上的元件是否存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//falsy "", '',``,0,-0,NaN,false,,null,undefined</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">"n"</span>;</span><br><span class="line"><span class="keyword">if</span> (txt) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"the value is truthy"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"the value is falsy"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h1><h2 id="運算子"><a href="#運算子" class="headerlink" title="運算子"></a>運算子</h2><h4 id="一元運算子"><a href="#一元運算子" class="headerlink" title="一元運算子"></a>一元運算子</h4><p>算數運算子除了用來作「兩個數值」的四則運算、取餘數得作用之外，也有另外一種運算子只需要單個數值就可以完成運算，稱為一元運算子。正號 + 與負號 - 分別用來表示數字的正數與負數狀態</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = +<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><ul><li><code>++</code> 遞增、<code>--</code>遞減</li></ul><h4 id="比較運算子"><a href="#比較運算子" class="headerlink" title="比較運算子"></a>比較運算子</h4><p>比較運算子有兩個運算元，是用來比較運算子兩側的數值，比較後得到 true 或 false<br><img src="https://i.imgur.com/SWHGIaX.png" alt></p><h4 id="三元運算子"><a href="#三元運算子" class="headerlink" title="三元運算子"></a>三元運算子</h4><p>條件 (三元) 運算子 是 JavaScript 唯一用到三個運算元的運算子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition ? exprIfTrue : exprIfFalse</span><br></pre></td></tr></table></figure><p>也就是條件？如果條件成立回傳值：如果條件失敗回傳值</p><h4 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h4><p>Array 是一種特別類型的變數，在 JavaScript 裡，它用來儲存值，但不只儲存單一個值，而是一系列的值。當需要運用一系列或值跟值之間有關連性的狀況時，應該要考慮用陣列。以下是幾個常見的例子與陣列運用方式：</p><p>建立陣列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var colors = [&apos;white&apos;,&apos;red&apos;,&apos;green&apos;];</span><br></pre></td></tr></table></figure><p>運用 index 存取或變更陣列中的指定項目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var first = index[0];//white</span><br><span class="line">colors[2]= purple</span><br></pre></td></tr></table></figure><p>push()：在陣列最末端加入 item</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var newNum = colors.push(3);// var colors = [&apos;white&apos;,&apos;red&apos;,&apos;green&apos;,3];</span><br></pre></td></tr></table></figure><p>pop():移除陣列最後一個項目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var last=colors.pop();//var colors = [&apos;white&apos;,&apos;red&apos;,&apos;green&apos;];</span><br></pre></td></tr></table></figure><p>shift()：移除 array 最前面一個 item</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var first = colors.shift();//var colors = [&apos;red&apos;,&apos;green&apos;];</span><br></pre></td></tr></table></figure><p>unshift()：從 array 最前面加入 item</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var fruite = colors.unshift(&apos;apple&apos;);//var colors = [&apos;apple&apos;,&apos;red&apos;,&apos;green&apos;];</span><br></pre></td></tr></table></figure><p>indexOf():會回傳給定元素於陣列中第一個被找到之索引，若不存在於陣列中則回傳 -1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const beasts = [&apos;ant&apos;, &apos;bison&apos;, &apos;camel&apos;, &apos;duck&apos;, &apos;bison&apos;];</span><br><span class="line"></span><br><span class="line">console.log(beasts.indexOf(&apos;bison&apos;));</span><br><span class="line">// expected output: 1</span><br><span class="line"></span><br><span class="line">// start from index 2</span><br><span class="line">console.log(beasts.indexOf(&apos;bison&apos;, 2));</span><br><span class="line">// expected output: 4</span><br><span class="line"></span><br><span class="line">console.log(beasts.indexOf(&apos;giraffe&apos;));</span><br><span class="line">// expected output: -1</span><br></pre></td></tr></table></figure><p>slice():回傳一個新陣列物件，為原陣列選擇之 begin 至 end（不含 end）部分的淺拷貝（shallow copy）。而原本的陣列將不會被修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var fruits = [&apos;banana&apos;,&apos;orange&apos;,&apos;lemon&apos;,&apos;grape&apos;];</span><br><span class="line">var citrus = fruits.slice(1,3);</span><br><span class="line">// [&apos;orange&apos;,&apos;lemon&apos;]</span><br><span class="line"></span><br><span class="line">var nums = [1,2,3];</span><br><span class="line">var otherNum = num.slice();</span><br><span class="line">// [1,2,3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var nums = [1,2,3,&apos;a&apos;,&apos;b&apos;,4,5,6];</span><br><span class="line">var letters = nums.slice(3,5);</span><br><span class="line">//[&apos;a&apos;,&apos;b&apos;]</span><br></pre></td></tr></table></figure><p>splice(pos, index)：移除從 pos 起的幾個項目(注意是用 index 計算)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var removeItem = arr.splice(0, 2); // colors = [&apos;green&apos;];</span><br></pre></td></tr></table></figure><p>forEach():會將陣列內的每個元素，皆傳入並執行給定的函式一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = [a, b, c];</span><br><span class="line">arr1.forEach(function(element)&#123;</span><br><span class="line">  console.log(element);</span><br><span class="line">&#125;)</span><br><span class="line">// 印出最大值</span><br><span class="line">var nums = [1, 2, 3, 4, 5];</span><br><span class="line">let biggest = 1;</span><br><span class="line"></span><br><span class="line">nums.forEach(function (num) &#123;</span><br><span class="line">  if (biggest &lt; num) &#123;</span><br><span class="line">    biggest = num;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(biggest);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 加總</span><br><span class="line">var nums = [1, 2, 3, 4, 5];</span><br><span class="line">let sum = 0;</span><br><span class="line">var nums = [1, 2, 3, 4, 5];</span><br><span class="line">let sum = 0;</span><br><span class="line"></span><br><span class="line">//找相等</span><br><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">function isUniform() &#123;</span><br><span class="line">  var firstValue = arr[0];</span><br><span class="line">  var bool = true;</span><br><span class="line">  arr.forEach(function (check) &#123;</span><br><span class="line">    if (firstValue !== check) &#123;</span><br><span class="line">      bool = false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  return bool;</span><br><span class="line">&#125;</span><br><span class="line">isUniform();</span><br><span class="line">//倒轉</span><br><span class="line">var arr = [1, 2, 3, 4, 5]</span><br><span class="line">arr.slice().reverse().forEach(function (x) &#123;</span><br><span class="line">  console.log(x);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><p>函式是為了解答某個問題或執行一項指定的工作，而組合而成的敘述句集合。簡言之函式把某項工作的執行步驟先儲存起來，當有需要的時候，再要求韓式去執行這些步驟。函式也是物件的一種，在 JavaScript 裡，函式是「一級物件」(first class object)。一級物件指的是可以將韓式存放在變數、物件、陣列之中</p><p>函式的組成包括：</p><ul><li>函式的名稱。</li><li>包圍在括號()中，並由逗號區隔的一個函式參數列表。</li><li>包圍在大括號{}中，用於定義函式功能的一些 JavaScript 語句。</li></ul><h4 id="函式定義"><a href="#函式定義" class="headerlink" title="函式定義"></a>函式定義</h4><ol><li>函式宣告式<br>「函式宣告」應該是最常見的用法，必須在宣告時指定函式名稱，也稱為「命名函式」</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>函式表達式、函式運算式</li></ol><p>透過 變數名稱 = function([參數]){ … }; 的方式，將一個函式透過 = 指定給某個變數。因為函式實際上它仍屬於 Object 的類型，是一種可以被呼叫 (be invoked) 的特殊物件 (值)，因此可以透過變數存入。這類沒有名稱的函式稱為「匿名函式」</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> area = <span class="function"><span class="keyword">function</span> (<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>透過 new Function 關鍵字建立函式</li></ol><p>使用 Function (注意 F 大寫) 這個關鍵字來建立函式物件。 使用時將參數與函式的內容依序傳入 Function，就可以建立一個函式物件了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> square = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"number"</span>, <span class="string">"return number * number"</span>);</span><br></pre></td></tr></table></figure><p>參考資料<br><a href="https://ithelp.ithome.com.tw/articles/10191549" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10191549</a><br><a href="https://orow.github.io/2019/02/28/basic-javascript/" target="_blank" rel="noopener">https://orow.github.io/2019/02/28/basic-javascript/</a></p><h4 id="提昇-Hoisting"><a href="#提昇-Hoisting" class="headerlink" title="提昇 (Hoisting)"></a>提昇 (Hoisting)</h4><p>函式陳述式(Function Declaration)與函式表達式（Function Expressions)的差異。<br>函式宣告建立的函數，會被提升（hoisting）到該作用域（scope）最頂端，讓整個作用域都可以呼叫它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">declared();</span><br><span class="line"><span class="comment">// 輸出 declared</span></span><br><span class="line"><span class="comment">// 函式陳述式 function declaration</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">declared</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"declared"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expressed();</span><br><span class="line"><span class="comment">// TypeError: undefined is not a function</span></span><br><span class="line"><span class="comment">// 函式表達式 function expressions</span></span><br><span class="line"><span class="keyword">var</span> expressed = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"expressed"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">expressed();</span><br><span class="line"><span class="comment">// 輸出 expressed</span></span><br></pre></td></tr></table></figure><h4 id="立即執行函式-IIFE"><a href="#立即執行函式-IIFE" class="headerlink" title="立即執行函式 (IIFE)"></a>立即執行函式 (IIFE)</h4><p>此類函式一般作為一種程式碼包裝紙的保護概念，讓匿名函式中宣告變數可以有效的跟其他程式腳本裡相同名稱的變數保護隔離，避免相互干擾。因此立即執行函式沒有名稱。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> area = (<span class="function"><span class="keyword">function</span> (<span class="params">place</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> width = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> height = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"This "</span> + place + <span class="string">" totla is "</span> + width * height);</span><br><span class="line">  <span class="comment">// consolo.log會印出 This undefined totla is 6</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域 (Scope)"></a>作用域 (Scope)</h1><p>變數宣告的位置會影響程式碼裡變數的使用方式，如果把變數宣告在函式裡，這個變數就只能在這個函式中使用，這就是變數有效範圍 (scope)。在 JavaScript 當中，以是否在函數當中宣告來區分「全域變數」和「區域變數」。</p><ul><li>例 1:<br>這裡得出來的會是 150 跟 1，這是因為函式 doSomething()裡面再次定義了變數 x ，而且變數有效範圍的最小單位是 function，所以在函式區塊內透過 var 定義的 x 實際上只屬於這個函式。所以函式以外的 x 跟函式內的 x 是兩個不同的變數。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(doSomething(<span class="number">50</span>));</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><ul><li>例 2:<br>如果 function 內部沒有宣告 var x，就會一層一層向外找，直到全域變數為止。如果都沒有就會報錯： x is not defined。但要注意 function 可以讀取外層已宣告的變數，但外層拿不到裡面宣告的變數。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(doSomething(<span class="number">50</span>)); <span class="comment">//51</span></span><br></pre></td></tr></table></figure><ul><li>例 3:<br>兩個 function 都有 x，但不同區域的同命變數實際上是不同的。即使 x 被宣告 3 次，但彼此之間沒有關係，都是獨立的變數。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">"1"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">"100"</span>;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">"200"</span>;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getValue1()); <span class="comment">//區域1</span></span><br><span class="line"><span class="built_in">console</span>.log(getValue2()); <span class="comment">//區域2</span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">//全域</span></span><br></pre></td></tr></table></figure><ul><li>例 4:<br>如果把 fuction 裡面的宣告關鍵字 var 拿掉，會得出 150 及 100 ，因為雖然 function 是切分變數有效範圍的單位，但前提是必須在 fuction 內部再次用 var 宣告變數，不然 JavaScript 會往外層去找同名變數，直到最外層的全域物件。所以這個裡子裡因為沒有在 function 裡重新宣告 x ，所以 x = 100 跑去變更更外層的同名變數。導致第二個印出的 x 的值變成 100 （後來 ES6 用 let 跟 const 分別定義 「變數」與「常數」，來改善 var 有時候會污染全域的問題）。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">  x = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(doSomething(<span class="number">50</span>)); <span class="comment">//150</span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">//100</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基礎概念&quot;&gt;&lt;a href=&quot;#基礎概念&quot; class=&quot;headerlink&quot; title=&quot;基礎概念&quot;&gt;&lt;/a&gt;基礎概念&lt;/h1&gt;&lt;p&gt;JavaScript 是一門基於原型、函式先行的程式語言，支援物件導向。簡言之，是一種可在網站裡加入動態效果的程式語言，例如
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Git 基礎指令 (二)</title>
    <link href="http://yoursite.com/2019/01/31/2019-01-31/"/>
    <id>http://yoursite.com/2019/01/31/2019-01-31/</id>
    <published>2019-01-30T16:00:00.000Z</published>
    <updated>2020-08-07T08:32:51.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="檢視目前設定"><a href="#檢視目前設定" class="headerlink" title="檢視目前設定"></a>檢視目前設定</h1><p>$ git config –list</p><h1 id="設定帳密"><a href="#設定帳密" class="headerlink" title="設定帳密"></a>設定帳密</h1><p>$ git config –global user.name ‘cxxxxxxx’<br>$ git config –global user.email ‘cxxxxxxx@gmail.com’</p><h1 id="查詢設定"><a href="#查詢設定" class="headerlink" title="查詢設定"></a>查詢設定</h1><p>$ git config –list</p><h1 id="Git-初始化"><a href="#Git-初始化" class="headerlink" title="Git 初始化"></a>Git 初始化</h1><p>讓 Git 知道這個資料夾要進行版控</p><ul><li>建立目錄<br>$ mkdir git-practice<br>$ cd git-practice</li><li>git 初始化<br>$ git init (自動建立一個.git 目錄)</li></ul><h1 id="Git-重要區塊"><a href="#Git-重要區塊" class="headerlink" title="Git 重要區塊"></a>Git 重要區塊</h1><ul><li>工作目錄 (working)</li><li>暫存區域 (staging)</li><li>儲存庫 (repository)</li></ul><blockquote><p>它們並不是被放到某個「目錄」，比較像是狀態的「改變」</p></blockquote><h4 id="新增檔案"><a href="#新增檔案" class="headerlink" title="新增檔案"></a>新增檔案</h4><ul><li>現在 git 狀態<br>$ git status<br>$ git add index.html (新增一個檔案的時候，status 還是 untracked file，之後從工作目錄改到暫存區域變成 new file )<br>$ git commit -m “add index” (推到儲存庫，status 顯示 working tree clean)</li></ul><p><img src="https://i.imgur.com/hJEeFVT.png" alt></p><blockquote><p>add+commit 這樣的循環是一次存檔<br>commit 的訊息很重要，重點是這次存了什麼</p></blockquote><ul><li>檢視記錄<br>$ git log<br>$ git log –oneline</li></ul><h3 id="Git-使用情境-1"><a href="#Git-使用情境-1" class="headerlink" title="Git 使用情境 1"></a>Git 使用情境 1</h3><ul><li><p>檔案不小心刪掉怎麼辦？<br>$ rm index.html<br>$ git checkout –index.html<br>$ git checkout . (把這個目錄恢復成最近一次 commit 狀態)</p></li><li><p>查詢檔案作者<br>$ git blame index.html</p></li><li><p>git 裡新增目錄並進行版控<br>由於 git 不會把空資料夾運算進版控，所以可以放一個隱藏檔<br>$ touch hello-world/.keep</p></li></ul><h3 id="使用分支"><a href="#使用分支" class="headerlink" title="使用分支"></a>使用分支</h3><p>為什麼要使用分支？</p><blockquote><p>一般來說，我們分支只是貼在某個 commit 上的貼紙，例如下圖的 master :</p></blockquote><p><img src="https://i.imgur.com/Vly0sFs.png" alt></p><ul><li>查詢分支<br>$ git branch</li><li>開新分支<br>$ git branch xxxx (git branch 後面加上要開的分支名稱)</li></ul><p><img src="https://i.imgur.com/keIwyUn.png" alt></p><blockquote><p>如果 HEAD 現在指向 master，意思就是「現在正在 master 分之上」</p></blockquote><ul><li>切換分支<br>$ git checkout cat (switched to master ‘cat’ )</li><li>合併分支<br>$ git merge cat</li></ul><p>合併前：<br><img src="https://i.imgur.com/9VLiKmo.png" alt><br>合併後：<br><img src="https://i.imgur.com/xyO3GU3.png" alt></p><blockquote><p>合併分支可看成只是在移動貼紙，但是這邊的合併還算單純，所以算是一種「<strong>快轉合併</strong>」</p></blockquote><ul><li>刪除分支<br>$ git branch -d cat<blockquote><p>只是把 cat 貼紙撕掉<br>commit 或是檔案不會因此受到影響<br>Git 的本體是 commit</p></blockquote></li></ul><h3 id="複雜一點的分支"><a href="#複雜一點的分支" class="headerlink" title="複雜一點的分支"></a>複雜一點的分支</h3><p>如果是各自新增的 branch 就沒辦法快轉合併了，要怎麼處理？例如現在分別有一個 dog 跟 cat branch，假設現在 HEAD 指向 dog branch：<br><img src="https://i.imgur.com/cM5Ho0b.png" alt></p><ul><li>合併 dog 跟 cat branch<br>$ git merge cat</li></ul><p><img src="https://i.imgur.com/nR08OV6.png" alt></p><h3 id="另一種合併分支的方式-（rebase"><a href="#另一種合併分支的方式-（rebase" class="headerlink" title="另一種合併分支的方式 （rebase)"></a>另一種合併分支的方式 （rebase)</h3><p><img src="https://i.imgur.com/ymEIFIf.png" alt><br><img src="https://i.imgur.com/ZHgFviZ.png" alt></p><pre><code>以 rebase 合併的好處：合併的歷史比較簡潔乾淨，但相對 merge，就比較難看清楚整個檔案的分支記錄過程。</code></pre><h3 id="如何回到上一步-返回之前狀態"><a href="#如何回到上一步-返回之前狀態" class="headerlink" title="如何回到上一步 (返回之前狀態)"></a>如何回到上一步 (返回之前狀態)</h3><blockquote><p>對 Git 常見的誤解是以為 reset 是刪除 commit 的意思。但是 Git 的世界事實上沒有刪除 Commit 的指令。一般我們把 reset 理解成「重新設定」，其實可以理解成 become，一種「我想要變成 XXX」的狀態。</p><blockquote></blockquote></blockquote><p>原始檔案狀態：<br><img src="https://i.imgur.com/JHdTMi7.png" alt><br>reset 狀態：<br><img src="https://i.imgur.com/8g5Njgz.png" alt></p><p>參數狀態決定檔案去留，常見參數有</p><ul><li>mixed</li><li>soft</li><li>hard</li></ul><p><img src="https://i.imgur.com/L8ghm4Q.png" alt></p><p>在使用 –hard 的時候，如果要再次恢復專案到上一步，要怎樣做？</p><h1 id="reflog-reference-log"><a href="#reflog-reference-log" class="headerlink" title="reflog (reference log )"></a>reflog (reference log )</h1><p>Git 會把移動軌跡都記錄在 reference log，如果使用 –hard 之後想要復原，可先查詢 reflog</p><h1 id="絕對定位法"><a href="#絕對定位法" class="headerlink" title="絕對定位法"></a>絕對定位法</h1><p>$ git reflog (查詢 commit 編號)<br>$ git reset xxxxx(commit 編號) –hard</p><h1 id="相對定位"><a href="#相對定位" class="headerlink" title="相對定位"></a>相對定位</h1><ul><li><code>^</code> Caret</li><li><code>~</code> Tilde</li></ul><p><img src="https://i.imgur.com/lMofhTE.png" alt></p><p>但是如果每次都要輸入 commit 編號有點麻煩，可以把編號改成代號，例如回到現在狀態的前 2 步</p><p><img src="https://i.imgur.com/DruAI8w.png" alt></p><p>例如回到上一個步驟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^ --mixed</span><br></pre></td></tr></table></figure><h1 id="reset-跟-checkout-差別是什麼？"><a href="#reset-跟-checkout-差別是什麼？" class="headerlink" title="reset 跟 checkout 差別是什麼？"></a>reset 跟 checkout 差別是什麼？</h1><p><img src="https://i.imgur.com/fSAJhWD.png" alt></p><h1 id="Git-使用情境"><a href="#Git-使用情境" class="headerlink" title="Git 使用情境"></a>Git 使用情境</h1><ul><li><p>回到上一個步驟的兩種作法<br>$ git reset xxxxx(commit 編號) –mixed<br>$ git reset HEAD^ –mixed</p></li><li><p>合併發生衝突怎麼辦？</p></li></ul><p>如果合併時遇到像是同一行 HTML 檔案的衝突，該怎麼辦呢？這時在 HTML 檔案中會出現像這樣：<br><img src="https://i.imgur.com/Xb5B1tm.png" alt></p><p>我們先把那些標記都清除<br><img src="https://i.imgur.com/SMAevkt.png" alt></p><p>並且回到終端機，這時 git status 如下，表示我們要再做一次存檔動作<br><img src="https://i.imgur.com/p2jJTPr.jpg" alt><br>$ git add index.html<br>$ git commit -m “merge payment and member”</p><ul><li><p>不小心把還沒合併的分支砍掉了，救得回來嗎？<br>$git branch -D new_dog (不小心砍掉一個分支)<br>$git branch newnew_dog 053fb21 (在 reflog 重新貼上 newnew_dog)</p></li><li><p>某個分支的某個 commit 做得不錯想收進來，但又不想合併整個分支<br>使用 cherry pick 指令</p></li></ul><h1 id="使用標籤"><a href="#使用標籤" class="headerlink" title="使用標籤"></a>使用標籤</h1><p>什麼時候會使用標籤？在 Git，「標籤（tag）」是一個指向某一個 Commit 的指標。通常在開發軟體有完成特定的里程碑，例如軟體版號 1.0.0 或是 beta-release 之類的，這時候就很適合使用標籤做標記。<br>假設目前的 Commit 紀錄如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">db3bbec (HEAD -&gt; master) add fish</span><br><span class="line">930feb3 add pig</span><br><span class="line">51d54ff add lion and tiger</span><br><span class="line">27f6ed6 add dog 2</span><br><span class="line">2bab3e7 add dog 1</span><br><span class="line">ca40fc9 add 2 cats</span><br><span class="line">1de2076 add cat 2</span><br><span class="line">cd82f29 add cat 1</span><br><span class="line">382a2a5 add database settings</span><br><span class="line">bb0c9c2 init commit</span><br></pre></td></tr></table></figure><p>想在 add lion and tiger 這個 Commit（51d54ff）打上一個 big_cats 的標籤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag big_cats 51d54ff</span><br></pre></td></tr></table></figure><h1 id="修改歷史紀錄"><a href="#修改歷史紀錄" class="headerlink" title="修改歷史紀錄"></a>修改歷史紀錄</h1><h2 id="修改-Commit-訊息-（圖型介面）"><a href="#修改-Commit-訊息-（圖型介面）" class="headerlink" title="修改 Commit 訊息 （圖型介面）"></a>修改 Commit 訊息 （圖型介面）</h2><p>這裡使用的指令一樣是 rebase 但多了互動式操作，在圖型介面的位置如下。操作後可以修改<br><img src="https://i.imgur.com/PCL7fcc.png" alt><br>點擊之後可選擇要修改的地方<img src="https://i.imgur.com/VJk83ZQ.png" alt><br>修改訊息之後，被修正的地方，還有在它後面的訊息的 Changeset 都會被改變<br><img src="https://i.imgur.com/Fn0AcVn.png" alt><br>修改結果<br><img src="https://i.imgur.com/XADDULQ.png" alt></p><h2 id="修改-Commit-訊息-（終端機）"><a href="#修改-Commit-訊息-（終端機）" class="headerlink" title="修改 Commit 訊息 （終端機）"></a>修改 Commit 訊息 （終端機）</h2><p>$ git rebase -i f66ba66 (意思是要修改後退到這個 commit 編號為止的歷史)</p><blockquote><p>每一次的 rebase ，就算只改一個字，也會改變隨後全部的歷史紀錄</p></blockquote><h1 id="刪除或調整-commit-順序"><a href="#刪除或調整-commit-順序" class="headerlink" title="刪除或調整 commit 順序"></a>刪除或調整 commit 順序</h1><p><img src="https://i.imgur.com/qdr9Cvj.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;檢視目前設定&quot;&gt;&lt;a href=&quot;#檢視目前設定&quot; class=&quot;headerlink&quot; title=&quot;檢視目前設定&quot;&gt;&lt;/a&gt;檢視目前設定&lt;/h1&gt;&lt;p&gt;$ git config –list&lt;/p&gt;
&lt;h1 id=&quot;設定帳密&quot;&gt;&lt;a href=&quot;#設定帳密&quot; c
      
    
    </summary>
    
    
      <category term="environment" scheme="http://yoursite.com/tags/environment/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>
