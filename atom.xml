<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-28T07:05:13.091Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git 基本指令</title>
    <link href="http://yoursite.com/2019/06/25/2019-06-25/"/>
    <id>http://yoursite.com/2019/06/25/2019-06-25/</id>
    <published>2019-06-24T16:00:00.000Z</published>
    <updated>2019-06-28T07:05:13.091Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用終端機指令"><a href="#常用終端機指令" class="headerlink" title="常用終端機指令"></a>常用終端機指令</h3><p>$ pwd (print working directory 印出現在所在位置)<br>$ mkdir hello (make dir 建立目錄 hello)<br>$ cd hello/（change dir 移動到目錄 hello）<br>$ cd .. (回到上一層目錄)<br>$ touch index.html (建立檔案 index.html)<br>$ ls (列出目錄裡所有檔案)<br>$ ls -al (列出目錄裡所有檔案的細節)<br>$ rm index.html(徹底刪除檔案)<br>$ rm -r hello/ (徹底刪除hello資料夾)<br>$ cp hello.html world.html （複製 hello.html 為 world.html）<br>$ mv world.html images/ (把 world.html 搬到 images 資料夾 )<br>$ mv world.html 123.html (把 world.html 改名 123.html)</p><p><img src="https://i.imgur.com/6TPZXrC.png" alt></p><h3 id="使用-git"><a href="#使用-git" class="headerlink" title="使用 git"></a>使用 git</h3><h4 id="檢視目前設定"><a href="#檢視目前設定" class="headerlink" title="檢視目前設定"></a>檢視目前設定</h4><p>$ git config –list</p><h4 id="設定帳密"><a href="#設定帳密" class="headerlink" title="設定帳密"></a>設定帳密</h4><p>$ git config –global user.name ‘cxxxxxxx’<br>$ git config –global user.email ‘cxxxxxxx@gmail.com’</p><h4 id="查詢設定"><a href="#查詢設定" class="headerlink" title="查詢設定"></a>查詢設定</h4><p>$ git config –list</p><h3 id="Git-初始化"><a href="#Git-初始化" class="headerlink" title="Git 初始化"></a>Git 初始化</h3><p>讓 Git 知道這個資料夾要進行版控</p><ul><li>建立目錄<br>$ mkdir git-practice<br>$ cd git-practice</li><li>git 初始化<br>$ git init (自動建立一個.git目錄)</li></ul><h3 id="Git-重要區塊"><a href="#Git-重要區塊" class="headerlink" title="Git 重要區塊"></a>Git 重要區塊</h3><ul><li>工作目錄 (working)</li><li>暫存區域 (staging)</li><li>儲存庫 (repository)</li></ul><blockquote><p>它們並不是被放到某個「目錄」，比較像是狀態的「改變」</p></blockquote><h4 id="新增檔案"><a href="#新增檔案" class="headerlink" title="新增檔案"></a>新增檔案</h4><ul><li>現在 git 狀態<br>$ git status<br>$ git add index.html (新增一個檔案的時候，status 還是 untracked file，之後從工作目錄改到暫存區域變成 new file )<br>$ git commit -m “add index” (推到儲存庫，status 顯示 working tree clean)</li></ul><p><img src="https://i.imgur.com/hJEeFVT.png" alt></p><blockquote><p>add+commit 這樣的循環是一次存檔<br>commit 的訊息很重要，重點是這次存了什麼</p></blockquote><ul><li>檢視記錄<br>$ git log<br>$ git log –oneline</li></ul><h3 id="Git-使用情境-1"><a href="#Git-使用情境-1" class="headerlink" title="Git 使用情境 1"></a>Git 使用情境 1</h3><ul><li><p>檔案不小心刪掉怎麼辦？<br>$ rm index.html<br>$ git checkout –index.html<br>$ git checkout . (把這個目錄恢復成最近一次 commit 狀態)</p></li><li><p>查詢檔案作者<br>$ git blame index.html</p></li><li><p>git 裡新增目錄並進行版控<br>由於 git 不會把空資料夾運算進版控，所以可以放一個隱藏檔<br>$ touch hello-world/.keep</p></li></ul><h3 id="使用分支"><a href="#使用分支" class="headerlink" title="使用分支"></a>使用分支</h3><p>為什麼要使用分支？</p><blockquote><p>一般來說，我們分支只是貼在某個 commit 上的貼紙，例如下圖的 master :</p></blockquote><p><img src="https://i.imgur.com/Vly0sFs.png" alt></p><ul><li>查詢分支<br>$ git branch </li><li>開新分支<br>$ git branch xxxx (git branch 後面加上要開的分支名稱)</li></ul><p><img src="https://i.imgur.com/keIwyUn.png" alt></p><blockquote><p>如果 HEAD 現在指向 master，意思就是「現在正在 master 分之上」</p></blockquote><ul><li>切換分支<br>$ git checkout cat (switched to master ‘cat’ )</li><li>合併分支<br>$ git merge cat </li></ul><p>合併前：<br><img src="https://i.imgur.com/9VLiKmo.png" alt><br>合併後：<br><img src="https://i.imgur.com/xyO3GU3.png" alt></p><blockquote><p>合併分支可看成只是在移動貼紙，但是這邊的合併還算單純，所以算是一種「<strong>快轉合併</strong>」</p><ul><li>刪除分支<br>$ git branch -d cat<br>只是把 cat 貼紙撕掉<br>commit 或是檔案不會因此受到影響<br>Git 的本體是 commit </li></ul></blockquote><h3 id="複雜一點的分支"><a href="#複雜一點的分支" class="headerlink" title="複雜一點的分支"></a>複雜一點的分支</h3><p>如果是各自新增的 branch 就沒辦法快轉合併了，要怎麼處理？例如現在分別有一個 dog 跟 cat branch，假設現在 HEAD 指向 dog branch：<br><img src="https://i.imgur.com/cM5Ho0b.png" alt></p><ul><li>合併 dog 跟 cat branch<br>$ git merge cat</li></ul><p><img src="https://i.imgur.com/nR08OV6.png" alt></p><h3 id="另一種合併分支的方式-（rebase"><a href="#另一種合併分支的方式-（rebase" class="headerlink" title="另一種合併分支的方式 （rebase)"></a>另一種合併分支的方式 （rebase)</h3><p><img src="https://i.imgur.com/ymEIFIf.png" alt><br><img src="https://i.imgur.com/ZHgFviZ.png" alt></p><pre><code>以 rebase 合併的好處：合併的歷史比較簡潔乾淨，但相對 merge，就比較難看清楚整個檔案的分支記錄過程。</code></pre><h3 id="如何回到上一步-返回之前狀態"><a href="#如何回到上一步-返回之前狀態" class="headerlink" title="如何回到上一步 (返回之前狀態)"></a>如何回到上一步 (返回之前狀態)</h3><blockquote><p> 對 Git 常見的誤解是以為 reset 是刪除 commit 的意思。但是 Git 的世界事實上沒有刪除 Commit 的指令。一般我們把 reset 理解成「重新設定」，其實可以理解成 become，一種「我想要變成XXX」的狀態。</p><blockquote></blockquote></blockquote><p>原始檔案狀態：<br><img src="https://i.imgur.com/JHdTMi7.png" alt><br>reset 狀態：<br><img src="https://i.imgur.com/8g5Njgz.png" alt></p><p>參數狀態決定檔案去留，常見參數有</p><ul><li>mixed</li><li>soft</li><li>hard</li></ul><p><img src="https://i.imgur.com/L8ghm4Q.png" alt></p><p>在使用 –hard 的時候，如果要再次恢復專案到上一步，要怎樣做？</p><h3 id="reflog-reference-log"><a href="#reflog-reference-log" class="headerlink" title="reflog (reference log )"></a>reflog (reference log )</h3><p>Git 會把移動軌跡都記錄在 reference log，如果使用 –hard 之後想要復原，可先查詢 reflog </p><h4 id="絕對定位法"><a href="#絕對定位法" class="headerlink" title="絕對定位法"></a>絕對定位法</h4><p>$ git reflog (查詢 commit 編號)<br>$ git reset xxxxx(commit 編號) –hard </p><h4 id="相對定位"><a href="#相對定位" class="headerlink" title="相對定位"></a>相對定位</h4><ul><li><code>^</code> Caret</li><li><code>~</code> Tilde </li></ul><p><img src="https://i.imgur.com/lMofhTE.png" alt></p><p>但是如果每次都要輸入 commit 編號有點麻煩，可以把編號改成代號，例如回到現在狀態的前 2 步</p><p><img src="https://i.imgur.com/DruAI8w.png" alt></p><p>例如回到上一個步驟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^ --mixed</span><br></pre></td></tr></table></figure><h4 id="reset-跟-checkout-差別是什麼？"><a href="#reset-跟-checkout-差別是什麼？" class="headerlink" title="reset 跟 checkout 差別是什麼？"></a>reset 跟 checkout 差別是什麼？</h4><p><img src="https://i.imgur.com/fSAJhWD.png" alt></p><h3 id="Git-使用情境-2"><a href="#Git-使用情境-2" class="headerlink" title="Git 使用情境 2"></a>Git 使用情境 2</h3><ul><li><p>回到上一個步驟的兩種作法<br>$ git reset xxxxx(commit 編號) –mixed<br>$ git reset HEAD^ –mixed</p></li><li><p>合併發生衝突怎麼辦？</p></li></ul><p>如果合併時遇到像是同一行 HTML 檔案的衝突，該怎麼辦呢？這時在 HTML 檔案中會出現像這樣：<br><img src="https://i.imgur.com/Xb5B1tm.png" alt></p><p>我們先把那些標記都清除<br><img src="https://i.imgur.com/SMAevkt.png" alt></p><p>並且回到終端機，這時 git status 如下，表示我們要再做一次存檔動作<br><img src="https://i.imgur.com/p2jJTPr.jpg" alt><br>$ git add index.html<br>$ git commit -m “merge payment and member”</p><ul><li><p>不小心把還沒合併的分支砍掉了，救得回來嗎？<br>$git branch -D new_dog (不小心砍掉一個分支)<br>$git branch newnew_dog 053fb21 (在reflog重新貼上newnew_dog)</p></li><li><p>某個分支的某個 commit 做得不錯想收進來，但又不想合併整個分支<br>使用 cherry pick 指令</p></li></ul><h3 id="使用標籤"><a href="#使用標籤" class="headerlink" title="使用標籤"></a>使用標籤</h3><p>什麼時候會使用標籤？在 Git，「標籤（tag）」是一個指向某一個 Commit 的指標。通常在開發軟體有完成特定的里程碑，例如軟體版號 1.0.0 或是 beta-release 之類的，這時候就很適合使用標籤做標記。<br>假設目前的 Commit 紀錄如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">db3bbec (HEAD -&gt; master) add fish</span><br><span class="line">930feb3 add pig</span><br><span class="line">51d54ff add lion and tiger</span><br><span class="line">27f6ed6 add dog 2</span><br><span class="line">2bab3e7 add dog 1</span><br><span class="line">ca40fc9 add 2 cats</span><br><span class="line">1de2076 add cat 2</span><br><span class="line">cd82f29 add cat 1</span><br><span class="line">382a2a5 add database settings</span><br><span class="line">bb0c9c2 init commit</span><br></pre></td></tr></table></figure><p>想在 add lion and tiger 這個 Commit（51d54ff）打上一個 big_cats 的標籤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag big_cats 51d54ff</span><br></pre></td></tr></table></figure><h3 id="修改歷史紀錄"><a href="#修改歷史紀錄" class="headerlink" title="修改歷史紀錄"></a>修改歷史紀錄</h3><h4 id="修改-Commit-訊息-（圖型介面）"><a href="#修改-Commit-訊息-（圖型介面）" class="headerlink" title="修改 Commit 訊息 （圖型介面）"></a>修改 Commit 訊息 （圖型介面）</h4><p>這裡使用的指令一樣是 rebase 但多了互動式操作，在圖型介面的位置如下。操作後可以修改<br><img src="https://i.imgur.com/PCL7fcc.png" alt><br>點擊之後可選擇要修改的地方<img src="https://i.imgur.com/VJk83ZQ.png" alt><br>修改訊息之後，被修正的地方，還有在它後面的訊息的 Changeset 都會被改變<br><img src="https://i.imgur.com/Fn0AcVn.png" alt><br>修改結果<br><img src="https://i.imgur.com/XADDULQ.png" alt></p><h4 id="修改-Commit-訊息-（終端機）"><a href="#修改-Commit-訊息-（終端機）" class="headerlink" title="修改 Commit 訊息 （終端機）"></a>修改 Commit 訊息 （終端機）</h4><p>$ git rebase -i f66ba66 (意思是要修改後退到這個commit編號為止的歷史)</p><blockquote><p>每一次的 rebase ，就算只改一個字，也會改變隨後全部的歷史紀錄</p></blockquote><h3 id="刪除或調整-commit-順序"><a href="#刪除或調整-commit-順序" class="headerlink" title="刪除或調整 commit 順序"></a>刪除或調整 commit 順序</h3><p><img src="https://i.imgur.com/qdr9Cvj.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用終端機指令&quot;&gt;&lt;a href=&quot;#常用終端機指令&quot; class=&quot;headerlink&quot; title=&quot;常用終端機指令&quot;&gt;&lt;/a&gt;常用終端機指令&lt;/h3&gt;&lt;p&gt;$ pwd (print working directory 印出現在所在位置)&lt;br&gt;$ mkdi
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>如何條列化思考</title>
    <link href="http://yoursite.com/2019/06/24/2019-06-24/"/>
    <id>http://yoursite.com/2019/06/24/2019-06-24/</id>
    <published>2019-06-23T16:00:00.000Z</published>
    <updated>2019-06-28T06:30:49.794Z</updated>
    
    <content type="html"><![CDATA[<p>這篇是 Hulo的線上免費課程初心者的計概與 coding 火球術，提供給我這種入門新手的程式思維思考心法。第二堂課的主題是「解決問題」，關注的方向式關於如何在日常思維與電腦化思維之間切換。在第一堂課之後，開始要練習一個可以深入學習的工程師思維，這需要不斷地問自己「為什麼？」另外，到底為什麼要寫程式呢？因為我們要用電腦話讓電腦照著我的意思做。要讓電腦聽話，那就要使用程式碼。最後，程式碼的目標，就是為了解決問題。</p><p>如何條列化思考？如何解決問題？<br>=</p><p>首先要學習的是解決問題的思維，而非令人頭痛的程式語法。</p><p>假設以下問題</p><blockquote><p> computerscience 裡有包含 c 嗎？有幾個 c ?</p></blockquote><h3 id="逐步拆解"><a href="#逐步拆解" class="headerlink" title="逐步拆解"></a>逐步拆解</h3><p>我們的人腦要拆解所有文字，自然最終的結果是看所有文字，但細分來說，其實是一個一個字地看（看第一個、看第二個）。</p><p>所以上面問題的解法，其實是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 從第一個看到最後一個，看有沒有 c 這個字</span><br><span class="line">- 如果有，就把位置記下來，並且繼續往下找</span><br></pre></td></tr></table></figure><h3 id="條列式轉換"><a href="#條列式轉換" class="headerlink" title="條列式轉換"></a>條列式轉換</h3><p>寫程式就是對電腦下指令，而且電腦一次只能做一個指令，所以如果把解法寫成條列式，就是練習對電腦下指令。這一堂利用「給你一串文字，問你裡面有沒有 p」當作範例 一步步教你怎麼用「程式化思考」 把自己的解法轉變成更「標準化」的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.找第一個字，看第一個字是不是 c，是的話就把位置記下來，不是的話就繼續往下找</span><br><span class="line">2.找第二個字，看第一個字是不是 c，是的話就把位置記下來，不是的話就繼續往下找</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>但是這樣太麻煩了，我們可以把無限的步驟簡化為有限的條列</p><blockquote><ul><li>假設 n 是 1， length 是字串長度，A 設成 -1 ，代表找到的位置，p 是要找到的字</li><li>看第 n 個字是不是 p，是的話讓 A =n</li><li>把 n+1，如果 n+1 大於 length 的話，就跳到第 5 步</li><li>跳回第 2 步</li><li>如果 A&lt;0，代表沒出現過；否則 A 就是答案</li></ul></blockquote><p>這邊的重點在加入第四步驟，讓第二、三步驟不斷巡迴。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">length: 15</span><br><span class="line">p:c</span><br><span class="line">n  A</span><br><span class="line">1  1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">10 10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15 15</span><br><span class="line">16</span><br></pre></td></tr></table></figure><h3 id="自主練習"><a href="#自主練習" class="headerlink" title="自主練習"></a>自主練習</h3><ul><li>試著把自己的一些生活流程用條列式列出來，每一條只能有一個動作</li></ul><ol><li>如果上班日，十點上床睡覺</li><li>如果假日，十二點上床睡覺</li><li>在廚房煮飯</li><li>搭捷運</li><li>如果晴天，去跑步</li><li>如果雨天，宅在家裡</li></ol><ul><li>給你一個亂數的數列，例如說：1, 8, 9, 2, 5 ,4，你能想出什麼步驟把這些數字由小到大排好嗎？</li></ul><ol><li>假設要讓亂數群根據數字大小排列，我們不知道這些數字裡面最大是多少所以n &lt;=n</li><li>用 1 比對所有數字，如果有符合的話，排在第一個位置</li><li>用 2 比對所有數字，如果有符合的話，排在第二個位置</li><li>用 9 比對所有數字，如果有符合的話，排在第二個位置</li><li>如果排列到10了，大於9的話，停止排列</li></ol><p>如何代號化？</p><blockquote><p>假設我們要比對的最大數字是 n(小於y的那個數字），y&gt;n=&gt;1<br>比對數字群看 n 有沒有出現，是的話讓A=n，代表找到的位置<br>把 n+1，如果 n+1=&gt;y，就跳到第 5 步<br>跳回第 2 步<br>排列完成</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這篇是 Hulo的線上免費課程初心者的計概與 coding 火球術，提供給我這種入門新手的程式思維思考心法。第二堂課的主題是「解決問題」，關注的方向式關於如何在日常思維與電腦化思維之間切換。在第一堂課之後，開始要練習一個可以深入學習的工程師思維，這需要不斷地問自己「為什麼？
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="計算機概論" scheme="http://yoursite.com/tags/%E8%A8%88%E7%AE%97%E6%A9%9F%E6%A6%82%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>Get API 實作</title>
    <link href="http://yoursite.com/2019/06/23/2019-06-23/"/>
    <id>http://yoursite.com/2019/06/23/2019-06-23/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2019-06-28T07:45:13.444Z</updated>
    
    <content type="html"><![CDATA[<p>這一篇主要是整理一個 Get API 小作品的思路。因為是參考別人的解法，加上自己的思考慣性是習慣從頭到尾把細節了解一次才認為完整掌握，所以使用這種看起來笨笨的步驟，一句一句拆解。</p><p>完成品 [<a href="https://chiangyuchi.github.io/get-api/]" target="_blank" rel="noopener">https://chiangyuchi.github.io/get-api/]</a><br>原始碼 [<a href="https://github.com/ChiangYuChi/get-api]" target="_blank" rel="noopener">https://github.com/ChiangYuChi/get-api]</a></p><h3 id="設定-DOM"><a href="#設定-DOM" class="headerlink" title="設定 DOM"></a>設定 DOM</h3><ul><li>select  區域選單</li><li>degreetable </li><li>placeTitle 區域名稱</li><li>time 更新時間</li><li>detail 細節</li><li>detailTitle</li><li>infoList 清單</li></ul><h3 id="取得資料"><a href="#取得資料" class="headerlink" title="取得資料"></a>取得資料</h3><ul><li>fetch open data </li><li>怎麼解決CROS問題 (cros-anywhere)</li><li>fetch 之後要怎麼存？存在哪裡？這些數據要幹嘛？<pre><code>-連結get data 函式，儲存data-更新所有頁面，先放入NTP。( datail, infoList) -待資料渲染至頁面後，關閉 loading page&gt;loading.style.display=&apos;none&apos;;</code></pre></li></ul><h3 id="綁定事件"><a href="#綁定事件" class="headerlink" title="綁定事件"></a>綁定事件</h3><ul><li>表單切換 change 事件<br>切換之後把點擊對象的值（e.target.value)，渲染到整個頁面 (updateAll)</li><li>項目 click 事件，如果點擊的標的是連結(e.target.value==A)，把連結標的的值，更新到細節欄位</li></ul><h3 id="儲存色彩資訊"><a href="#儲存色彩資訊" class="headerlink" title="儲存色彩資訊"></a>儲存色彩資訊</h3><ul><li>把顏色整理成陣列</li><li>顏色加入等級表，用for迴圈</li></ul><h3 id="取得資料後的儲存"><a href="#取得資料後的儲存" class="headerlink" title="取得資料後的儲存"></a>取得資料後的儲存</h3><ul><li><p>getData函式，儲存data為陣列<br>把data裡面待會要存到選單項裡面的，用迴圈以add方法，把需要的內容（需要哪些？），向new Set()結構加入新成員。</p></li><li><p>儲存的資料以location的名稱運用在加入選單所需的參數</p><h3 id="加入選單"><a href="#加入選單" class="headerlink" title="加入選單"></a>加入選單</h3></li><li><p>加入選單的函式（有一個參數location)</p></li><li><p>用forEach方法，巡訪參數的每個元素</p></li><li><p>以名為option的變數，創建元素</p></li><li><p>設置指定元素上element的属性值。如果属性已经存在，则更新该值；否则，使  用指定的名称和值添加一个新的属性。</p></li><li><p>把創建的元素加入option</p></li><li><p>把新增的option加進select</p><h3 id="完成的選單被變更了，觸發-change-事件"><a href="#完成的選單被變更了，觸發-change-事件" class="headerlink" title="完成的選單被變更了，觸發 change 事件"></a>完成的選單被變更了，觸發 change 事件</h3></li><li><p>updateAll（location) 傳入的參數是被點擊的地點</p></li><li><p>被點擊的地點，已經用location儲存，現在取用這個location</p></li><li><p>要在畫面更新的地區抬頭，就是點擊地點</p></li><li><p>要在畫面更新的時間，就取用第一筆陣列資料的發佈時間＋’更新’</p></li><li><p>要更新畫面，先把整個infoList清空</p></li><li><p>宣告一個非全域變數 data，它的值的取得，是在datalist裡一個一個過濾所有項目，如果過濾的項目裡面，有任何一個等於我所在區域的項目，回傳項目。</p></li><li><p>剛剛過濾出的項目儲存在變數data裡面，宣告一個新變數sortedData=data，並且用AQI大小排序</p></li><li><p>排序過的資料，用forEach，以字串形式置入畫面</p></li><li><p>在arrow function 裡，每個被檢查到的data，都當做el參數傳入</p></li><li><p>宣告一個新的變數叫做 newList，以此創建一個新的元素li</p></li><li><p>如果傳入的參數的AQI是空值或hypen，他們的AQI就等於N/A</p></li><li><p>宣告一個新的變數叫colorList，它的值是在colors陣列裡面比對，find 方法會對每個元素執行一次 callback 函式，直到找到一個讓 callback 函式回傳 true 的元素。當元素被找到的時候，find 會立刻回傳該元素，否則 find 會回傳 undefined。這個陣列裡面比對的狀態，當成col參數在這個方法裡運作，比對傳入元素的狀態，如果符合，就回傳色彩。</p></li><li><p>如果資料內沒有status(設備維修),if(colorList==undefined)，套用顏色是 ＃EEEEEE</p></li><li><p>組字串，並且更新：字串包含</p><p>  最外層的inforBox<br>  新增一個連結它的顯示文字是傳入的參數的siteName<br>  新增傳入元素的AQI，它的顏色是在colorList陣列裡面用status比對 的色彩</p></li><li><p>把字串加入newList裡</p></li><li><p>把newList加入父階層infoList</p></li><li><p>同步更新detail, updateDetail(傳入參數排序第一個的站名)</p></li></ul><h3 id="更新detail"><a href="#更新detail" class="headerlink" title="更新detail"></a>更新detail</h3><ul><li>函數傳入的參數就是我點擊的那一個</li><li>那一個要更新在畫面上的項目，是在資料陣列裡面用find()方法尋找的，並且叫它place</li><li>如果點擊的那一個，符合資料陣列裡面的siteName，就把data傳入一個新的空陣列裡面</li><li>空陣列包含 item.O3, item.PM10, item[‘PM2.5’], item.CO, item.SO2, item.NO2</li><li>細節標題的第一項，更新成上面的place</li><li>細節標題的第二項，就是項目的AQI屬性</li><li>著色的方式同上，宣告一個新的變數叫colorList，它的值是在colors陣列裡面比對，find 方法會對每個元素執行一次 callback 函式，直到找到一個讓 callback 函式回傳 true 的元素。當元素被找到的時候，find 會立刻回傳該元素，否則 find 會回傳 undefined。這個陣列裡面比對的狀態，當成col參數在這個方法裡運作，比對傳入元素的狀態，如果符合，就回傳色彩。所以要判斷這個colorlist的status是否等於傳入的項目的status，如果是，就回傳。</li><li>回傳顏色的運用方式，是將細節的第一個的背景顏色，比對colorList。</li><li>把data內的資料更新至 detail上 （用迴圈的方式，去檢查數據的長度，並且依照索引值一個一個放到細節項目的相同索引值位置，並回傳）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一篇主要是整理一個 Get API 小作品的思路。因為是參考別人的解法，加上自己的思考慣性是習慣從頭到尾把細節了解一次才認為完整掌握，所以使用這種看起來笨笨的步驟，一句一句拆解。&lt;/p&gt;
&lt;p&gt;完成品 [&lt;a href=&quot;https://chiangyuchi.githu
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day27-函數陳述句與函數表示式</title>
    <link href="http://yoursite.com/2019/06/22/2019-06-22/"/>
    <id>http://yoursite.com/2019/06/22/2019-06-22/</id>
    <published>2019-06-21T16:00:00.000Z</published>
    <updated>2019-06-28T07:11:23.648Z</updated>
    
    <content type="html"><![CDATA[<p>了解函數就是物件後，接著要實際運用這個觀念。開始之前，我們要先了解函數陳述句 （Function Statements) 與函數表示式 (Function Expressions) 的用法差異。</p><h3 id="表示式"><a href="#表示式" class="headerlink" title="表示式"></a>表示式</h3><blockquote><p>表示式是程式碼的單位，會形成一個值  (A unit of code that results in a value)</p></blockquote><p>直接地說，任何表示式最終都會創造一個值，而這個值不一定要儲存在某個變數。</p><p>舉例來說，我們宣告一個變數 <code>a</code>，並且打開開發者工具輸入以下</p><p><img src="https://i.imgur.com/TnvqLDE.png" alt></p><p>上面是一個簡單的表示式，我們透過等號運算子把 3 賦與給變數 <code>a</code>，執行它，得到回傳的結果。</p><p>但是上面說過值不一定要儲存在變數裡面，所以表示式也可以這樣寫：<br><img src="https://i.imgur.com/dqeJb8a.png" alt></p><p>回傳了 3，但是我們並沒有使用等號運算子把這個值放入變數裡面。這個值可以是數值、字串或者物件。所以表示式也可以這樣寫</p><p><img src="https://i.imgur.com/csgpRQs.png" alt></p><h3 id="陳述句"><a href="#陳述句" class="headerlink" title="陳述句"></a>陳述句</h3><blockquote><p>當我們提到陳述句，陳述句表示「做某件事情」。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line"></span><br><span class="line">if(a===3)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當 <code>a===3</code> 就做某件事情。在 if 陳述句的括號內，必須放入表示式，因為會形成一個值，這樣這個陳述句才能運作。陳述句本身不會回傳任何值。</p><p>像是我不能這麼做，這不會有任何效用，因為沒有任何值會回傳給變數 b</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var b=if(a===3)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>結論：陳述句會做其他事情，表示式則回傳值</p></blockquote><h3 id="函式表示式與函式陳述句的差異"><a href="#函式表示式與函式陳述句的差異" class="headerlink" title="函式表示式與函式陳述句的差異"></a>函式表示式與函式陳述句的差異</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function greet() &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函式陳述句"><a href="#函式陳述句" class="headerlink" title="函式陳述句"></a>函式陳述句</h4><p>這是一個簡單的函式陳述句，在創造執行環境的時候，這個函式被放進記憶體中，但這只是陳述句，所以不會回傳任何的值，直到函式被呼叫執行。</p><p>雖然函式陳述句不會回傳任何值，但它會有提升 (hoisting) 現象，所以可以在任何地方取用它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">greet();</span><br><span class="line">function greet() &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函式表示式"><a href="#函式表示式" class="headerlink" title="函式表示式"></a>函式表示式</h4><p>宣告一個 anonymousGreet 變數並且使用等號運算子，然後在右側使用函式陳述句。</p><p>記得「函數就是物件」，所以「建立一個物件，並且設定它等於這個變數」，這個變數也就是它在記憶體中指向的位置。</p><p>我們已經有一個已經知道函式物件位址的變數 anonymousGreet ，所以等號右邊的陳述句可以改寫成這樣，稱為匿名函式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var anonymousGreet = function () &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Brtzuj1.png" alt></p><h3 id="如何觸發函式表示式"><a href="#如何觸發函式表示式" class="headerlink" title="如何觸發函式表示式"></a>如何觸發函式表示式</h3><p>我們需要指向那個物件，告訴它要執行程式，像這樣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anonymousGreet();</span><br></pre></td></tr></table></figure><p>因為變數已經知道函數記憶體的位址，所以只要加上 <code>()</code>，就可以觸發函式。</p><p>但是因為函式表示式的提升 (hoisting) 現象，造成一個值得注意的問題。如果我們把程式碼改寫成這樣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anonymousGreets();  </span><br><span class="line">var anonymousGreets = function() &#123;  </span><br><span class="line">  console.log(&apos;Hi&apos;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果變這樣，為什麼？<br><img src="https://i.imgur.com/wWwuPXa.png" alt></p><p>還記得當執行環境被創造，創造執行階段會把函式陳述句以及變數都放入記憶體，變數被賦予初始值 undefined ，然後逐行執行程式碼。</p><p>於是程式的第一行是「anonymousGreets();」，但此時仍未賦予變數值，變數的值仍然是 undefined 。自然的，錯誤便會告訴我們 undefined 不是函式，它沒辦法被使用 () 呼叫執行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var anonymousGreets = function() &#123;  </span><br><span class="line">  console.log(&apos;Hi&apos;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直到上述這行程式碼，anonymousGreets 變數的值才被賦予函式物件。</p><blockquote><p>所以函式表示式不受到提升 (hoisting) 影響。</p></blockquote><h3 id="傳入函式表示式做為參數"><a href="#傳入函式表示式做為參數" class="headerlink" title="傳入函式表示式做為參數"></a>傳入函式表示式做為參數</h3><p>記得我們說的函式是物件，函式表示式可以馬上創造函式物件，因此我們可延伸出以下寫法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function log(a)&#123;  </span><br><span class="line">  console.log(a);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(function()&#123;  </span><br><span class="line">  console.log(&apos;hi&apos;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我們立即創造了一個函式物件，在裡面寫了一些程式碼。然後把這個函式物件當成參數傳入 log 函式內</p><p><img src="https://i.imgur.com/Mxan84C.png" alt></p><p>不過這樣只是印出函式物件的內容而已，但透過這樣的觀察得知「一級函式可以很快地被創造、使用，且變數也可以設值成為一級函式」</p><p>我們結合上述這些並做些修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function log(a)&#123;  </span><br><span class="line">  a();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var anonymousGreets = function()&#123;  </span><br><span class="line">  console.log(&apos;hi&apos;);  </span><br><span class="line">&#125;  </span><br><span class="line">log(anonymousGreets);　// hi</span><br></pre></td></tr></table></figure><p>因為我們傳入 log 函式的參數為函式物件，所以變數 a 參照到了這個函式物件。同樣地，要呼叫執行函式僅需要加上 () 即可。</p><p>本例來看，我使用函式表示式，接著把這個函式傳入當作另一個函式的參數，這樣另一個函式就可以使用這個函式表示式，這就是我們提到的一級函式的觀念「可以將函式傳入別處」。</p><p>可以把函式給另一個函式，就像使用變數一樣，這樣的做法也稱為函式程式語言 ( functional programming )。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;了解函數就是物件後，接著要實際運用這個觀念。開始之前，我們要先了解函數陳述句 （Function Statements) 與函數表示式 (Function Expressions) 的用法差異。&lt;/p&gt;
&lt;h3 id=&quot;表示式&quot;&gt;&lt;a href=&quot;#表示式&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day26-函數就是物件</title>
    <link href="http://yoursite.com/2019/06/20/2019-06-20/"/>
    <id>http://yoursite.com/2019/06/20/2019-06-20/</id>
    <published>2019-06-19T16:00:00.000Z</published>
    <updated>2019-06-28T07:11:17.817Z</updated>
    
    <content type="html"><![CDATA[<p>在這堂課裡面，作者說明 JavaScript 當中一個重要的觀念「一級函數」（first class functions)，也提到函數也是一種物件 (functions are object)。</p><h3 id="一級函數-（First-class-functions"><a href="#一級函數-（First-class-functions" class="headerlink" title="一級函數 （First class functions)"></a>一級函數 （First class functions)</h3><p>一級函數是指說：你可以對別的型別像是物件、字串、數值、布林做的事情，都可以對函數做。</p><ul><li>你可以指派一個變數的值為函數</li><li>你可以把函數當做參數傳入另一個函數</li><li>可以用實體語法立刻創造函數。</li><li>函數就是物件，所以也可以擁有屬性</li></ul><p>一級函數可以改變你寫程式的方式，可以讓我們用一個完全不同的方法，解決你的問題。所以當我們說函數就是物件。函數物件長成什麼樣子？</p><h3 id="函數物件-（Functions-object"><a href="#函數物件-（Functions-object" class="headerlink" title="函數物件 （Functions object)"></a>函數物件 （Functions object)</h3><p>就像 JavaScript 其他物件一樣，它被存在記憶體裡面，它是一個特殊型態的物件，它具有有所有物件的特色，還有一些其他的屬性和方法。</p><ul><li><p>函數可以連結純值</p></li><li><p>連結名稱/值的配對</p></li><li><p>連結物件</p></li><li><p>連結其他函數。</p></li><li><p>可以是匿名的</p></li><li><p>特殊屬性：JavaScript 的函數不一定要有名稱，一個函數可以是匿名的，表示它沒有名字</p></li><li><p>特殊屬性：程式屬性，你寫程式碼的位置，會成為函數物件的特殊屬性，這個屬性是特別的，因為他是可以呼叫的 (invocable)，代表可以執行這個函數的程式。</p></li></ul><p>這個函數模式相當重要，我們必須把函數想像成物件，而它的程式碼是那個物件的屬性之一。函數還包含許多其他東西。它可以被移動、複製、傳入任何一個東西，就像任何物件、值、字串、或數字一樣。</p><h3 id="實際例子"><a href="#實際例子" class="headerlink" title="實際例子"></a>實際例子</h3><p>這是一個函數，但在 JavaScript裡面，函數就是物件，所以我們可以用 <code>.</code> 符號創造屬性。我們新增了一個函數的屬性，這在其他程式語言裡是不可能的，但在 JavaScript 函數就是物件，所以我們查詢這個函數的時候，會得出函數的文字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function greet()&#123;</span><br><span class="line">console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet.language=&apos;english&apos;;</span><br></pre></td></tr></table></figure><p>如果直接這樣寫，會得到函式的文字內容，在這個範例中這樣子沒什麼用。所以必須使用點運算子取得函式物件的屬性，就像之前在一般物件做的那樣：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(greet);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/pM4yivM.png" alt></p><p>但是如果我試圖找出函數的屬性，用<code>.</code> 運算子就可以找函數的屬性了，就像之前在一般物件做的那樣。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(greet.language);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/DXWZlEU.png" alt></p><p>所以當建立函數的時候，實際上看起來像是這樣<br><img src="https://i.imgur.com/JCLbYmf.png" alt></p><p>以本例來說：</p><ul><li>我建立了一個名稱為 greet 的函數物件</li><li>greet 函數物件具有程式屬性，因為我有寫程式碼在裡面</li><li>我可以再 greet 後面加上括號，呼叫 greet 函式並執行</li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>這個例子說明了，函式只是一種特殊物件，它有一般物件的特性之外，還有自身的特殊屬性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在這堂課裡面，作者說明 JavaScript 當中一個重要的觀念「一級函數」（first class functions)，也提到函數也是一種物件 (functions are object)。&lt;/p&gt;
&lt;h3 id=&quot;一級函數-（First-class-functions
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day25 - JSON 與物件實體</title>
    <link href="http://yoursite.com/2019/06/19/2019-06-19/"/>
    <id>http://yoursite.com/2019/06/19/2019-06-19/</id>
    <published>2019-06-18T16:00:00.000Z</published>
    <updated>2019-06-28T07:11:10.678Z</updated>
    
    <content type="html"><![CDATA[<p>這一節要繼續學習物件實體，還有一些使用 JSON 的時候經常遇到的誤解。JSON (avaScript物件表示法；JavaScript Object Notation) ，受到 JavaScript 物件實體語法啟發，看起來和物件實體語法非常類似，所有常常被誤認為是同一個東西，所以遇到同樣的錯誤。</p><h3 id="JSON-avaScript物件表示法；JavaScript-Object-Notation"><a href="#JSON-avaScript物件表示法；JavaScript-Object-Notation" class="headerlink" title="JSON (avaScript物件表示法；JavaScript Object Notation)"></a>JSON (avaScript物件表示法；JavaScript Object Notation)</h3><p>如果我建立一個物件實體，假設它有很多屬性，這在 JavaScript 是完全有效的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var objectLiteral=&#123;</span><br><span class="line">firstname:&apos;Mary&apos;,</span><br><span class="line">isAProgrammer:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/5k2Kq7p.png" alt></p><p>由於網路資料的傳輸格式很多，但是處理下載的時候，下載速度和使用的頻寬有關。像是 XML，會有一些額外的符號，讓資料變得很龐大，只是傳送一點資料就必須要傳 2 次屬性名稱。資料越多浪費越多頻寬。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;obeject&gt;</span><br><span class="line">&lt;firstname&gt;Mary&lt;/firstname&gt;</span><br><span class="line">&lt;/object&gt;</span><br></pre></td></tr></table></figure><p>所以人們開始改用 JSON 這種資料傳輸格式，這只是一種資料字串，雖然看起來很像物件實體語法，可是有一些小差異。例如屬性需要被包在引號裡面。以下是一個有效的物件實體語法，因為在 JavaScript 的物件實體語法裡面，屬性可以選擇被包在引號裡面。但在 JSON 裡面，屬性「<strong>一定</strong>」要被包在引號裡面。所以如果有解析 JSON 的程式，像是 PHP 或 ASP.NET 的伺服器技術，就預期屬性一定要被包含在括號裡面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;firstname&quot;:&quot;Mary&quot;,</span><br><span class="line">&quot;isAProgrammer&quot;:&quot;true&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-內建轉換-JSON-格式的功能"><a href="#JavaScript-內建轉換-JSON-格式的功能" class="headerlink" title="JavaScript 內建轉換 JSON 格式的功能"></a>JavaScript 內建轉換 JSON 格式的功能</h3><p>技術上，JSON 是物件實體語法的子集合，代表只要在 JSON 有效的，在物件實體語法就是有效的。但不是所有物件實體語法在 JSON 格式都是有效的。所以 JSON 的規則比較嚴格。所以 JSON (avaScript物件表示法；JavaScript Object Notation) 並不是 JavaScript 的一部分，但因為它可以簡單讓 JavaScript 解析它，所以相當受到歡迎，所以 JavaScript 有一些內建的功能可以轉換這 2 者。可以讓任何物件，變成 JSON 字串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var objectLiteral=&#123;</span><br><span class="line">firstname:&apos;Mary&apos;,</span><br><span class="line">isAProgrammer:true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(objectLiteral));</span><br></pre></td></tr></table></figure><p>也可以再把 JSON 字串轉換回物件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var jsonValue = JSON.parse(&apos;&#123; &quot;firstname&quot;: &quot;Mary&quot;, &quot;isAProgrammer&quot;: true &#125;&apos;);</span><br><span class="line">console.log(jsonValue);</span><br></pre></td></tr></table></figure><p>JSON 和物件實體看起來很像，但其實 JSON 的對於屬性使用括號的規則比較嚴格。不過 JavaScript 有讓人在兩者之間轉換的功能，因此也很容易轉換從瀏覽器下載的資料。或者像是當 Node.js 在伺服器端使用 JavaScript 的時候，接收 JSON 格式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一節要繼續學習物件實體，還有一些使用 JSON 的時候經常遇到的誤解。JSON (avaScript物件表示法；JavaScript Object Notation) ，受到 JavaScript 物件實體語法啟發，看起來和物件實體語法非常類似，所有常常被誤認為是同一個東
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day24-框架小叮嚀：偽裝命名空間</title>
    <link href="http://yoursite.com/2019/06/16/2019-06-16/"/>
    <id>http://yoursite.com/2019/06/16/2019-06-16/</id>
    <published>2019-06-15T16:00:00.000Z</published>
    <updated>2019-06-28T07:11:04.352Z</updated>
    
    <content type="html"><![CDATA[<p>這一節是關於打開知名的框架原始碼經常會看到的東西。前面討論的那些主題，像是運算子、物件實體語法後，現在要學習偽裝命名空間 （faking namespaces)。</p><h3 id="變數之間的衝突"><a href="#變數之間的衝突" class="headerlink" title="變數之間的衝突"></a>變數之間的衝突</h3><p>在現代的程式語言，命名空間是變數和函數的容器，只是一個包裝物、一個容器。通常這是用來分開那些有著相同名稱的函數和變數。</p><p>在 JavaScript 裡，因為物件的本質，不需要命名空間這個功能，所以並沒有命名空間，但可以假裝。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var greet =&apos;Hello&apos;;</span><br><span class="line">var greet =&apos;Hola&apos;;</span><br><span class="line"></span><br><span class="line">console.log(greet);</span><br></pre></td></tr></table></figure><p>有 2 個同樣名稱的變數，我們查詢它會得到的結果是什麼？在創造階段的變數會被設定為 <code>undefined</code> ，接著這些程式會逐行的依照順序執行，所以查詢變數的結果會是 <code>hola</code>。</p><p><img src="https://i.imgur.com/RYsiSp7.png" alt></p><p>我們可以想像這兩個 <code>greet</code> 變數，被創造在兩個不同的 JavaScript 檔案中，一個是英文的打招呼，另一個框架是西文的打招呼。</p><p>這就會有問題，因為我們知道兩者都會設定它們的值。以這邊為例就是全域物件，然後覆寫另一個。這時命名空間就可以幫助我們，因為命名空間可以有一個容器裝英文問候語，另一個容器裝西文問候語。雖然 JavaScript 裡面沒有命名空間，但可以用物件做到。</p><h3 id="以物件偽裝命名空間"><a href="#以物件偽裝命名空間" class="headerlink" title="以物件偽裝命名空間"></a>以物件偽裝命名空間</h3><p>我們可以建立物件成為屬性的容器避免這種衝突，而方法則是我們想要使用的東西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//創造物件，使用物件實體語法</span><br><span class="line">var english=&#123;&#125;</span><br><span class="line">var spanish=&#123;&#125;</span><br><span class="line"></span><br><span class="line">english.greet=&apos;Hello&apos;;</span><br><span class="line">spanish.greet=&apos;Hola&apos;;</span><br></pre></td></tr></table></figure><p>這兩變數雖然都叫 <code>greet</code> ，變數已經成為容器，確保我不會和其他 JavaScript 檔案，因為相同的全域命名空間而相互衝突覆寫。</p><p><img src="https://i.imgur.com/o07bfsV.png" alt></p><h3 id="深入運用"><a href="#深入運用" class="headerlink" title="深入運用"></a>深入運用</h3><p>還可以進一步把不同的容器物件分級，例如我想要 english 有打招呼的方法的命名空間在裡面，我不能直接輸入 <code>english.greetings.greet=&#39;Hello&#39;;</code></p><p><img src="https://i.imgur.com/rj1OwBU.png" alt></p><p>要記住 <code>.</code> 運算子是左相依性，表示左邊會先被執行。當<code>.</code> 運算子被呼叫，它會先在 <code>english</code> 裡面找<code>greetings</code> 變數，因為這是空的，所以找不到，而它會認定 <code>undefined</code> 根本不是一個物件，所以它不會在裡面找到 <code>greet</code>。必須再創造一個物件，在記憶體裡有一個物件，然後再連結<code>greet</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var english = &#123;&#125;;</span><br><span class="line">var spanish = &#123;&#125;;</span><br><span class="line">english.greetings = &#123;&#125;;</span><br><span class="line">english.greetings.greet = &apos;Hello&apos;;</span><br><span class="line">spanish.greet = &apos;Hola&apos;;</span><br><span class="line"></span><br><span class="line">console.log(english);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/aqEMBm7.png" alt></p><p>或者可以用物件實體語法初始化它，讓 <code>greetings</code> 裡面有另一個物件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var english = &#123;</span><br><span class="line">    greetings:&#123;</span><br><span class="line">        basic:&apos;Hello&apos;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">var spanish = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">spanish.greet = &apos;Hola&apos;;</span><br><span class="line"></span><br><span class="line">console.log(english);</span><br></pre></td></tr></table></figure><p>物件實體語法可以快速建立，沒有得到 <code>undefined</code> 的錯誤，因為它們都已經被創造了。</p><p><img src="https://i.imgur.com/flFBlte.png" alt></p><p>我們可以用以上任何一種方式，但重點是已經在容器物件裡，包含函數、方法、變數、屬性和其他物件。</p><p>JavaScript 的偽裝命名空間，只是為了那些我們忘了別人已經寫好或自己寫好的程式碼，藉此分開程式碼和其他在全域命名空間的物件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一節是關於打開知名的框架原始碼經常會看到的東西。前面討論的那些主題，像是運算子、物件實體語法後，現在要學習偽裝命名空間 （faking namespaces)。&lt;/p&gt;
&lt;h3 id=&quot;變數之間的衝突&quot;&gt;&lt;a href=&quot;#變數之間的衝突&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day23-物件與實體</title>
    <link href="http://yoursite.com/2019/06/15/2019-06-15-2/"/>
    <id>http://yoursite.com/2019/06/15/2019-06-15-2/</id>
    <published>2019-06-14T16:00:00.000Z</published>
    <updated>2019-06-28T07:10:57.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="建立物件的捷徑"><a href="#建立物件的捷徑" class="headerlink" title="建立物件的捷徑"></a>建立物件的捷徑</h3><p>在 JavaScript 裡面，完成一件事情還有許多方式，還記得宣告 new object 並非建立物件的最好方式，有一種建立物件的捷徑是利用大括號 <code>{}</code> 的物件實體語法（object literal syntax)，得到的結果會和 new object 一樣。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;&#125;;</span><br><span class="line">console.log(person);</span><br></pre></td></tr></table></figure><p>如果我列印出 person，會看到一個空物件，就像 new object 一樣，這是比較快的作法。但注意這不是運算子，這是當 JavaScript 在解析語法時，看到大括號，但這個大括號不是用在 if 條件式或者迴圈時，它就會假設你在創造一個物件。</p><p><img src="https://i.imgur.com/RL1V3u9.png" alt></p><p>我們還可以初始化物件，可以同時在這個大括號裡面建立屬性和方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//命名屬性與方法，並賦值。以逗號增加另一個名稱/值的配對</span><br><span class="line">var person=&#123;</span><br><span class="line">firstname:&apos;Tony&apos;,</span><br><span class="line">lastname:&apos;Alicea&apos;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(person);</span><br></pre></td></tr></table></figure><p>物件有 2 個屬性<br><img src="https://i.imgur.com/fJpq5ku.png" alt></p><p>這跟建立 <code>var person = new Object()</code> 再依序一個一個增加屬性 <code>person.firstname = &#39;Tony&#39;;</code> 、<code>person.lastname=&#39;Alicea&#39;;</code> 一樣</p><p>物件裡還可以包含另一個物件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//命名屬性與方法，並賦值。以逗號增加另一個名稱/值的配對</span><br><span class="line">var person=&#123;</span><br><span class="line">firstname:&apos;Tony&apos;,</span><br><span class="line">lastname:&apos;Alicea&apos;,</span><br><span class="line">address:&#123;</span><br><span class="line">street:&apos;123 Main St.&apos;,</span><br><span class="line">City:&apos;NY&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以當 JavaScript 的語法解析器，執行程式碼的時候，遇到大括號的區塊，它會當成同一行程式碼，並且知道你要建立物件。所以我可以在任何地方新增物件、定義屬性和方法。這比一次定義一個屬性還分成很多行，要快上許多。</p><h3 id="建立函數的捷徑"><a href="#建立函數的捷徑" class="headerlink" title="建立函數的捷徑"></a>建立函數的捷徑</h3><p>當我們了解這個捷徑的處理方式後，就可以快速的建立物件和變數。因此我們也可以快速建立函數。</p><p>有一個打招呼的函數，包含物件，函數需要知道 firstname 屬性，才能打招呼。呼叫 <code>greet</code>  並傳入 <code>Tony</code>。 物件再記憶體裡，被傳入函數中，而且可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function greet(person)&#123;</span><br><span class="line">console.log(&apos;Hi&apos;+person.firstname);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">greet(person);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/SHxajWR.png" alt></p><h3 id="同時建立函數與物件"><a href="#同時建立函數與物件" class="headerlink" title="同時建立函數與物件"></a>同時建立函數與物件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var person=&#123;</span><br><span class="line">firstname:&apos;Tony&apos;,</span><br><span class="line">lastname:&apos;Alicea&apos;,</span><br><span class="line">address:&#123;</span><br><span class="line">street:&apos;123 Main St.&apos;,</span><br><span class="line">City:&apos;NY&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function greet(person)&#123;</span><br><span class="line">console.log(&apos;Hi&apos;+person.firstname);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">greet(person);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greet(&#123;</span><br><span class="line">firstname:&apos;Mary&apos;,</span><br><span class="line">lastname:&apos;Doll&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>用逗號區隔名稱/值配對，然後名稱和值用冒號區隔，再用大括號包起來。JavaScript 可以用物件實體語法，在看到函數的時候，檢查你需要傳入什麼，當它看到大括號的時候，知道你在建立物件，所以建立完就傳入這個物件。這和傳入數值和字串沒有差別。在這個情況下，我同時建立物件，我也可以把它當作一般變數使用。</p><p>在這個情況下，我傳入 <code>person</code> 這個變數，並包含 firstname 屬性，然後再次呼叫函數，裡面包含另一個物件。這個物件在呼叫時同時被建立，然後 firstname 是 Mary。</p><p><img src="https://i.imgur.com/cZgGlwg.png" alt></p><h3 id="混合語法"><a href="#混合語法" class="headerlink" title="混合語法"></a>混合語法</h3><p>用<code>person</code> 這個變數，然後新增一個屬性。用 <code>.</code> 點運算子，而不是物件實體語法，然後再用物件實體語法定義物件。這樣就能結合 2 種語法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.address=&#123;</span><br><span class="line">street:&apos;123 Second St.&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>為什麼可以這樣做？因為程式碼並不是真的直接被處理，它會先被 JavaScript 轉化成電腦能懂的東西。所以不論物件實體語法或用點運算子建立物件，都是一樣的，對 JavaScript 底層來說，它就是在建立物件、屬性和方法到記憶體裡面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;建立物件的捷徑&quot;&gt;&lt;a href=&quot;#建立物件的捷徑&quot; class=&quot;headerlink&quot; title=&quot;建立物件的捷徑&quot;&gt;&lt;/a&gt;建立物件的捷徑&lt;/h3&gt;&lt;p&gt;在 JavaScript 裡面，完成一件事情還有許多方式，還記得宣告 new object 並非建立
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day22-物件與「點」</title>
    <link href="http://yoursite.com/2019/06/15/2019-06-15-1/"/>
    <id>http://yoursite.com/2019/06/15/2019-06-15-1/</id>
    <published>2019-06-14T16:00:00.000Z</published>
    <updated>2019-06-28T07:10:50.988Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，物件與函式兩者是非常相關的，它們在很多情況下幾乎是一樣的，讓我們從本篇之後來談談物件與函式，但在這之前得先了解本篇標題「物件與點」</p><h3 id="物件與「點」"><a href="#物件與「點」" class="headerlink" title="物件與「點」"></a>物件與「點」</h3><p>一個物件是被賦值的名稱與值的組合（Name/Value），但是這個值是什麼？所以物件可以有一個原始的設定叫做屬性 (primitive property)，例如前面提到的純值、布林或字串；或者物件可以再連結另外的物件，值可以是另一個「名稱/值」的組合或物件。物件裡還可以有函數，這種情況稱為「方法」(method)。</p><p><img src="https://i.imgur.com/RMIVyvR.png" alt></p><h3 id="JavaScript-怎麼取得物件的屬性和方法？"><a href="#JavaScript-怎麼取得物件的屬性和方法？" class="headerlink" title="JavaScript 怎麼取得物件的屬性和方法？"></a>JavaScript 怎麼取得物件的屬性和方法？</h3><p>在記憶體裡面，核心物件會有一個記憶體的位址空間，供物件參照到這些電腦記憶體中的屬性和方法，找到這些屬性和方法的所在。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var person = new Object();</span><br><span class="line">person[&quot;firstname&quot;] = tony;</span><br></pre></td></tr></table></figure><p>在 JavaScript 當中，取得屬性和方法有兩種方式。以上是其中一種，利用中括號方式，稱為「計算取用成員」（computer member access）的運算子。</p><p>在中括號內放進值的名稱，這是要放進記憶體的東西，這時它還不存在，所以我們令它等於 <code>tony</code>。這會在記憶體中創造空間，並且有個名稱叫做<code>firstname</code> 的東西。然後 <code>person</code> 物件就能參考到 <code>firstname</code> 在記憶體內的位置，並且知道<code>firstname</code> 的值是一個字串，這就是取得物件屬性的一種方法。</p><p>這個運算子好用的地方是可以用變數修改物件的屬性名稱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var person = new Object();  </span><br><span class="line">person[&apos;firstName&apos;] = &apos;Tony&apos;;  </span><br><span class="line">person[&apos;lastName&apos;] = &apos;Alicea&apos;;  </span><br><span class="line">var firstNameProperty = &apos;firstName&apos;;  </span><br><span class="line">console.log(person);</span><br><span class="line">console.log(person[firstNameProperty]);</span><br></pre></td></tr></table></figure><p>印出物件看看：</p><p><img src="https://i.imgur.com/2undtXe.png" alt></p><p>這個方法有時可以在框架中看到，因為可以決定要取用哪種屬性，但比較起來還是 <code>.</code> 運算子比較方便。</p><h3 id="使用-運算子"><a href="#使用-運算子" class="headerlink" title="使用 . 運算子"></a>使用 . 運算子</h3><p><code>.</code> 運算子的方式比較常見且簡單</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(person.firstName);</span><br><span class="line">// tony</span><br></pre></td></tr></table></figure><p>也可以用 <code>.</code> 運算子創立物件的新屬性名稱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.address.street = &apos;1111. Main St. &apos;;</span><br></pre></td></tr></table></figure><p>簡單來說這個點就和中括號一樣，是「成員取用」運算子，這個成員指的是物件的成員。所以這些運算子會幫我們找到物件的成員，像是方法和屬性。</p><h3 id="物件內的物件"><a href="#物件內的物件" class="headerlink" title="物件內的物件"></a>物件內的物件</h3><p>前面提到物件可以內含另一個物件，這也可以用 . 運算子來做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var person = new Object();  </span><br><span class="line">person[&apos;firstName&apos;] = &apos;Tony&apos;;  </span><br><span class="line">person[&apos;lastName&apos;] = &apos;Alicea&apos;;  </span><br><span class="line">var firstNameProperty = &apos;firstName&apos;;  </span><br><span class="line">console.log(person);</span><br><span class="line">console.log(person[firstNameProperty]);  </span><br><span class="line">person.dog=&quot;Paul&quot;;</span><br><span class="line">console.log(person.dog);</span><br><span class="line">person.address=new Object;</span><br><span class="line">person.address.street = &apos;1111. Main St. &apos;;</span><br><span class="line">console.log(person.address.street);</span><br><span class="line">// 也可以這樣寫 console.log(person[&apos;address&apos;][&apos;street&apos;]);</span><br></pre></td></tr></table></figure><p>再次輸出<code>person</code>物件觀察，可以發現新增的物件被包覆在 <code>person</code> 物件內了。<br><img src="https://i.imgur.com/YaXuy4F.png" alt></p><p>另外程式碼中的「person.address.street= ‘111 Main St.’;」因為用到了兩次運算子，所以我們查一下運算子的優先性與相依性得知，「.」運算子為左相依性，因此會從左邊開始運算到右邊。</p><p>白話來說就是會先到 person 物件內找到屬性物件 address ， 然後再從 address 內找到 street 屬性並且設定字串值。</p><h4 id="附註"><a href="#附註" class="headerlink" title="附註"></a>附註</h4><p>物件在記憶體中是「名稱/值」的組合，它也能夠包含不同的屬性配對，像是字串、布林，也可以包含函式（在此稱為方法），但本篇還不會討論到方法，在此之前有其他部分需先了解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 JavaScript 中，物件與函式兩者是非常相關的，它們在很多情況下幾乎是一樣的，讓我們從本篇之後來談談物件與函式，但在這之前得先了解本篇標題「物件與點」&lt;/p&gt;
&lt;h3 id=&quot;物件與「點」&quot;&gt;&lt;a href=&quot;#物件與「點」&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 30 Days AJAX Type Ahead</title>
    <link href="http://yoursite.com/2019/06/07/2019-06-07/"/>
    <id>http://yoursite.com/2019/06/07/2019-06-07/</id>
    <published>2019-06-06T16:00:00.000Z</published>
    <updated>2019-06-28T07:10:45.510Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用-Fetch-API-取得數據資料"><a href="#利用-Fetch-API-取得數據資料" class="headerlink" title="利用 Fetch API 取得數據資料"></a>利用 Fetch API 取得數據資料</h3><p>利用 fetch 取得數據資料的時候會先回傳 promise 給我們。Promise 是一個根據附加給他的 Callback 回傳的物件，以取代傳遞 Callback 到這個函數。它回傳的還不是我們要的資料。</p><p>查詢一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const prom = fetch(endpoint);</span><br><span class="line">console.log(prom);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/qhO5Wtw.png" alt></p><h3 id="關於-promise"><a href="#關於-promise" class="headerlink" title="關於 promise"></a>關於 promise</h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noopener">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Using_promises </a></p><p>第一個回傳的是一個 <code>readableStream</code><br><img src="https://i.imgur.com/gUlw0Js.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const endpoint =&apos;https://gist.githubusercontent.com</span><br><span class="line">/Miserlou/c5cd8364bf9b2420bb29/raw/</span><br><span class="line">2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/</span><br><span class="line">cities.json&apos;;</span><br><span class="line"></span><br><span class="line">const cities = [];</span><br><span class="line">fetch(endpoint).then(blob =&gt; blob.json()).then(data =&gt; console.log(data));</span><br></pre></td></tr></table></figure><p>在上面可以看到我們已經抓取到資料，但是要怎麼把它一個一個參數個別放進陣列裡呢？ 這裡運用的是ES6的展開運算符<code>...</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(endpoint).then(blob =&gt; blob.json()).then(data =&gt; cities.push(...data));</span><br></pre></td></tr></table></figure><h3 id="建立規式"><a href="#建立規式" class="headerlink" title="建立規式"></a>建立規式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let regex = new RegExp(wordToMatch, &apos;gi&apos;)</span><br></pre></td></tr></table></figure><ul><li>第一個參數是正規式的內容</li><li>第二個參數是一個flag旗標<ul><li>global search，會去搜尋整份文件</li><li>i 表示 case insensitive，也就是不去區分大小寫</li></ul></li></ul><h3 id="利用正規式找到內容"><a href="#利用正規式找到內容" class="headerlink" title="利用正規式找到內容"></a>利用正規式找到內容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function findMatch(wordToMatch, cities) &#123;</span><br><span class="line">      return cities.filter(place =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        const regex = new RegExp(wordToMatch, &apos;gi&apos;);</span><br><span class="line">        return place.city.match(regex) || place.state.match(regex)</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="利用正規式取代內容"><a href="#利用正規式取代內容" class="headerlink" title="利用正規式取代內容"></a>利用正規式取代內容</h3><p>replace() 方法會傳回一個新字串，此新字串是透過將原字串與 pattern 比對，但不會改變原本的字串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const regex = new RegExp(this.value, &apos;gi&apos;);</span><br><span class="line"></span><br><span class="line">const cityName = place.city.replace(regex, </span><br><span class="line">`&lt;span class=&apos;hl&apos;&gt;$&#123;this.value&#125;&lt;/span&gt;`);</span><br><span class="line"></span><br><span class="line">const stateName = place.state.replace(regex, </span><br><span class="line">`&lt;span class=&apos;hl&apos;&gt;$&#123;this.value&#125;&lt;/span&gt;`);</span><br></pre></td></tr></table></figure><h3 id="change-事件和keyup-事件"><a href="#change-事件和keyup-事件" class="headerlink" title="change 事件和keyup 事件"></a>change 事件和keyup 事件</h3><ul><li>keyup 事件 會在任何元素值改變的時候被出發（例如每打一個字都會觸發一次）</li><li>change event 則是會在有元素值改變，且該元素脫離 focus 狀態時才觸發</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">searchInput.addEventListener(&apos;change&apos;, displayMatches);</span><br><span class="line">searchInput.addEventListener(&apos;keyup&apos;, displayMatches);</span><br></pre></td></tr></table></figure><h3 id="完成品"><a href="#完成品" class="headerlink" title="完成品"></a>完成品</h3><p><a href="https://codepen.io/Shengzhi/pen/oRVqYa" target="_blank" rel="noopener">https://codepen.io/Shengzhi/pen/oRVqYa</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;利用-Fetch-API-取得數據資料&quot;&gt;&lt;a href=&quot;#利用-Fetch-API-取得數據資料&quot; class=&quot;headerlink&quot; title=&quot;利用 Fetch API 取得數據資料&quot;&gt;&lt;/a&gt;利用 Fetch API 取得數據資料&lt;/h3&gt;&lt;p&gt;利用
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day21-框架小叮嚀：預設值</title>
    <link href="http://yoursite.com/2019/06/06/2019-06-06-3/"/>
    <id>http://yoursite.com/2019/06/06/2019-06-06-3/</id>
    <published>2019-06-05T16:00:00.000Z</published>
    <updated>2019-06-28T07:10:39.134Z</updated>
    
    <content type="html"><![CDATA[<p>有時候我們會同時在專案匯入好幾個框架</p><p><img src="https://i.imgur.com/HuW7aRJ.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//在 lib1.js設定一個變數</span><br><span class="line"></span><br><span class="line">var libraryName = &quot;lib1&quot;;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//在 lib2.js設定一個同樣名稱的變數</span><br><span class="line">var libraryName = &quot;lib1&quot;;</span><br></pre></td></tr></table></figure><p>當我們回到 app.js 查詢 console.log的時候，這時三個 script 標籤並不會創造新的執行環境，而是直接把程式碼堆在對方上面，然後執行所有的 JavaScript 檔案，好像它們是在同一個檔案裡，在產生檔案的時候，會結合和最小化 JavaScript 程式成為一個檔案，所以讓這三個檔案不互相衝突很重要。</p><p>lib1 和 lib2  都被當成是全域執行環境裡的全域變數，所以宣告 libraryName 在瀏覽器裡會連結到 window 物件，第二個變數則會取代它。可能我們因此不小心讓框架相互衝突了。</p><p>所以我們可以回到 lib2 檢查 libraryName 是否已經在全域執行環境、全域變數裡面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.libraryName = window.libraryName || &quot;lib2&quot;;</span><br></pre></td></tr></table></figure><p>如果在框架的原始碼裡看到這樣一行程式碼，這是在定義框架的物件或函數，<br>此處在檢查是否已經有一個框架已經在全域執行環境裡有一個在 window 上的全域變數，如果有，就不做任何事情。如果沒有就用 <code>||</code> 運算子設定預設值，因為如果沒有被任何人設值，就會變成 undefined。這樣如果那個名稱已經存在，也不會影響到其它東西。<strong>這樣的一行程式碼，檢查的是全域命名空間（globe namespace)</strong>，看是否有重複的東西，所以它不會造成衝突，或覆蓋它。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有時候我們會同時在專案匯入好幾個框架&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HuW7aRJ.png&quot; alt&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>calc()</title>
    <link href="http://yoursite.com/2019/06/06/2019-06-06-2/"/>
    <id>http://yoursite.com/2019/06/06/2019-06-06-2/</id>
    <published>2019-06-05T16:00:00.000Z</published>
    <updated>2019-06-28T06:29:57.739Z</updated>
    
    <content type="html"><![CDATA[<p>calc() 這個 function 需要傳入 1 個加減乘除的運算式，在設定 width、height 這種 <length> 相關的屬性時， 在不同單位間也可以進行運算，如剛剛上面的範例：width: calc(100% - 50px);。calc() 的運算式一樣是按照先乘除後加減進行計算，如果需要進行複雜的運算，在 calc() 裡面也可以再加入括號 ()，就可以設為括號先決裡面的先算。</length></p><ul><li>+：加</li><li>-：減</li><li>*：乘。其中一個運算參數必須是數字 (number)</li><li>/：除。除數必須是數字，除數不可為零，會造成 HTML 解析錯誤。</li></ul><p>必須注意在使用 + 和 - 的時候，在前後一定要加上空白，不然會被誤為是給了個負值。* 和 / 可以不用加，但為了格式統一方便和閱讀建議還是加一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width: calc(50% + 8px)</span><br><span class="line">/* 意思是 50% 的寬度 + 上 8px */</span><br><span class="line">width: calc(50% + -8px)</span><br><span class="line">/* 意思是 50% 的寬度 + 上 -8px，也等於 &apos;50% - 8px&apos; */</span><br></pre></td></tr></table></figure><h3 id="Example-應用範例"><a href="#Example-應用範例" class="headerlink" title="Example 應用範例"></a>Example 應用範例</h3><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>calc() 可以用來定位，如下面所設定的 CSS，就能作出一個滿版的藍色 banner 區塊有固定 40px 的邊距，也是一種將區塊置中的寫法。</p><p><img src="https://i.imgur.com/2XfqtR9.png" alt></p><h4 id="根據父層容器尺寸自動調整尺寸"><a href="#根據父層容器尺寸自動調整尺寸" class="headerlink" title="根據父層容器尺寸自動調整尺寸"></a>根據父層容器尺寸自動調整尺寸</h4><p>設定 width 或 height 屬性使用 calc() 計算的數字是 100% 的時候，會自動去抓父層容器的尺寸。例如：做 autocomplete 的時候，希望在輸入框下，出現和輸入框等寬的列表：</p><p>由於 CSS 在加上 border、padding 的時候都是從原本設定得尺寸再往外加，所以長出來的東西看起來的尺寸會比原本設定的 width 還要大，因此要做到 ul 和 input 等寬的結果，在 input 加上的 padding 和 border 在算 ul 的 width 的時候也要幫他算進去，所以 ul { width: calc(100% + 1rem + 1rem + 2px + 2px); } 指的是：符合父容器的 100% 寬度，加上 input 的 padding-left: 1rem 和 padding-right: 1rem，再加上 border-left: 2px 和 border-right: 2px。</p><p>用 calc() 計算尺寸非常方便，即使不同單位也沒有問題。</p><p><img src="https://i.imgur.com/8kRhxLf.png" alt></p><h4 id="將-calc-巢狀包入-CSS-變數中"><a href="#將-calc-巢狀包入-CSS-變數中" class="headerlink" title="將 calc() 巢狀包入 CSS 變數中"></a>將 calc() 巢狀包入 CSS 變數中</h4><p>只要用括號 () 包好包滿，就可以無限次使用 calc() 方法，會一層一層從括號裡面計算出來。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.foo &#123;</span><br><span class="line">  --widthA: 100px;</span><br><span class="line">  --widthB: calc(var(--widthA) / 2);</span><br><span class="line">  --widthC: calc(var(--widthB) / 2);</span><br><span class="line">  width: var(--widthC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面這段程式碼裡面展開所有變數之後 widthC 就等於：</p><p>–widthC: calc( calc( 100px / 2) / 2)</p><p>所以 .foo 的 width 最後算出來的值就是 25px。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;calc() 這個 function 需要傳入 1 個加減乘除的運算式，在設定 width、height 這種 &lt;length&gt; 相關的屬性時， 在不同單位間也可以進行運算，如剛剛上面的範例：width: calc(100% - 50px);。calc() 的運算式一樣是按
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>let 與 const 的差異</title>
    <link href="http://yoursite.com/2019/06/06/2019-06-06-1/"/>
    <id>http://yoursite.com/2019/06/06/2019-06-06-1/</id>
    <published>2019-06-05T16:00:00.000Z</published>
    <updated>2019-06-28T06:29:50.956Z</updated>
    
    <content type="html"><![CDATA[<p>let 與 const 用來宣告區塊裡的變數。區塊＝{}。</p><p>const 是用來宣告不能修改的唯讀變數，不能被變更的變數，例如 url 網址。 但是如果const宣告的變數是一個陣列或物件，則裡面的內容就能夠被修改。為了避免這種狀況，可以利用以下組合式語法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const obj =&#123;</span><br><span class="line">url:&apos;http://xx.com&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.freeze(obj);</span><br></pre></td></tr></table></figure><p>要注意以下用法：</p><p>一、向上提昇</p><p>var 有向上提昇的特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);</span><br><span class="line">var a = 3;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/JyQieMi.png" alt></p><p>但是const 與 let 不具備這種特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);</span><br><span class="line">let a = 3;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/E2O0ewE.png" alt></p><p>二、同個區塊上不能重複命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var a = 3;</span><br><span class="line">var a=4;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/AcOtZb7.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let a = 3;</span><br><span class="line">let a=4;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/VtV0tHG.png" alt></p><p>三、無法繼承到全域變數</p><p>let與const在ES6就是為了避免var會干擾全域變數的特性，因此不能使用在全域變數。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let a = 3;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/8hZizyC.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var b = 3;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/MXAMKvG.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;let 與 const 用來宣告區塊裡的變數。區塊＝{}。&lt;/p&gt;
&lt;p&gt;const 是用來宣告不能修改的唯讀變數，不能被變更的變數，例如 url 網址。 但是如果const宣告的變數是一個陣列或物件，則裡面的內容就能夠被修改。為了避免這種狀況，可以利用以下組合式語法：&lt;/
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://yoursite.com/2019/06/05/2019-06-05/"/>
    <id>http://yoursite.com/2019/06/05/2019-06-05/</id>
    <published>2019-06-04T16:00:00.000Z</published>
    <updated>2019-06-28T06:29:35.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>AJAX並非是一個技術（Technology），而是一種網站設計的架構（Architecture），雖然主要以JavaScript與XML為主，但還包括其它成員，也就是CSS、DOM（Document Object Model）與HTML等，特別是XMLHttpRequest元件，使AJAX能達到非同步資料交換的目的。</p><p>在Jesse Garrett的文章中，對AJAX的定義如下：</p><p>● 使用XHTML與CSS作為展現標準<br>● 使用DOM作為動態顯示與互動<br>● 使用XML與XSLT作為資料交換與運用<br>● 使用XMLHttpRequest作為非同步的資料回饋<br>● 使用JavaScript結合以上所有結果</p><p>採用AJAX，用戶端瀏覽或使用網頁時，如同在個人電腦中的應用程式一樣，不會感覺到網頁與後端伺服器交談過程，以及資料刷新的細節，頁面也不需要換頁，資料的交換等動態動作隱藏在背景執行。簡單地說，AJAX網頁有兩種主要特性：向伺服器發出請求，以及回傳結果時，瀏覽器不需要重新載入所有頁面；藉由XML解析傳遞與交換的資料。例如註冊帳戶時提示帳號已被使用，或者是在搜尋欄跳出相關字詞、購物欄顯示庫存量，這些都是透過 ajax 的方式，不需要重新載入頁面就能完成。</p><h4 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h4><p>首先要產生 XMLHttpRequest()，才能物件跨瀏覽器撈資料，執行 request 之後，就會出現相對的資料。<br><img src="https://i.imgur.com/0cHCAgB.png" alt></p><p>readystate 代表目前狀態</p><pre><code>0-你已經產生一個XMLHttpRequest，但是還沒有連結你要撈的資料1-用了open()，但還沒有把資料傳送過去。2-偵側到用了send。3 - (processing request)資訊處理中。4 - (request finished and response is ready)撈到資料，數據完全接收到了。</code></pre><p>以 xhr.open(,,true)來初始設定，需要代入3個參數。第一個參數是發出request 的方式，格式有 get (讀取)、post (發送資料到伺服器)；第二個參數是要讀取的網址；第三個參數是同步與非同步</p><pre><code>var xhr = new XMLHttpRequest();// 格式,要讀取的網址,同步與非同步// 格式: get(讀取), post(傳送資料到伺服器)xhr.open(&quot;get&quot;, &quot;這裡放網址&quot;, true);// 空值，單純get，沒有要傳資料，括號中用nullxhr.send(null);</code></pre><p>如果資料傳輸完畢且成功，在 XMLHttpRequest 中的 readyState 會等於 4，responseText 則是內容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;AJAX&lt;/h3&gt;&lt;p&gt;AJAX並非是一個技術（Technology），而是一種網站設計的架構（Architecture），雖然主要以JavaScr
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>JS 30 Days Array Cardio 1</title>
    <link href="http://yoursite.com/2019/06/04/2019-06-04-1/"/>
    <id>http://yoursite.com/2019/06/04/2019-06-04-1/</id>
    <published>2019-06-03T16:00:00.000Z</published>
    <updated>2019-06-28T07:09:58.411Z</updated>
    
    <content type="html"><![CDATA[<p>這一天的課程主要說明運用 Array 是 Javascript 很重要的環節，像是 filter、map、sort、reduce。</p><h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例 1"></a>範例 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const inventors = [&#123;</span><br><span class="line">    first: &apos;Albert&apos;,</span><br><span class="line">    last: &apos;Einstein&apos;,</span><br><span class="line">    year: 1879,</span><br><span class="line">    passed: 1955</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    first: &apos;Isaac&apos;,</span><br><span class="line">    last: &apos;Newton&apos;,</span><br><span class="line">    year: 1643,</span><br><span class="line">    passed: 1727</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    first: &apos;Galileo&apos;,</span><br><span class="line">    last: &apos;Galilei&apos;,</span><br><span class="line">    year: 1564,</span><br><span class="line">    passed: 1642</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    first: &apos;Marie&apos;,</span><br><span class="line">    last: &apos;Curie&apos;,</span><br><span class="line">    year: 1867,</span><br><span class="line">    passed: 1934</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    first: &apos;Johannes&apos;,</span><br><span class="line">    last: &apos;Kepler&apos;,</span><br><span class="line">    year: 1571,</span><br><span class="line">    passed: 1630</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    first: &apos;Nicolaus&apos;,</span><br><span class="line">    last: &apos;Copernicus&apos;,</span><br><span class="line">    year: 1473,</span><br><span class="line">    passed: 1543</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    first: &apos;Max&apos;,</span><br><span class="line">    last: &apos;Planck&apos;,</span><br><span class="line">    year: 1858,</span><br><span class="line">    passed: 1947</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    first: &apos;Katherine&apos;,</span><br><span class="line">    last: &apos;Blodgett&apos;,</span><br><span class="line">    year: 1898,</span><br><span class="line">    passed: 1979</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    first: &apos;Ada&apos;,</span><br><span class="line">    last: &apos;Lovelace&apos;,</span><br><span class="line">    year: 1815,</span><br><span class="line">    passed: 1852</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    first: &apos;Sarah E.&apos;,</span><br><span class="line">    last: &apos;Goode&apos;,</span><br><span class="line">    year: 1855,</span><br><span class="line">    passed: 1905</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    first: &apos;Lise&apos;,</span><br><span class="line">    last: &apos;Meitner&apos;,</span><br><span class="line">    year: 1878,</span><br><span class="line">    passed: 1968</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    first: &apos;Hanna&apos;,</span><br><span class="line">    last: &apos;Hammarström&apos;,</span><br><span class="line">    year: 1829,</span><br><span class="line">    passed: 1909</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* Array.prototype.filter()</span><br><span class="line"></span><br><span class="line">過濾的方法，就是傳入一個函數，並且以迴圈檢查運算每個物件，由原陣列中通過該函式檢驗之元素所構成的新陣列</span><br></pre></td></tr></table></figure><p>const fifteen = inventors.filter(function(inventor){<br>if(inventor.year&gt;=1500&amp;&amp;inventor.year&lt;=1599){<br>return true; //means keep it<br>}</p><p>});</p><p>// arrow function 寫法<br>const fifteen = inventors.filter(inventor =&gt; (inventor.year &gt;= 1500 &amp;&amp; inventor.year &lt;= 1600));</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* Array.prototype.map()</span><br><span class="line"></span><br><span class="line">map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。</span><br></pre></td></tr></table></figure><p>//寫法1</p><p>const fullNames = inventors.map(inventor =&gt;inventor.first+’’+inventor.last);</p><p>//寫法2</p><p>const fullNames = inventors.map(inventor =&gt; (<code>${inventor.first}${inventor.last}</code>));</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* Array.prototype.sort()</span><br><span class="line">sort() 方法會原地對一個陣列的所有元素進行排序，並回傳此陣列。</span><br></pre></td></tr></table></figure><p>//寫法 1</p><p>const ordered = inventor.sort(function(a,b){<br>if(a.year&gt;b.year){<br>return 1;<br>}else{<br>return -1<br>}});</p><p>// 寫法2</p><p>const ordered= inventor.sort((a,b)=&gt;a.year&gt;b.year ? 1:-1);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> const oldest = inventors.sort(function (a, b) {<br>      const lastGuy = a.passed - a.year;<br>      const nextGuy = b.passed - b.year;<br>      return lastGuy &gt; nextGuy ? 1 : -1;<br>    });<br>    console.table(oldest);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* Array.prototype.reduce()</span><br><span class="line">reduce() 方法將一個累加器及陣列中每項元素（由左至右）傳入回呼函式，將陣列化為單一值。</span><br></pre></td></tr></table></figure><p>const totalYear = inventors.reduce((total, inventor) =&gt; { return total + (inventor.passed - inventor.year);<br>    }, 0);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 範例 2</span><br><span class="line"></span><br><span class="line">怎麼過濾出網頁裡有 &quot;de&quot; 的地址？</span><br></pre></td></tr></table></figure><p>//<a href="https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris</a></p><p>const category = document.querySelector(‘.mw-category’);<br>const link = category.querySelectorAll(‘a’);</p><p>const aElement = Array.from(document.querySelectorAll(‘.mw-category a’))<br>let list = aElement.map(item =&gt; item.textContent)<br>                  .filter(item =&gt; item.includes(‘de’))<br>console.log(list)</p><h3 id="範例3"><a href="#範例3" class="headerlink" title="範例3"></a>範例3</h3><p>依照姓來排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const people = [&apos;Beck, Glenn&apos;, &apos;Becker, Carl&apos;, &apos;Beckett, Samuel&apos;, &apos;Beddoes, Mick&apos;, &apos;Beecher, Henry&apos;,</span><br><span class="line">      &apos;Beethoven, Ludwig&apos;, &apos;Begin, Menachem&apos;, &apos;Belloc, Hilaire&apos;, &apos;Bellow, Saul&apos;, &apos;Benchley, Robert&apos;,</span><br><span class="line">      &apos;Benenson, Peter&apos;, &apos;Ben-Gurion, David&apos;, &apos;Benjamin, Walter&apos;, &apos;Benn, Tony&apos;, &apos;Bennington, Chester&apos;,</span><br><span class="line">      &apos;Benson, Leana&apos;, &apos;Bent, Silas&apos;, &apos;Bentsen, Lloyd&apos;, &apos;Berger, Ric&apos;, &apos;Bergman, Ingmar&apos;, &apos;Berio, Luciano&apos;,</span><br><span class="line">      &apos;Berle, Milton&apos;, &apos;Berlin, Irving&apos;, &apos;Berne, Eric&apos;, &apos;Bernhard, Sandra&apos;, &apos;Berra, Yogi&apos;, &apos;Berry, Halle&apos;,</span><br><span class="line">      &apos;Berry, Wendell&apos;, &apos;Bethea, Erin&apos;, &apos;Bevan, Aneurin&apos;, &apos;Bevel, Ken&apos;, &apos;Biden, Joseph&apos;, &apos;Bierce, Ambrose&apos;,</span><br><span class="line">      &apos;Biko, Steve&apos;, &apos;Billings, Josh&apos;, &apos;Biondo, Frank&apos;, &apos;Birrell, Augustine&apos;, &apos;Black, Elk&apos;, &apos;Blair, Robert&apos;,</span><br><span class="line">      &apos;Blair, Tony&apos;, &apos;Blake, William&apos;</span><br><span class="line">    ];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const alpha = people.sort((lastOne, nextOne) =&gt; &#123;</span><br><span class="line">   const [aLast, aFirst] = lastOne.split(&apos;,&apos;);</span><br><span class="line">   const [bLast, bFirst] = nextOne.split(&apos;,&apos;);</span><br><span class="line">   return aLast &gt; bFirst ? 1 : -1;</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> console.table(alpha);</span><br></pre></td></tr></table></figure><h3 id="範例4"><a href="#範例4" class="headerlink" title="範例4"></a>範例4</h3><p>加總個別項目的總數</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const data = [&apos;car&apos;, &apos;car&apos;, &apos;truck&apos;, &apos;truck&apos;, &apos;bike&apos;, &apos;walk&apos;, &apos;car&apos;, &apos;van&apos;, &apos;bike&apos;, &apos;walk&apos;, </span><br><span class="line">&apos;car&apos;, &apos;van&apos;, &apos;car&apos;, &apos;truck&apos;, &apos;pogostick&apos;];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> const transportation = data.reduce(function (obj, item) &#123;if (!obj[item]) &#123;</span><br><span class="line">obj[item] = 0; &#125;</span><br><span class="line"> obj[item]++;</span><br><span class="line">return obj;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">console.table(transportation);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這一天的課程主要說明運用 Array 是 Javascript 很重要的環節，像是 filter、map、sort、reduce。&lt;/p&gt;
&lt;h3 id=&quot;範例-1&quot;&gt;&lt;a href=&quot;#範例-1&quot; class=&quot;headerlink&quot; title=&quot;範例 1&quot;&gt;&lt;/a&gt;範
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 30 Days Flex Panels Image Gallery</title>
    <link href="http://yoursite.com/2019/06/04/2019-06-04-2/"/>
    <id>http://yoursite.com/2019/06/04/2019-06-04-2/</id>
    <published>2019-06-03T16:00:00.000Z</published>
    <updated>2019-06-28T07:10:04.460Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用-CSS-Flex"><a href="#使用-CSS-Flex" class="headerlink" title="使用 CSS Flex"></a>使用 CSS Flex</h3><p><img src="https://i.imgur.com/u4ZbS9k.png" alt></p><p>最外層的父元素 display 要設定為 flex 才會產生作為一個container容器的效果</p><p><img src="https://i.imgur.com/oyl8z9l.png" alt></p><p>設定子元素在畫面上都佔據一樣大小，並且將它設定為另一個container。</p><p>Flex 是可以嵌套的，也就是 flex container 可以同時是其他 flex container 的 flex item。</p><p><img src="https://i.imgur.com/BQzvPM8.png" alt></p><h3 id="設定translate"><a href="#設定translate" class="headerlink" title="設定translate"></a>設定translate</h3><p>文字將會在 Y 軸的上下點擊動態隱藏或出現</p><p><img src="https://i.imgur.com/E9ESH5j.png" alt></p><p>中間的文字將會在點擊時動態放大<br><img src="https://i.imgur.com/8Jxh5oN.png" alt></p><h3 id="綁定多個要監聽事件的元素"><a href="#綁定多個要監聽事件的元素" class="headerlink" title="綁定多個要監聽事件的元素"></a>綁定多個要監聽事件的元素</h3><p>用 document.querySelectorAll(‘’) 來選擇多個符合 css 選擇器的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const panels = document.querySelectorAll(&apos;.panel&apos;);</span><br></pre></td></tr></table></figure><p>一次對多個元素綁定監聽事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panels.forEach(panel =&gt; panel.addEventListener(&apos;click&apos;, toggleOpen));</span><br></pre></td></tr></table></figure><h3 id="完成品"><a href="#完成品" class="headerlink" title="完成品"></a>完成品</h3><p><a href="https://" target="_blank" rel="noopener">https://codepen.io/Shengzhi/pen/zQyZZv</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用-CSS-Flex&quot;&gt;&lt;a href=&quot;#使用-CSS-Flex&quot; class=&quot;headerlink&quot; title=&quot;使用 CSS Flex&quot;&gt;&lt;/a&gt;使用 CSS Flex&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/u4Zb
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day20-預設值</title>
    <link href="http://yoursite.com/2019/06/04/2019-06-04-3/"/>
    <id>http://yoursite.com/2019/06/04/2019-06-04-3/</id>
    <published>2019-06-03T16:00:00.000Z</published>
    <updated>2019-06-28T07:10:10.422Z</updated>
    
    <content type="html"><![CDATA[<p>運算子的強制型轉特性，在一些框架或JS程式裡究竟有什麼比較常見的用處？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function greet(name) &#123;</span><br><span class="line">    console.log(&apos;hello&apos; + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br></pre></td></tr></table></figure><p>假使呼叫 greet的時候 沒有參數，在 Javascript 並不會報錯，它會當做<br>name 沒有東西。所以如果 <code>console.log(name)</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function greet(name) &#123;</span><br><span class="line">    console.log(&apos;name&apos;);</span><br><span class="line">    console.log(&apos;hello&apos; + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/izhIPGe.png" alt></p><p>結果出現 undefined，因為函數被呼叫的時候，一個新的執行環境被創造，然後這個變數<code>name</code> 是在函數內被創造，雖然傳入的值是在呼叫階段被設定，但這個變數在記憶體內已被設定為undefined。</p><p>所以加號運算子，當看到字串加上一個變數和值為undefined的name，它會將純值undefined強制型轉為字串。</p><p>既然我們已經了解運算子和強制型轉如何作用，所以雖然這非理想的行為，但也非完全無法預期的行為。但我們究竟該怎麼做呢？假設我們想要給參數<code>name</code> 一個預設值。</p><h3 id="設定預設值"><a href="#設定預設值" class="headerlink" title="設定預設值"></a>設定預設值</h3><p>如果 undefined 是函數被呼叫時最終的值，因為運算子只是會回傳值的函數，所以這個 <code>||</code>  運算子不只是回傳 true 或 false，它的特殊行為是，如果傳入 2 個可以被型轉為布林值的，它會回傳其中一個被轉型為true的值。</p><p><img src="https://i.imgur.com/O8CA6od.png" alt></p><p><img src="https://i.imgur.com/G7Ma9sN.png" alt></p><p>所以可以用這個運算子來表示，如果一個東西不存在、null 或空字串，就給我另一個。運用<code>||</code> 運算子，讓函數傳入的參數假如沒有值或不存在、空字串等狀況時，就回傳預設值給等號運算子。因為優先性，所以 <code>｜｜</code> 會比等號先執行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function greet(name) &#123;</span><br><span class="line">   name = name || &apos;&lt;Your name here&gt;&apos;;</span><br><span class="line">    console.log(&apos;hello&apos; + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(&apos;tony&apos;);</span><br><span class="line">greet();</span><br><span class="line">greet(0);</span><br></pre></td></tr></table></figure><p>第一次呼叫的時候傳入參數tony，第二次呼叫則沒有參數。當傳入參數tony時，<code>name=name</code> 會強制型轉為true，所以不會回傳右邊的預設值。比起 if 陳述句，用 <code>｜｜</code> 表達一行預設值的程式碼會更為簡潔。但還是需要注意 0 的狀況。如果傳入 0 呼叫 greet，0 會被轉換為 false，還是會得到預設值。</p><p><img src="https://i.imgur.com/5fNw52i.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;運算子的強制型轉特性，在一些框架或JS程式裡究竟有什麼比較常見的用處？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day19-存在與布林</title>
    <link href="http://yoursite.com/2019/06/03/2019-06-03/"/>
    <id>http://yoursite.com/2019/06/03/2019-06-03/</id>
    <published>2019-06-02T16:00:00.000Z</published>
    <updated>2019-06-28T07:09:50.370Z</updated>
    
    <content type="html"><![CDATA[<p>動態型別和強制型轉到底有什麼功能？</p><p><img src="https://i.imgur.com/aewXeKR.png" alt></p><p>以上這些東西都表示不存在，所以被布林轉換成false。然而，這些特性是可以利用的嗎？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a; </span><br><span class="line"></span><br><span class="line">if (a) &#123;</span><br><span class="line">    console.log(&apos;something is there&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宣告var a 但不設值</p><p>在陳述句括號裡的東西，會轉換成布林，所以a是什麼不重要。如果 a 是上述三個任何一種，那麼這個if陳述句會不成立，因為a不存在。</p><p>因為在執行環境的創造階段，會在記憶體為這個變數建立位置，然後會設定它的初始值為 undefined，而undefined會被轉換為false。</p><p>所以我們可以用強制型轉來檢查 a 是否存在。如果 a 因為沒有設值所以是undefined，或者 a 是null，檢查的時候不會出現任何東西。</p><p>但是當我有比如字串的東西，不是空的時候。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a; </span><br><span class="line"></span><br><span class="line">a =&apos;hi&apos;</span><br><span class="line"></span><br><span class="line">if (a) &#123;</span><br><span class="line">    console.log(&apos;something is there&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果出現</p><p><img src="https://i.imgur.com/5RpNEUX.png" alt></p><p>所以我們可以用強制型轉的特性，來檢查變數有沒有值。</p><h3 id="強制型轉的危險"><a href="#強制型轉的危險" class="headerlink" title="強制型轉的危險"></a>強制型轉的危險</h3><p><img src="https://i.imgur.com/1hAoZU2.png" alt></p><p>如果 <code>a=0</code> 變數最後的值為 0 ，它也是fasle。就會出現問題，因為0不是不存在，這是一個有效的值。</p><h3 id="如何解決？"><a href="#如何解決？" class="headerlink" title="如何解決？"></a>如何解決？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line"></span><br><span class="line">a = &apos;0&apos;;</span><br><span class="line"></span><br><span class="line">if (a||a===0) &#123;</span><br><span class="line">    console.log(&apos;something is there&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果檢查運算子優先性和相依性，<code>||</code> 的優先性比<code>===</code> 低，所以完全相等函數會比<code>||</code>執行。</p><p>但是如果值不太可能為0的話。以這種方式檢查，看它是不是存在就好。這個利用強制型轉的模式去檢查東西是否存在，例如debug的時候。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line"></span><br><span class="line">a=&quot;1&quot;</span><br><span class="line"></span><br><span class="line">if (a) &#123;</span><br><span class="line">    console.log(&apos;something is there&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;動態型別和強制型轉到底有什麼功能？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/aewXeKR.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;以上這些東西都表示不存在，所以被布林轉換成false。然而，這些特性是可以利用的嗎？&lt;/p&gt;
&lt;figure cl
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服 JavaScript 的奇怪部份 Day18-比較運算子</title>
    <link href="http://yoursite.com/2019/06/02/2019-06-02-2/"/>
    <id>http://yoursite.com/2019/06/02/2019-06-02-2/</id>
    <published>2019-06-01T16:00:00.000Z</published>
    <updated>2019-06-28T07:09:42.277Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/nXsANCQ.png" alt></p><p>以上的小於運算子範例，我們會預設結果為true<br><img src="https://i.imgur.com/UKOtGd6.png" alt></p><p>但是這個例子竟然也是 true ? 這可以用運算子優先性和相依性來解釋。這兩個運算子的優先性一樣，所以用相依性來決定執行順序，所以相依性是從左到右，左邊先執行。所以是 <code>3&lt;2</code> 先執行，並且得出false。</p><p><img src="https://i.imgur.com/iWqjiWq.png" alt></p><p>接下來，因為運算子遇到兩個不同型別的比較，這裡是一個布林值與數字，所以布林被強制型轉為數字。</p><p><img src="https://i.imgur.com/KWKIkuW.png" alt></p><p>我們可以用內建函數查詢，發現 false 被型轉為數字 0。所以 0&lt;1 得到為true 的結果，因為由相依性決定的函數運算子執行順序及值的強制型轉。所以需要注意的是，Javascript並不是以我們直覺的邏輯在運作，強制型轉可能會得出一些人類直覺看來詭異的結果，但在Javascript卻是非常正常的狀況。</p><p><img src="https://i.imgur.com/pG6N0X4.png" alt></p><p>NaN 表示有一個東西想要轉換成數值型別，但他不是數字，所以無法型轉。<br><img src="https://i.imgur.com/BrIaVDQ.png" alt></p><p>所以我們在特殊狀況下不要型轉不就好了嗎？只要看兩者是否相等即可？</p><p><img src="https://i.imgur.com/sUyX9ZE.png" alt></p><p>但這會造成一些奇怪的狀況，例如以下很難除錯的情況<br><img src="https://i.imgur.com/idnQg9d.png" alt><br><img src="https://i.imgur.com/F2KgSgv.png" alt></p><p>為了避免這種狀況，可以用 <code>===</code> (強制等於）或 <code>!==</code> (強制不等於) 來避免強制型轉的狀況。 三個等號這個內建函數會判定兩者是不同型別，所以不相等，這可以避免一些奇怪的潛在錯誤。</p><p><img src="https://i.imgur.com/xRIfkSx.png" alt></p><p>如果只用雙等號，以下兩個值就會被強制型轉，如果用三等號，因為他們型別不同</p><p><img src="https://i.imgur.com/cDiWKw5.png" alt></p><p>所以要注意，最好用三等號來比較相等性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nXsANCQ.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;以上的小於運算子範例，我們會預設結果為true&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/UKOtGd6.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>map() 和 forEach() 的差別在哪？</title>
    <link href="http://yoursite.com/2019/06/02/2019-06-02-1/"/>
    <id>http://yoursite.com/2019/06/02/2019-06-02-1/</id>
    <published>2019-06-01T16:00:00.000Z</published>
    <updated>2019-06-28T06:28:51.306Z</updated>
    
    <content type="html"><![CDATA[<p>兩種方法都會遍歷陣列的元素。map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。但是forEach不會建立新陣列，只會將原先陣列內的每個元素，皆傳入並執行給定的函式一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var array1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class="line"></span><br><span class="line">array1.forEach(function(element) &#123;</span><br><span class="line">  console.log(element);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// expected output: &quot;a&quot;</span><br><span class="line">// expected output: &quot;b&quot;</span><br><span class="line">// expected output: &quot;c&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var array1 = [1, 4, 9, 16];</span><br><span class="line"></span><br><span class="line">// pass a function to map</span><br><span class="line">const map1 = array1.map(x =&gt; x * 2);</span><br><span class="line"></span><br><span class="line">console.log(map1);</span><br><span class="line">// expected output: Array [2, 8, 18, 32]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;兩種方法都會遍歷陣列的元素。map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。但是forEach不會建立新陣列，只會將原先陣列內的每個元素，皆傳入並執行給定的函式一次。&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="前端學習" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
